
F103SemiHostedDoppler SECOND TRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08007760  08007760  00017760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007bb8  08007bb8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bb8  08007bb8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  200001e4  08007da4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de8  08007da4  00020de8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6b9  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bee  00000000  00000000  0002a8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ee  00000000  00000000  0002d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4f4  00000000  00000000  00044a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086713  00000000  00000000  0004ff42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004204  00000000  00000000  000d66a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007748 	.word	0x08007748

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007748 	.word	0x08007748

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <HAL_TIM_PeriodElapsedCallback>:


/* Speed radar code START*/
volatile uint32_t tim1_overflows = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    if (htim -> Instance == TIM1) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d104      	bne.n	8001000 <HAL_TIM_PeriodElapsedCallback+0x1c>
        ++tim1_overflows;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ffe:	6013      	str	r3, [r2, #0]
    }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40012c00 	.word	0x40012c00
 8001010:	20000208 	.word	0x20000208

08001014 <pushVelocity>:
int Falls[VelBufferSize];
float Frequencies[VelBufferSize];
volatile int Differences[VelBufferSize];
uint32_t timOverflows[VelBufferSize];

void pushVelocity(float currVelocity, int currRise, int currFall, int currDifference, float currFrequnecy, uint32_t currOverflows) {
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
		velocities[currVelocityIndex] = currVelocity;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <pushVelocity+0x78>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	491a      	ldr	r1, [pc, #104]	; (8001090 <pushVelocity+0x7c>)
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Rises[currVelocityIndex] = currRise;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <pushVelocity+0x78>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4918      	ldr	r1, [pc, #96]	; (8001094 <pushVelocity+0x80>)
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Falls[currVelocityIndex] = currFall;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <pushVelocity+0x78>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4916      	ldr	r1, [pc, #88]	; (8001098 <pushVelocity+0x84>)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Differences[currVelocityIndex] = currDifference;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <pushVelocity+0x78>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4914      	ldr	r1, [pc, #80]	; (800109c <pushVelocity+0x88>)
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Frequencies[currVelocityIndex] = currFrequnecy;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <pushVelocity+0x78>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4912      	ldr	r1, [pc, #72]	; (80010a0 <pushVelocity+0x8c>)
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timOverflows[currVelocityIndex] = currOverflows;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <pushVelocity+0x78>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4910      	ldr	r1, [pc, #64]	; (80010a4 <pushVelocity+0x90>)
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		currVelocityIndex++;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <pushVelocity+0x78>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <pushVelocity+0x78>)
 8001072:	6013      	str	r3, [r2, #0]
		if (currVelocityIndex >VelBufferSize-1){
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <pushVelocity+0x78>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b27      	cmp	r3, #39	; 0x27
 800107a:	dd02      	ble.n	8001082 <pushVelocity+0x6e>
			currVelocityIndex = 0;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <pushVelocity+0x78>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
		}
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	2000021c 	.word	0x2000021c
 8001090:	20000c50 	.word	0x20000c50
 8001094:	20000cf0 	.word	0x20000cf0
 8001098:	20000938 	.word	0x20000938
 800109c:	20000b10 	.word	0x20000b10
 80010a0:	20000a24 	.word	0x20000a24
 80010a4:	20000bb0 	.word	0x20000bb0

080010a8 <reloadVelBuffer>:
void reloadVelBuffer() {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
	currVelocityIndex=0;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <reloadVelBuffer+0x6c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<VelBufferSize;i++){
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	e022      	b.n	8001100 <reloadVelBuffer+0x58>
		velocities[i] = 0;
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <reloadVelBuffer+0x70>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0100 	mov.w	r1, #0
 80010c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Rises[i] = 0;
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <reloadVelBuffer+0x74>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2100      	movs	r1, #0
 80010cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Falls[i] = 0;
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <reloadVelBuffer+0x78>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2100      	movs	r1, #0
 80010d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Differences[i] = 0;
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <reloadVelBuffer+0x7c>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2100      	movs	r1, #0
 80010e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Frequencies[i] = 0;
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <reloadVelBuffer+0x80>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 0100 	mov.w	r1, #0
 80010ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				timOverflows[i] = 0;
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <reloadVelBuffer+0x84>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2100      	movs	r1, #0
 80010f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<VelBufferSize;i++){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b27      	cmp	r3, #39	; 0x27
 8001104:	ddd9      	ble.n	80010ba <reloadVelBuffer+0x12>
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2000021c 	.word	0x2000021c
 8001118:	20000c50 	.word	0x20000c50
 800111c:	20000cf0 	.word	0x20000cf0
 8001120:	20000938 	.word	0x20000938
 8001124:	20000b10 	.word	0x20000b10
 8001128:	20000a24 	.word	0x20000a24
 800112c:	20000bb0 	.word	0x20000bb0

08001130 <compare>:


int compare (const void * a, const void * b) {
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	  int data1 = *(int *)a, data2 = *(int *)b;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60bb      	str	r3, [r7, #8]
	  if(data1 < data2) // a < b
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	da02      	bge.n	8001154 <compare+0x24>
		return -1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e006      	b.n	8001162 <compare+0x32>
	  else if(data1 == data2) // a == b
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	429a      	cmp	r2, r3
 800115a:	d101      	bne.n	8001160 <compare+0x30>
		return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e000      	b.n	8001162 <compare+0x32>
	  else
		return 1;  // a > b
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <findAvg>:

float findAvg(float arr[40], int arr_len) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
    // find 25, 75 percentiles
    int lower_percentile = arr_len * 0.25;
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f7ff f944 	bl	8000404 <__aeabi_i2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <findAvg+0xa0>)
 8001182:	f7ff f9a9 	bl	80004d8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fc53 	bl	8000a38 <__aeabi_d2iz>
 8001192:	4603      	mov	r3, r0
 8001194:	60fb      	str	r3, [r7, #12]
    int high_percentile = arr_len * 0.75;
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f7ff f934 	bl	8000404 <__aeabi_i2d>
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <findAvg+0xa4>)
 80011a2:	f7ff f999 	bl	80004d8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc43 	bl	8000a38 <__aeabi_d2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60bb      	str	r3, [r7, #8]
    float sum = 0;
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
    for (int i = lower_percentile + 1; i < high_percentile; i++) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	e00d      	b.n	80011e0 <findAvg+0x74>
        sum += arr[i];
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	6978      	ldr	r0, [r7, #20]
 80011d2:	f7ff fcaf 	bl	8000b34 <__addsf3>
 80011d6:	4603      	mov	r3, r0
 80011d8:	617b      	str	r3, [r7, #20]
    for (int i = lower_percentile + 1; i < high_percentile; i++) {
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	3301      	adds	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbed      	blt.n	80011c4 <findAvg+0x58>
    }
    return sum / (arr_len / 2);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	0fda      	lsrs	r2, r3, #31
 80011ec:	4413      	add	r3, r2
 80011ee:	105b      	asrs	r3, r3, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fd53 	bl	8000c9c <__aeabi_i2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4619      	mov	r1, r3
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff fe56 	bl	8000eac <__aeabi_fdiv>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	3fd00000 	.word	0x3fd00000
 8001210:	3fe80000 	.word	0x3fe80000
 8001214:	00000000 	.word	0x00000000

08001218 <HAL_TIM_IC_CaptureCallback>:
float frequency;
float velocity;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim) // is called whenever rising or falling edge is captured

{
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
    if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt is triggered in channel 1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7f1b      	ldrb	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d173      	bne.n	8001310 <HAL_TIM_IC_CaptureCallback+0xf8>
    {
        if (!Rise_Captured) // if the rise time(RiseVal) is not captured, then it is a rising edge
 8001228:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x110>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10f      	bne.n	8001250 <HAL_TIM_IC_CaptureCallback+0x38>
        {
            RiseVal = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f002 fc14 	bl	8003a60 <HAL_TIM_ReadCapturedValue>
 8001238:	4603      	mov	r3, r0
 800123a:	4a3c      	ldr	r2, [pc, #240]	; (800132c <HAL_TIM_IC_CaptureCallback+0x114>)
 800123c:	6013      	str	r3, [r2, #0]
            RiseVal = HAL_GetTick(); // in miliseconds
 800123e:	f000 fd69 	bl	8001d14 <HAL_GetTick>
 8001242:	4603      	mov	r3, r0
 8001244:	4a39      	ldr	r2, [pc, #228]	; (800132c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001246:	6013      	str	r3, [r2, #0]
            Rise_Captured = 1;
 8001248:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x110>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]
            RiseVal = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
            tim1_overflows = 0;
            Rise_Captured=1;
        }
    }
}
 800124e:	e05f      	b.n	8001310 <HAL_TIM_IC_CaptureCallback+0xf8>
            FallVal = 65535 * tim1_overflows + HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	1a9c      	subs	r4, r3, r2
 800125a:	2100      	movs	r1, #0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f002 fbff 	bl	8003a60 <HAL_TIM_ReadCapturedValue>
 8001262:	4603      	mov	r3, r0
 8001264:	4423      	add	r3, r4
 8001266:	4a33      	ldr	r2, [pc, #204]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001268:	6013      	str	r3, [r2, #0]
            Difference = FallVal - RiseVal; // duration of high
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	4a30      	ldr	r2, [pc, #192]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001276:	6013      	str	r3, [r2, #0]
            frequency = 1028500.0 / Difference;
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x120>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f8b1 	bl	80003e4 <__aeabi_ui2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	a124      	add	r1, pc, #144	; (adr r1, 8001318 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800128c:	f7ff fa4e 	bl	800072c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fbf6 	bl	8000a88 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_TIM_IC_CaptureCallback+0x124>)
 80012a0:	6013      	str	r3, [r2, #0]
            velocity = 51308.0/Difference;
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x120>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f89c 	bl	80003e4 <__aeabi_ui2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	a11b      	add	r1, pc, #108	; (adr r1, 8001320 <HAL_TIM_IC_CaptureCallback+0x108>)
 80012b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b6:	f7ff fa39 	bl	800072c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fbe1 	bl	8000a88 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012ca:	6013      	str	r3, [r2, #0]
            pushVelocity(velocity, RiseVal, FallVal,Difference, frequency,tim1_overflows);
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_TIM_IC_CaptureCallback+0x114>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461c      	mov	r4, r3
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x120>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461d      	mov	r5, r3
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_TIM_IC_CaptureCallback+0x124>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x118>)
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	9201      	str	r2, [sp, #4]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	462b      	mov	r3, r5
 80012f0:	4622      	mov	r2, r4
 80012f2:	f7ff fe8f 	bl	8001014 <pushVelocity>
            RiseVal = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80012f6:	2100      	movs	r1, #0
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f002 fbb1 	bl	8003a60 <HAL_TIM_ReadCapturedValue>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001302:	6013      	str	r3, [r2, #0]
            tim1_overflows = 0;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
            Rise_Captured=1;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x110>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bdb0      	pop	{r4, r5, r7, pc}
 8001318:	00000000 	.word	0x00000000
 800131c:	412f6328 	.word	0x412f6328
 8001320:	00000000 	.word	0x00000000
 8001324:	40e90d80 	.word	0x40e90d80
 8001328:	20000218 	.word	0x20000218
 800132c:	2000020c 	.word	0x2000020c
 8001330:	20000208 	.word	0x20000208
 8001334:	20000210 	.word	0x20000210
 8001338:	20000214 	.word	0x20000214
 800133c:	200009d8 	.word	0x200009d8
 8001340:	20000ac4 	.word	0x20000ac4

08001344 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Speed radar code END*/

/* Matrix code START*/

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	// here we set second part of pwm_data
	uint8_t indx = 24;
 800134c:	2318      	movs	r3, #24
 800134e:	75fb      	strb	r3, [r7, #23]
	if (already_sent < MAX_LED + 2) {
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001358:	d242      	bcs.n	80013e0 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>
		uint32_t color;
		color = ((LED_Data[curr_data_id][1]<<16) | (LED_Data[curr_data_id][2]<<8) | (LED_Data[curr_data_id][3]));
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a36      	ldr	r2, [pc, #216]	; (8001438 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	041a      	lsls	r2, r3, #16
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4932      	ldr	r1, [pc, #200]	; (8001438 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	789b      	ldrb	r3, [r3, #2]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	431a      	orrs	r2, r3
 8001378:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	492e      	ldr	r1, [pc, #184]	; (8001438 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	78db      	ldrb	r3, [r3, #3]
 8001384:	4313      	orrs	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
		for (int j = 23; j >= 0; j--) {
 8001388:	2317      	movs	r3, #23
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	e019      	b.n	80013c2 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
			if (color&(1<<j)) {
 800138e:	2201      	movs	r2, #1
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_TIM_PWM_PulseFinishedCallback+0x68>
				pwm_data[indx] = 57; // if the bit is 1, the duty cycle is 64%
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	4a26      	ldr	r2, [pc, #152]	; (800143c <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80013a4:	2139      	movs	r1, #57	; 0x39
 80013a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013aa:	e004      	b.n	80013b6 <HAL_TIM_PWM_PulseFinishedCallback+0x72>
			} else {
				pwm_data[indx] = 29;  // if the bit is 0, the duty cycle is 32%
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80013b0:	211d      	movs	r1, #29
 80013b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	3301      	adds	r3, #1
 80013ba:	75fb      	strb	r3, [r7, #23]
		for (int j = 23; j >= 0; j--) {
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	3b01      	subs	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dae2      	bge.n	800138e <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
		}
		curr_data_id++;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 80013d0:	6013      	str	r3, [r2, #0]
		already_sent++;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80013dc:	801a      	strh	r2, [r3, #0]
		// transfer ended, reset all variables, stop dma
		already_sent = 0;
		curr_data_id = 0;
		HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
	}
}
 80013de:	e023      	b.n	8001428 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
	} else if (already_sent < MAX_LED + 2) {
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80013e8:	d214      	bcs.n	8001414 <HAL_TIM_PWM_PulseFinishedCallback+0xd0>
		for (int i = indx; i < 48; i++) {
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	e007      	b.n	8001400 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
			pwm_data[i] = 0;
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2100      	movs	r1, #0
 80013f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = indx; i < 48; i++) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b2f      	cmp	r3, #47	; 0x2f
 8001404:	ddf4      	ble.n	80013f0 <HAL_TIM_PWM_PulseFinishedCallback+0xac>
		already_sent++;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8001410:	801a      	strh	r2, [r3, #0]
}
 8001412:	e009      	b.n	8001428 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
		already_sent = 0;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8001416:	2200      	movs	r2, #0
 8001418:	801a      	strh	r2, [r3, #0]
		curr_data_id = 0;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001420:	2100      	movs	r1, #0
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001424:	f001 fde2 	bl	8002fec <HAL_TIM_PWM_Stop_DMA>
}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000200 	.word	0x20000200
 8001434:	20000204 	.word	0x20000204
 8001438:	200002d8 	.word	0x200002d8
 800143c:	200008d8 	.word	0x200008d8
 8001440:	200009dc 	.word	0x200009dc

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f000 fc0b 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f89d 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001452:	f000 f9e9 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8001456:	f000 f9c9 	bl	80017ec <MX_DMA_Init>
  MX_TIM1_Init();
 800145a:	f000 f8dd 	bl	8001618 <MX_TIM1_Init>
  MX_TIM4_Init();
 800145e:	f000 f94f 	bl	8001700 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

    initialise_monitor_handles();  // for semihosting
 8001462:	f006 f8cd 	bl	8007600 <initialise_monitor_handles>
    HAL_TIM_Base_Start_IT( & htim1);
 8001466:	483f      	ldr	r0, [pc, #252]	; (8001564 <main+0x120>)
 8001468:	f001 fd16 	bl	8002e98 <HAL_TIM_Base_Start_IT>


    /* Speed radar code START */
    HAL_TIM_IC_Start_IT( & htim1, TIM_CHANNEL_1); // start input capture in interrupt mode for timer 1
 800146c:	2100      	movs	r1, #0
 800146e:	483d      	ldr	r0, [pc, #244]	; (8001564 <main+0x120>)
 8001470:	f001 fed2 	bl	8003218 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT( & htim1, TIM_IT_CC1);
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <main+0x120>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <main+0x120>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0202 	orr.w	r2, r2, #2
 8001482:	60da      	str	r2, [r3, #12]
    uint32_t analysis_next = HAL_GetTick();
 8001484:	f000 fc46 	bl	8001d14 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

    	        if (HAL_GetTick() >= analysis_next) {
 800148a:	f000 fc43 	bl	8001d14 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4293      	cmp	r3, r2
 8001494:	d8f9      	bhi.n	800148a <main+0x46>
    	            __HAL_TIM_DISABLE_IT( & htim1, TIM_IT_CC1);
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <main+0x120>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <main+0x120>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0202 	bic.w	r2, r2, #2
 80014a4:	60da      	str	r2, [r3, #12]
    	            Rise_Captured =0;
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <main+0x124>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

    	            qsort (velocities, VelBufferSize, sizeof(float), compare);
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <main+0x128>)
 80014ae:	2204      	movs	r2, #4
 80014b0:	2128      	movs	r1, #40	; 0x28
 80014b2:	482f      	ldr	r0, [pc, #188]	; (8001570 <main+0x12c>)
 80014b4:	f003 fca5 	bl	8004e02 <qsort>
    	            float avgVel = findAvg(&velocities, VelBufferSize);
 80014b8:	2128      	movs	r1, #40	; 0x28
 80014ba:	482d      	ldr	r0, [pc, #180]	; (8001570 <main+0x12c>)
 80014bc:	f7ff fe56 	bl	800116c <findAvg>
 80014c0:	6038      	str	r0, [r7, #0]
    	            printf("AvgVel: %.2f \n", avgVel);
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f7fe ffb0 	bl	8000428 <__aeabi_f2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4829      	ldr	r0, [pc, #164]	; (8001574 <main+0x130>)
 80014ce:	f003 fbd1 	bl	8004c74 <iprintf>


    	            printf("Velocities: \n [");
 80014d2:	4829      	ldr	r0, [pc, #164]	; (8001578 <main+0x134>)
 80014d4:	f003 fbce 	bl	8004c74 <iprintf>
    	            for (int i = 0; i < VelBufferSize; i ++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	e00e      	b.n	80014fc <main+0xb8>
    	              printf("%.2f, ", velocities[i]);
 80014de:	4a24      	ldr	r2, [pc, #144]	; (8001570 <main+0x12c>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff9e 	bl	8000428 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4822      	ldr	r0, [pc, #136]	; (800157c <main+0x138>)
 80014f2:	f003 fbbf 	bl	8004c74 <iprintf>
    	            for (int i = 0; i < VelBufferSize; i ++) {
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b27      	cmp	r3, #39	; 0x27
 8001500:	dded      	ble.n	80014de <main+0x9a>
    	            }
    	            printf("]\n\n");
 8001502:	481f      	ldr	r0, [pc, #124]	; (8001580 <main+0x13c>)
 8001504:	f003 fc3c 	bl	8004d80 <puts>

    	            printf("Freq: \n [");
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <main+0x140>)
 800150a:	f003 fbb3 	bl	8004c74 <iprintf>


					for (int i = 0; i < VelBufferSize; i ++) {
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	e00e      	b.n	8001532 <main+0xee>
					  printf("%.2f, ", Frequencies[i]);
 8001514:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <main+0x144>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff83 	bl	8000428 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4815      	ldr	r0, [pc, #84]	; (800157c <main+0x138>)
 8001528:	f003 fba4 	bl	8004c74 <iprintf>
					for (int i = 0; i < VelBufferSize; i ++) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3301      	adds	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b27      	cmp	r3, #39	; 0x27
 8001536:	dded      	ble.n	8001514 <main+0xd0>
					}
					printf("]\n\n");
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <main+0x13c>)
 800153a:	f003 fc21 	bl	8004d80 <puts>

    	            reloadVelBuffer();
 800153e:	f7ff fdb3 	bl	80010a8 <reloadVelBuffer>

    	            // showVelocity(avgVel);
    	            // WS_set_sign(avgVel);

    	            analysis_next = HAL_GetTick() + analysis_every;
 8001542:	f000 fbe7 	bl	8001d14 <HAL_GetTick>
 8001546:	4603      	mov	r3, r0
 8001548:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800154c:	4413      	add	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    	            __HAL_TIM_ENABLE_IT( & htim1, TIM_IT_CC1);
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <main+0x120>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <main+0x120>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0202 	orr.w	r2, r2, #2
 800155e:	60da      	str	r2, [r3, #12]
    	        if (HAL_GetTick() >= analysis_next) {
 8001560:	e793      	b.n	800148a <main+0x46>
 8001562:	bf00      	nop
 8001564:	20000ac8 	.word	0x20000ac8
 8001568:	20000218 	.word	0x20000218
 800156c:	08001131 	.word	0x08001131
 8001570:	20000c50 	.word	0x20000c50
 8001574:	08007760 	.word	0x08007760
 8001578:	08007770 	.word	0x08007770
 800157c:	08007780 	.word	0x08007780
 8001580:	08007788 	.word	0x08007788
 8001584:	0800778c 	.word	0x0800778c
 8001588:	20000a24 	.word	0x20000a24

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b090      	sub	sp, #64	; 0x40
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2228      	movs	r2, #40	; 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f002 ff02 	bl	80043a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 f827 	bl	8002628 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015e0:	f000 f97a 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2102      	movs	r1, #2
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fa92 	bl	8002b28 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800160a:	f000 f965 	bl	80018d8 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <MX_TIM1_Init+0xe0>)
 8001644:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <MX_TIM1_Init+0xe4>)
 8001646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <MX_TIM1_Init+0xe0>)
 800164a:	2247      	movs	r2, #71	; 0x47
 800164c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <MX_TIM1_Init+0xe0>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_TIM1_Init+0xe0>)
 8001656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_TIM1_Init+0xe0>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_TIM1_Init+0xe0>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_TIM1_Init+0xe0>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800166e:	4822      	ldr	r0, [pc, #136]	; (80016f8 <MX_TIM1_Init+0xe0>)
 8001670:	f001 fbc2 	bl	8002df8 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800167a:	f000 f92d 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4619      	mov	r1, r3
 800168a:	481b      	ldr	r0, [pc, #108]	; (80016f8 <MX_TIM1_Init+0xe0>)
 800168c:	f002 f924 	bl	80038d8 <HAL_TIM_ConfigClockSource>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001696:	f000 f91f 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800169a:	4817      	ldr	r0, [pc, #92]	; (80016f8 <MX_TIM1_Init+0xe0>)
 800169c:	f001 fd64 	bl	8003168 <HAL_TIM_IC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016a6:	f000 f917 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <MX_TIM1_Init+0xe0>)
 80016ba:	f002 fdd9 	bl	8004270 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80016c4:	f000 f908 	bl	80018d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016c8:	2300      	movs	r3, #0
 80016ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_TIM1_Init+0xe0>)
 80016e0:	f001 ffa8 	bl	8003634 <HAL_TIM_IC_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80016ea:	f000 f8f5 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000ac8 	.word	0x20000ac8
 80016fc:	40012c00 	.word	0x40012c00

08001700 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_TIM4_Init+0xe4>)
 8001732:	4a2d      	ldr	r2, [pc, #180]	; (80017e8 <MX_TIM4_Init+0xe8>)
 8001734:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <MX_TIM4_Init+0xe4>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <MX_TIM4_Init+0xe4>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90-1;
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <MX_TIM4_Init+0xe4>)
 8001744:	2259      	movs	r2, #89	; 0x59
 8001746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <MX_TIM4_Init+0xe4>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <MX_TIM4_Init+0xe4>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001754:	4823      	ldr	r0, [pc, #140]	; (80017e4 <MX_TIM4_Init+0xe4>)
 8001756:	f001 fb4f 	bl	8002df8 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001760:	f000 f8ba 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176e:	4619      	mov	r1, r3
 8001770:	481c      	ldr	r0, [pc, #112]	; (80017e4 <MX_TIM4_Init+0xe4>)
 8001772:	f002 f8b1 	bl	80038d8 <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800177c:	f000 f8ac 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001780:	4818      	ldr	r0, [pc, #96]	; (80017e4 <MX_TIM4_Init+0xe4>)
 8001782:	f001 fbdb 	bl	8002f3c <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800178c:	f000 f8a4 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	4619      	mov	r1, r3
 800179e:	4811      	ldr	r0, [pc, #68]	; (80017e4 <MX_TIM4_Init+0xe4>)
 80017a0:	f002 fd66 	bl	8004270 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80017aa:	f000 f895 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM4_Init+0xe4>)
 80017c6:	f001 ffc9 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80017d0:	f000 f882 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM4_Init+0xe4>)
 80017d6:	f000 f957 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3738      	adds	r7, #56	; 0x38
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200009dc 	.word	0x200009dc
 80017e8:	40000800 	.word	0x40000800

080017ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_DMA_Init+0x38>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <MX_DMA_Init+0x38>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_DMA_Init+0x38>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	200b      	movs	r0, #11
 8001810:	f000 fb61 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001814:	200b      	movs	r0, #11
 8001816:	f000 fb7a 	bl	8001f0e <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <MX_GPIO_Init+0xa8>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <MX_GPIO_Init+0xa8>)
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_GPIO_Init+0xa8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_GPIO_Init+0xa8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <MX_GPIO_Init+0xa8>)
 800185a:	f043 0320 	orr.w	r3, r3, #32
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_GPIO_Init+0xa8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_GPIO_Init+0xa8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <MX_GPIO_Init+0xa8>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_GPIO_Init+0xa8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_GPIO_Init+0xa8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <MX_GPIO_Init+0xa8>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_GPIO_Init+0xa8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <MX_GPIO_Init+0xac>)
 80018a4:	f000 fea8 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4619      	mov	r1, r3
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_GPIO_Init+0xac>)
 80018c2:	f000 fd15 	bl	80022f0 <HAL_GPIO_Init>

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40011000 	.word	0x40011000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_MspInit+0x5c>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_MspInit+0x5c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_MspInit+0x5c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x5c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_MspInit+0x5c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_MspInit+0x60>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_MspInit+0x60>)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	40010000 	.word	0x40010000

08001948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a43      	ldr	r2, [pc, #268]	; (8001a70 <HAL_TIM_Base_MspInit+0x128>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d145      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a41      	ldr	r2, [pc, #260]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 800196e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FOUT_Pin;
 8001998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019a2:	2302      	movs	r3, #2
 80019a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FOUT_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4832      	ldr	r0, [pc, #200]	; (8001a78 <HAL_TIM_Base_MspInit+0x130>)
 80019ae:	f000 fc9f 	bl	80022f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2018      	movs	r0, #24
 80019b8:	f000 fa8d 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80019bc:	2018      	movs	r0, #24
 80019be:	f000 faa6 	bl	8001f0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2019      	movs	r0, #25
 80019c8:	f000 fa85 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019cc:	2019      	movs	r0, #25
 80019ce:	f000 fa9e 	bl	8001f0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201a      	movs	r0, #26
 80019d8:	f000 fa7d 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80019dc:	201a      	movs	r0, #26
 80019de:	f000 fa96 	bl	8001f0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	201b      	movs	r0, #27
 80019e8:	f000 fa75 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019ec:	201b      	movs	r0, #27
 80019ee:	f000 fa8e 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019f2:	e038      	b.n	8001a66 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_TIM_Base_MspInit+0x134>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d133      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_TIM_Base_MspInit+0x12c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a18:	4a1a      	ldr	r2, [pc, #104]	; (8001a84 <HAL_TIM_Base_MspInit+0x13c>)
 8001a1a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a1e:	2210      	movs	r2, #16
 8001a20:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a40:	2220      	movs	r2, #32
 8001a42:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a4c:	f000 fa7a 	bl	8001f44 <HAL_DMA_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_TIM_Base_MspInit+0x112>
      Error_Handler();
 8001a56:	f7ff ff3f 	bl	80018d8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_TIM_Base_MspInit+0x138>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	40000800 	.word	0x40000800
 8001a80:	20000d90 	.word	0x20000d90
 8001a84:	40020008 	.word	0x40020008

08001a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <HAL_TIM_MspPostInit+0x58>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d117      	bne.n	8001ad8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_TIM_MspPostInit+0x5c>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_TIM_MspPostInit+0x5c>)
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_TIM_MspPostInit+0x5c>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ac0:	2340      	movs	r3, #64	; 0x40
 8001ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_TIM_MspPostInit+0x60>)
 8001ad4:	f000 fc0c 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010c00 	.word	0x40010c00

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b32:	f000 f8dd 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA1_Channel1_IRQHandler+0x10>)
 8001b42:	f000 facf 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000d90 	.word	0x20000d90

08001b50 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM1_BRK_IRQHandler+0x10>)
 8001b56:	f001 fc65 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000ac8 	.word	0x20000ac8

08001b64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TIM1_UP_IRQHandler+0x10>)
 8001b6a:	f001 fc5b 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000ac8 	.word	0x20000ac8

08001b78 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001b7e:	f001 fc51 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000ac8 	.word	0x20000ac8

08001b8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <TIM1_CC_IRQHandler+0x10>)
 8001b92:	f001 fc47 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000ac8 	.word	0x20000ac8

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f002 fbbe 	bl	8004350 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20005000 	.word	0x20005000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000220 	.word	0x20000220
 8001c08:	20000de8 	.word	0x20000de8

08001c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	; (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c3e:	f7ff ffe5 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f002 fb8b 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c46:	f7ff fbfd 	bl	8001444 <main>
  bx lr
 8001c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c54:	08007bc0 	.word	0x08007bc0
  ldr r2, =_sbss
 8001c58:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c5c:	20000de8 	.word	0x20000de8

08001c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_2_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x28>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x28>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f923 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7ff fe30 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f93b 	bl	8001f2a <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f000 f903 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x1c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_IncTick+0x20>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_IncTick+0x20>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000dd4 	.word	0x20000dd4

08001d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_GetTick+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000dd4 	.word	0x20000dd4

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <__NVIC_EnableIRQ+0x34>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff90 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff2d 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff42 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff90 	bl	8001e18 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5f 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e043      	b.n	8001fe2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_DMA_Init+0xa8>)
 8001f62:	4413      	add	r3, r2
 8001f64:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <HAL_DMA_Init+0xac>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	009a      	lsls	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_DMA_Init+0xb0>)
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	bffdfff8 	.word	0xbffdfff8
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800200a:	2b02      	cmp	r3, #2
 800200c:	d005      	beq.n	800201a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e051      	b.n	80020be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 020e 	bic.w	r2, r2, #14
 8002028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <HAL_DMA_Abort_IT+0xd0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d029      	beq.n	8002098 <HAL_DMA_Abort_IT+0xa0>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a20      	ldr	r2, [pc, #128]	; (80020cc <HAL_DMA_Abort_IT+0xd4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_DMA_Abort_IT+0x9c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_DMA_Abort_IT+0xd8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d01a      	beq.n	800208e <HAL_DMA_Abort_IT+0x96>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_DMA_Abort_IT+0xdc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d012      	beq.n	8002088 <HAL_DMA_Abort_IT+0x90>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_DMA_Abort_IT+0xe0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00a      	beq.n	8002082 <HAL_DMA_Abort_IT+0x8a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <HAL_DMA_Abort_IT+0xe4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d102      	bne.n	800207c <HAL_DMA_Abort_IT+0x84>
 8002076:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800207a:	e00e      	b.n	800209a <HAL_DMA_Abort_IT+0xa2>
 800207c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002080:	e00b      	b.n	800209a <HAL_DMA_Abort_IT+0xa2>
 8002082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002086:	e008      	b.n	800209a <HAL_DMA_Abort_IT+0xa2>
 8002088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208c:	e005      	b.n	800209a <HAL_DMA_Abort_IT+0xa2>
 800208e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002092:	e002      	b.n	800209a <HAL_DMA_Abort_IT+0xa2>
 8002094:	2310      	movs	r3, #16
 8002096:	e000      	b.n	800209a <HAL_DMA_Abort_IT+0xa2>
 8002098:	2301      	movs	r3, #1
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_DMA_Abort_IT+0xe8>)
 800209c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
    } 
  }
  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40020008 	.word	0x40020008
 80020cc:	4002001c 	.word	0x4002001c
 80020d0:	40020030 	.word	0x40020030
 80020d4:	40020044 	.word	0x40020044
 80020d8:	40020058 	.word	0x40020058
 80020dc:	4002006c 	.word	0x4002006c
 80020e0:	40020000 	.word	0x40020000

080020e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2204      	movs	r2, #4
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d04f      	beq.n	80021ac <HAL_DMA_IRQHandler+0xc8>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d04a      	beq.n	80021ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <HAL_DMA_IRQHandler+0x1f0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d029      	beq.n	8002192 <HAL_DMA_IRQHandler+0xae>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_IRQHandler+0xaa>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a63      	ldr	r2, [pc, #396]	; (80022dc <HAL_DMA_IRQHandler+0x1f8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01a      	beq.n	8002188 <HAL_DMA_IRQHandler+0xa4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a62      	ldr	r2, [pc, #392]	; (80022e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d012      	beq.n	8002182 <HAL_DMA_IRQHandler+0x9e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a60      	ldr	r2, [pc, #384]	; (80022e4 <HAL_DMA_IRQHandler+0x200>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00a      	beq.n	800217c <HAL_DMA_IRQHandler+0x98>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_DMA_IRQHandler+0x204>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d102      	bne.n	8002176 <HAL_DMA_IRQHandler+0x92>
 8002170:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002174:	e00e      	b.n	8002194 <HAL_DMA_IRQHandler+0xb0>
 8002176:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800217a:	e00b      	b.n	8002194 <HAL_DMA_IRQHandler+0xb0>
 800217c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002180:	e008      	b.n	8002194 <HAL_DMA_IRQHandler+0xb0>
 8002182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002186:	e005      	b.n	8002194 <HAL_DMA_IRQHandler+0xb0>
 8002188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800218c:	e002      	b.n	8002194 <HAL_DMA_IRQHandler+0xb0>
 800218e:	2340      	movs	r3, #64	; 0x40
 8002190:	e000      	b.n	8002194 <HAL_DMA_IRQHandler+0xb0>
 8002192:	2304      	movs	r3, #4
 8002194:	4a55      	ldr	r2, [pc, #340]	; (80022ec <HAL_DMA_IRQHandler+0x208>)
 8002196:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8094 	beq.w	80022ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021aa:	e08e      	b.n	80022ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	2202      	movs	r2, #2
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d056      	beq.n	800226a <HAL_DMA_IRQHandler+0x186>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d051      	beq.n	800226a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 020a 	bic.w	r2, r2, #10
 80021e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_DMA_IRQHandler+0x1f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d029      	beq.n	800224a <HAL_DMA_IRQHandler+0x166>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <HAL_DMA_IRQHandler+0x1f4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_IRQHandler+0x162>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a35      	ldr	r2, [pc, #212]	; (80022dc <HAL_DMA_IRQHandler+0x1f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01a      	beq.n	8002240 <HAL_DMA_IRQHandler+0x15c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d012      	beq.n	800223a <HAL_DMA_IRQHandler+0x156>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <HAL_DMA_IRQHandler+0x200>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00a      	beq.n	8002234 <HAL_DMA_IRQHandler+0x150>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_DMA_IRQHandler+0x204>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d102      	bne.n	800222e <HAL_DMA_IRQHandler+0x14a>
 8002228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800222c:	e00e      	b.n	800224c <HAL_DMA_IRQHandler+0x168>
 800222e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002232:	e00b      	b.n	800224c <HAL_DMA_IRQHandler+0x168>
 8002234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002238:	e008      	b.n	800224c <HAL_DMA_IRQHandler+0x168>
 800223a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223e:	e005      	b.n	800224c <HAL_DMA_IRQHandler+0x168>
 8002240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002244:	e002      	b.n	800224c <HAL_DMA_IRQHandler+0x168>
 8002246:	2320      	movs	r3, #32
 8002248:	e000      	b.n	800224c <HAL_DMA_IRQHandler+0x168>
 800224a:	2302      	movs	r3, #2
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_DMA_IRQHandler+0x208>)
 800224e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d034      	beq.n	80022ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002268:	e02f      	b.n	80022ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2208      	movs	r2, #8
 8002270:	409a      	lsls	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d028      	beq.n	80022cc <HAL_DMA_IRQHandler+0x1e8>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d023      	beq.n	80022cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 020e 	bic.w	r2, r2, #14
 8002292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
    }
  }
  return;
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
}
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40020008 	.word	0x40020008
 80022d8:	4002001c 	.word	0x4002001c
 80022dc:	40020030 	.word	0x40020030
 80022e0:	40020044 	.word	0x40020044
 80022e4:	40020058 	.word	0x40020058
 80022e8:	4002006c 	.word	0x4002006c
 80022ec:	40020000 	.word	0x40020000

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08b      	sub	sp, #44	; 0x2c
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e169      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002304:	2201      	movs	r2, #1
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8158 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a9a      	ldr	r2, [pc, #616]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d05e      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800232c:	4a98      	ldr	r2, [pc, #608]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d875      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002332:	4a98      	ldr	r2, [pc, #608]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d058      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002338:	4a96      	ldr	r2, [pc, #600]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d86f      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800233e:	4a96      	ldr	r2, [pc, #600]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d052      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002344:	4a94      	ldr	r2, [pc, #592]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d869      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800234a:	4a94      	ldr	r2, [pc, #592]	; (800259c <HAL_GPIO_Init+0x2ac>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04c      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_GPIO_Init+0x2ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d863      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002356:	4a92      	ldr	r2, [pc, #584]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d046      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800235c:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d85d      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d82a      	bhi.n	80023bc <HAL_GPIO_Init+0xcc>
 8002366:	2b12      	cmp	r3, #18
 8002368:	d859      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_GPIO_Init+0x80>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023d7 	.word	0x080023d7
 800237c:	08002419 	.word	0x08002419
 8002380:	0800241f 	.word	0x0800241f
 8002384:	0800241f 	.word	0x0800241f
 8002388:	0800241f 	.word	0x0800241f
 800238c:	0800241f 	.word	0x0800241f
 8002390:	0800241f 	.word	0x0800241f
 8002394:	0800241f 	.word	0x0800241f
 8002398:	0800241f 	.word	0x0800241f
 800239c:	0800241f 	.word	0x0800241f
 80023a0:	0800241f 	.word	0x0800241f
 80023a4:	0800241f 	.word	0x0800241f
 80023a8:	0800241f 	.word	0x0800241f
 80023ac:	0800241f 	.word	0x0800241f
 80023b0:	0800241f 	.word	0x0800241f
 80023b4:	080023cd 	.word	0x080023cd
 80023b8:	080023e1 	.word	0x080023e1
 80023bc:	4a79      	ldr	r2, [pc, #484]	; (80025a4 <HAL_GPIO_Init+0x2b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023c2:	e02c      	b.n	800241e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e029      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	e024      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	3308      	adds	r3, #8
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e01f      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	330c      	adds	r3, #12
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e01a      	b.n	8002420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023f2:	2304      	movs	r3, #4
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e013      	b.n	8002420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	611a      	str	r2, [r3, #16]
          break;
 800240a:	e009      	b.n	8002420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800240c:	2308      	movs	r3, #8
 800240e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	615a      	str	r2, [r3, #20]
          break;
 8002416:	e003      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x130>
          break;
 800241e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d801      	bhi.n	800242a <HAL_GPIO_Init+0x13a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	e001      	b.n	800242e <HAL_GPIO_Init+0x13e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d802      	bhi.n	800243c <HAL_GPIO_Init+0x14c>
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x152>
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3b08      	subs	r3, #8
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	210f      	movs	r1, #15
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	401a      	ands	r2, r3
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80b1 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002488:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a40      	ldr	r2, [pc, #256]	; (80025b0 <HAL_GPIO_Init+0x2c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_GPIO_Init+0x1ec>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3f      	ldr	r2, [pc, #252]	; (80025b4 <HAL_GPIO_Init+0x2c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_GPIO_Init+0x1e8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <HAL_GPIO_Init+0x2c8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x1e4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3d      	ldr	r2, [pc, #244]	; (80025bc <HAL_GPIO_Init+0x2cc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_GPIO_Init+0x1e0>
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024dc:	2300      	movs	r3, #0
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ee:	492f      	ldr	r1, [pc, #188]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	492c      	ldr	r1, [pc, #176]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	43db      	mvns	r3, r3
 800251e:	4928      	ldr	r1, [pc, #160]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002520:	4013      	ands	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4922      	ldr	r1, [pc, #136]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	43db      	mvns	r3, r3
 8002546:	491e      	ldr	r1, [pc, #120]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002548:	4013      	ands	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4918      	ldr	r1, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	43db      	mvns	r3, r3
 800256e:	4914      	ldr	r1, [pc, #80]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002570:	4013      	ands	r3, r2
 8002572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d021      	beq.n	80025c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
 800258c:	e021      	b.n	80025d2 <HAL_GPIO_Init+0x2e2>
 800258e:	bf00      	nop
 8002590:	10320000 	.word	0x10320000
 8002594:	10310000 	.word	0x10310000
 8002598:	10220000 	.word	0x10220000
 800259c:	10210000 	.word	0x10210000
 80025a0:	10120000 	.word	0x10120000
 80025a4:	10110000 	.word	0x10110000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4909      	ldr	r1, [pc, #36]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f ae8e 	bne.w	8002304 <HAL_GPIO_Init+0x14>
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	372c      	adds	r7, #44	; 0x2c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	611a      	str	r2, [r3, #16]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e26c      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8087 	beq.w	8002756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002648:	4b92      	ldr	r3, [pc, #584]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b04      	cmp	r3, #4
 8002652:	d00c      	beq.n	800266e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002654:	4b8f      	ldr	r3, [pc, #572]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d112      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
 8002660:	4b8c      	ldr	r3, [pc, #560]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d10b      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	4b89      	ldr	r3, [pc, #548]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d06c      	beq.n	8002754 <HAL_RCC_OscConfig+0x12c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d168      	bne.n	8002754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e246      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x76>
 8002690:	4b80      	ldr	r3, [pc, #512]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a7f      	ldr	r2, [pc, #508]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e02e      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b78      	ldr	r3, [pc, #480]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a77      	ldr	r2, [pc, #476]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xbc>
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a71      	ldr	r2, [pc, #452]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026e4:	4b6b      	ldr	r3, [pc, #428]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a67      	ldr	r2, [pc, #412]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff fb06 	bl	8001d14 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7ff fb02 	bl	8001d14 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1fa      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xe4>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff faf2 	bl	8001d14 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff faee 	bl	8001d14 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1e6      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x10c>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800276e:	4b49      	ldr	r3, [pc, #292]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d11c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x18c>
 800277a:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x176>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e1ba      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4939      	ldr	r1, [pc, #228]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	e03a      	b.n	800282a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x270>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff faa7 	bl	8001d14 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff faa3 	bl	8001d14 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e19b      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4927      	ldr	r1, [pc, #156]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_RCC_OscConfig+0x270>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff fa86 	bl	8001d14 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7ff fa82 	bl	8001d14 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e17a      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03a      	beq.n	80028ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_RCC_OscConfig+0x274>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7ff fa66 	bl	8001d14 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7ff fa62 	bl	8001d14 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e15a      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f000 faa6 	bl	8002dbc <RCC_Delay>
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_OscConfig+0x274>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff fa4c 	bl	8001d14 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287e:	e00f      	b.n	80028a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff fa48 	bl	8001d14 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d908      	bls.n	80028a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e140      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	42420000 	.word	0x42420000
 800289c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	4b9e      	ldr	r3, [pc, #632]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e9      	bne.n	8002880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a6 	beq.w	8002a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b97      	ldr	r3, [pc, #604]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b94      	ldr	r3, [pc, #592]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a93      	ldr	r2, [pc, #588]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]
 80028d6:	4b91      	ldr	r3, [pc, #580]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b8e      	ldr	r3, [pc, #568]	; (8002b20 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b8b      	ldr	r3, [pc, #556]	; (8002b20 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a8a      	ldr	r2, [pc, #552]	; (8002b20 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7ff fa09 	bl	8001d14 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7ff fa05 	bl	8001d14 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	; 0x64
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0fd      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x312>
 800292c:	4b7b      	ldr	r3, [pc, #492]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	e02d      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x334>
 8002942:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a75      	ldr	r2, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	4b73      	ldr	r3, [pc, #460]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a72      	ldr	r2, [pc, #456]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	e01c      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x356>
 8002964:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a6c      	ldr	r2, [pc, #432]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a69      	ldr	r2, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	e00b      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a66      	ldr	r2, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d015      	beq.n	80029ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7ff f9b9 	bl	8001d14 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7ff f9b5 	bl	8001d14 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0ab      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ee      	beq.n	80029a6 <HAL_RCC_OscConfig+0x37e>
 80029c8:	e014      	b.n	80029f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7ff f9a3 	bl	8001d14 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7ff f99f 	bl	8001d14 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e095      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b48      	ldr	r3, [pc, #288]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8081 	beq.w	8002b12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a10:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d061      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d146      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0x4fc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff f973 	bl	8001d14 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7ff f96f 	bl	8001d14 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e067      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a5a:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	492d      	ldr	r1, [pc, #180]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a19      	ldr	r1, [r3, #32]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	4927      	ldr	r1, [pc, #156]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_RCC_OscConfig+0x4fc>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7ff f943 	bl	8001d14 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a92:	f7ff f93f 	bl	8001d14 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e037      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x46a>
 8002ab0:	e02f      	b.n	8002b12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_RCC_OscConfig+0x4fc>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7ff f92c 	bl	8001d14 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7ff f928 	bl	8001d14 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e020      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x498>
 8002ade:	e018      	b.n	8002b12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e013      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42420060 	.word	0x42420060

08002b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0d0      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	4965      	ldr	r1, [pc, #404]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ba6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	494d      	ldr	r1, [pc, #308]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d040      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d115      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be6:	4b41      	ldr	r3, [pc, #260]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e073      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06b      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4936      	ldr	r1, [pc, #216]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c18:	f7ff f87c 	bl	8001d14 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7ff f878 	bl	8001d14 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e053      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 020c 	and.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1eb      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d210      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4922      	ldr	r1, [pc, #136]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e032      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4916      	ldr	r1, [pc, #88]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb6:	f000 f821 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	490a      	ldr	r1, [pc, #40]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	5ccb      	ldrb	r3, [r1, r3]
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe ffda 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	080077a8 	.word	0x080077a8
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	b490      	push	{r4, r7}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d04:	1d3c      	adds	r4, r7, #4
 8002d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d0c:	f240 2301 	movw	r3, #513	; 0x201
 8002d10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d002      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x40>
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x46>
 8002d3a:	e02d      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3e:	623b      	str	r3, [r7, #32]
      break;
 8002d40:	e02d      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	0c9b      	lsrs	r3, r3, #18
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d4e:	4413      	add	r3, r2
 8002d50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c5b      	lsrs	r3, r3, #17
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d6e:	4413      	add	r3, r2
 8002d70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7a:	fb02 f203 	mul.w	r2, r2, r3
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	e004      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	623b      	str	r3, [r7, #32]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d9a:	623b      	str	r3, [r7, #32]
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc90      	pop	{r4, r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	08007798 	.word	0x08007798
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	003d0900 	.word	0x003d0900

08002dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <RCC_Delay+0x34>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <RCC_Delay+0x38>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0a5b      	lsrs	r3, r3, #9
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dd8:	bf00      	nop
  }
  while (Delay --);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1e5a      	subs	r2, r3, #1
 8002dde:	60fa      	str	r2, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f9      	bne.n	8002dd8 <RCC_Delay+0x1c>
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	20000000 	.word	0x20000000
 8002df4:	10624dd3 	.word	0x10624dd3

08002df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e041      	b.n	8002e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe fd92 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3304      	adds	r3, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f000 fe68 	bl	8003b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d001      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e03a      	b.n	8002f26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_TIM_Base_Start_IT+0x98>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x58>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x58>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x58>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <HAL_TIM_Base_Start_IT+0xa0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d010      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	e007      	b.n	8002f24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800

08002f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e041      	b.n	8002fd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f839 	bl	8002fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 fdc6 	bl	8003b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d855      	bhi.n	80030a8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003039 	.word	0x08003039
 8003008:	080030a9 	.word	0x080030a9
 800300c:	080030a9 	.word	0x080030a9
 8003010:	080030a9 	.word	0x080030a9
 8003014:	08003055 	.word	0x08003055
 8003018:	080030a9 	.word	0x080030a9
 800301c:	080030a9 	.word	0x080030a9
 8003020:	080030a9 	.word	0x080030a9
 8003024:	08003071 	.word	0x08003071
 8003028:	080030a9 	.word	0x080030a9
 800302c:	080030a9 	.word	0x080030a9
 8003030:	080030a9 	.word	0x080030a9
 8003034:	0800308d 	.word	0x0800308d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003046:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe ffd3 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 8003052:	e02a      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe ffc5 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 800306e:	e01c      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe ffb7 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 800308a:	e00e      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800309a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe ffa9 	bl	8001ff8 <HAL_DMA_Abort_IT>
      break;
 80030a6:	e000      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80030a8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f8b7 	bl	8004226 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a29      	ldr	r2, [pc, #164]	; (8003164 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d117      	bne.n	80030f2 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	f240 4344 	movw	r3, #1092	; 0x444
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10f      	bne.n	8003122 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	f240 4344 	movw	r3, #1092	; 0x444
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Stop_DMA+0x146>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003130:	e013      	b.n	800315a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Stop_DMA+0x156>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003140:	e00b      	b.n	800315a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Stop_DMA+0x166>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003150:	e003      	b.n	800315a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40012c00 	.word	0x40012c00

08003168 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e041      	b.n	80031fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f839 	bl	8003206 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f000 fcb0 	bl	8003b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0x1a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e013      	b.n	800325a <HAL_TIM_IC_Start_IT+0x42>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0x2a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e00b      	b.n	800325a <HAL_TIM_IC_Start_IT+0x42>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d104      	bne.n	8003252 <HAL_TIM_IC_Start_IT+0x3a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e003      	b.n	800325a <HAL_TIM_IC_Start_IT+0x42>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <HAL_TIM_IC_Start_IT+0x54>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e013      	b.n	8003294 <HAL_TIM_IC_Start_IT+0x7c>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d104      	bne.n	800327c <HAL_TIM_IC_Start_IT+0x64>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e00b      	b.n	8003294 <HAL_TIM_IC_Start_IT+0x7c>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d104      	bne.n	800328c <HAL_TIM_IC_Start_IT+0x74>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e003      	b.n	8003294 <HAL_TIM_IC_Start_IT+0x7c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003292:	b2db      	uxtb	r3, r3
 8003294:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800329c:	7bbb      	ldrb	r3, [r7, #14]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0b3      	b.n	800340e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_Start_IT+0x9e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	e013      	b.n	80032de <HAL_TIM_IC_Start_IT+0xc6>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_IC_Start_IT+0xae>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	e00b      	b.n	80032de <HAL_TIM_IC_Start_IT+0xc6>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0xbe>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	e003      	b.n	80032de <HAL_TIM_IC_Start_IT+0xc6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_IC_Start_IT+0xd6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ec:	e013      	b.n	8003316 <HAL_TIM_IC_Start_IT+0xfe>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0xe6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_IC_Start_IT+0xfe>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_IT+0xf6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	e003      	b.n	8003316 <HAL_TIM_IC_Start_IT+0xfe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	d841      	bhi.n	80033a0 <HAL_TIM_IC_Start_IT+0x188>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_IC_Start_IT+0x10c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003359 	.word	0x08003359
 8003328:	080033a1 	.word	0x080033a1
 800332c:	080033a1 	.word	0x080033a1
 8003330:	080033a1 	.word	0x080033a1
 8003334:	0800336b 	.word	0x0800336b
 8003338:	080033a1 	.word	0x080033a1
 800333c:	080033a1 	.word	0x080033a1
 8003340:	080033a1 	.word	0x080033a1
 8003344:	0800337d 	.word	0x0800337d
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033a1 	.word	0x080033a1
 8003350:	080033a1 	.word	0x080033a1
 8003354:	0800338f 	.word	0x0800338f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0202 	orr.w	r2, r2, #2
 8003366:	60da      	str	r2, [r3, #12]
      break;
 8003368:	e01b      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0204 	orr.w	r2, r2, #4
 8003378:	60da      	str	r2, [r3, #12]
      break;
 800337a:	e012      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	60da      	str	r2, [r3, #12]
      break;
 800338c:	e009      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0210 	orr.w	r2, r2, #16
 800339c:	60da      	str	r2, [r3, #12]
      break;
 800339e:	e000      	b.n	80033a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80033a0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2201      	movs	r2, #1
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 ff3b 	bl	8004226 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_TIM_IC_Start_IT+0x200>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_TIM_IC_Start_IT+0x204>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a13      	ldr	r2, [pc, #76]	; (8003420 <HAL_TIM_IC_Start_IT+0x208>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d010      	beq.n	800340c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	e007      	b.n	800340c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0202 	mvn.w	r2, #2
 8003450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fed6 	bl	8001218 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fb3a 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd ff65 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0204 	mvn.w	r2, #4
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd feac 	bl	8001218 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fb10 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fd ff3b 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0208 	mvn.w	r2, #8
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fe82 	bl	8001218 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fae6 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fd ff11 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b10      	cmp	r3, #16
 8003534:	d122      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d11b      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0210 	mvn.w	r2, #16
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2208      	movs	r2, #8
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fe58 	bl	8001218 <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fabc 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd fee7 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0201 	mvn.w	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fd1e 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 feb5 	bl	800433e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa7d 	bl	8003afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d10e      	bne.n	800362c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d107      	bne.n	800362c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0220 	mvn.w	r2, #32
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fe80 	bl	800432c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_TIM_IC_ConfigChannel+0x1a>
 800364a:	2302      	movs	r3, #2
 800364c:	e082      	b.n	8003754 <HAL_TIM_IC_ConfigChannel+0x120>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f000 fc38 	bl	8003ee0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 020c 	bic.w	r2, r2, #12
 800367e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6999      	ldr	r1, [r3, #24]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	619a      	str	r2, [r3, #24]
 8003692:	e05a      	b.n	800374a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b04      	cmp	r3, #4
 8003698:	d11c      	bne.n	80036d4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f000 fca1 	bl	8003ff0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6999      	ldr	r1, [r3, #24]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	021a      	lsls	r2, r3, #8
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	619a      	str	r2, [r3, #24]
 80036d2:	e03a      	b.n	800374a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d11b      	bne.n	8003712 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f000 fcec 	bl	80040c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 020c 	bic.w	r2, r2, #12
 80036fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69d9      	ldr	r1, [r3, #28]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	61da      	str	r2, [r3, #28]
 8003710:	e01b      	b.n	800374a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f000 fd0b 	bl	800413c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003734:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69d9      	ldr	r1, [r3, #28]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	021a      	lsls	r2, r3, #8
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003772:	2302      	movs	r3, #2
 8003774:	e0ac      	b.n	80038d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	f200 809f 	bhi.w	80038c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003786:	a201      	add	r2, pc, #4	; (adr r2, 800378c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080038c5 	.word	0x080038c5
 8003794:	080038c5 	.word	0x080038c5
 8003798:	080038c5 	.word	0x080038c5
 800379c:	08003801 	.word	0x08003801
 80037a0:	080038c5 	.word	0x080038c5
 80037a4:	080038c5 	.word	0x080038c5
 80037a8:	080038c5 	.word	0x080038c5
 80037ac:	08003843 	.word	0x08003843
 80037b0:	080038c5 	.word	0x080038c5
 80037b4:	080038c5 	.word	0x080038c5
 80037b8:	080038c5 	.word	0x080038c5
 80037bc:	08003883 	.word	0x08003883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa02 	bl	8003bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0208 	orr.w	r2, r2, #8
 80037da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6999      	ldr	r1, [r3, #24]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	619a      	str	r2, [r3, #24]
      break;
 80037fe:	e062      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fa48 	bl	8003c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6999      	ldr	r1, [r3, #24]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	021a      	lsls	r2, r3, #8
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	619a      	str	r2, [r3, #24]
      break;
 8003840:	e041      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fa91 	bl	8003d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0208 	orr.w	r2, r2, #8
 800385c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0204 	bic.w	r2, r2, #4
 800386c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69d9      	ldr	r1, [r3, #28]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	61da      	str	r2, [r3, #28]
      break;
 8003880:	e021      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fadb 	bl	8003e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69d9      	ldr	r1, [r3, #28]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	61da      	str	r2, [r3, #28]
      break;
 80038c2:	e000      	b.n	80038c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80038c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIM_ConfigClockSource+0x18>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e0b3      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x180>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800390e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003916:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003928:	d03e      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0xd0>
 800392a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392e:	f200 8087 	bhi.w	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003936:	f000 8085 	beq.w	8003a44 <HAL_TIM_ConfigClockSource+0x16c>
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d87f      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003940:	2b70      	cmp	r3, #112	; 0x70
 8003942:	d01a      	beq.n	800397a <HAL_TIM_ConfigClockSource+0xa2>
 8003944:	2b70      	cmp	r3, #112	; 0x70
 8003946:	d87b      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003948:	2b60      	cmp	r3, #96	; 0x60
 800394a:	d050      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x116>
 800394c:	2b60      	cmp	r3, #96	; 0x60
 800394e:	d877      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003950:	2b50      	cmp	r3, #80	; 0x50
 8003952:	d03c      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0xf6>
 8003954:	2b50      	cmp	r3, #80	; 0x50
 8003956:	d873      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d058      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x136>
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d86f      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003960:	2b30      	cmp	r3, #48	; 0x30
 8003962:	d064      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x156>
 8003964:	2b30      	cmp	r3, #48	; 0x30
 8003966:	d86b      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003968:	2b20      	cmp	r3, #32
 800396a:	d060      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x156>
 800396c:	2b20      	cmp	r3, #32
 800396e:	d867      	bhi.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d05c      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x156>
 8003974:	2b10      	cmp	r3, #16
 8003976:	d05a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003978:	e062      	b.n	8003a40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f000 fc2d 	bl	80041e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800399c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	609a      	str	r2, [r3, #8]
      break;
 80039a6:	e04e      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f000 fc16 	bl	80041e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ca:	609a      	str	r2, [r3, #8]
      break;
 80039cc:	e03b      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	461a      	mov	r2, r3
 80039dc:	f000 fada 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2150      	movs	r1, #80	; 0x50
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fbe4 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 80039ec:	e02b      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f000 fb34 	bl	8004068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2160      	movs	r1, #96	; 0x60
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fbd4 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 8003a0c:	e01b      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f000 faba 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2140      	movs	r1, #64	; 0x40
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fbc4 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 8003a2c:	e00b      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 fbbb 	bl	80041b4 <TIM_ITRx_SetConfig>
        break;
 8003a3e:	e002      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d831      	bhi.n	8003ad8 <HAL_TIM_ReadCapturedValue+0x78>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003ad9 	.word	0x08003ad9
 8003a84:	08003ad9 	.word	0x08003ad9
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003abb 	.word	0x08003abb
 8003a90:	08003ad9 	.word	0x08003ad9
 8003a94:	08003ad9 	.word	0x08003ad9
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003ad9 	.word	0x08003ad9
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003ad9 	.word	0x08003ad9
 8003aac:	08003acf 	.word	0x08003acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	60fb      	str	r3, [r7, #12]

      break;
 8003ab8:	e00f      	b.n	8003ada <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	60fb      	str	r3, [r7, #12]

      break;
 8003ac2:	e00a      	b.n	8003ada <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	60fb      	str	r3, [r7, #12]

      break;
 8003acc:	e005      	b.n	8003ada <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	60fb      	str	r3, [r7, #12]

      break;
 8003ad6:	e000      	b.n	8003ada <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ad8:	bf00      	nop
  }

  return tmpreg;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop

08003ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <TIM_Base_SetConfig+0xb8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_Base_SetConfig+0x30>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0x30>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a26      	ldr	r2, [pc, #152]	; (8003bc8 <TIM_Base_SetConfig+0xbc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x30>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <TIM_Base_SetConfig+0xc0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <TIM_Base_SetConfig+0xb8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00b      	beq.n	8003b6e <TIM_Base_SetConfig+0x62>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d007      	beq.n	8003b6e <TIM_Base_SetConfig+0x62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <TIM_Base_SetConfig+0xbc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <TIM_Base_SetConfig+0x62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <TIM_Base_SetConfig+0xc0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <TIM_Base_SetConfig+0xb8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	615a      	str	r2, [r3, #20]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800

08003bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f023 0201 	bic.w	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 0302 	bic.w	r3, r3, #2
 8003c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <TIM_OC1_SetConfig+0xc8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10c      	bne.n	8003c46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0308 	bic.w	r3, r3, #8
 8003c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <TIM_OC1_SetConfig+0xc8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d111      	bne.n	8003c72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	621a      	str	r2, [r3, #32]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40012c00 	.word	0x40012c00

08003c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0210 	bic.w	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0320 	bic.w	r3, r3, #32
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <TIM_OC2_SetConfig+0xd0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10d      	bne.n	8003d18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <TIM_OC2_SetConfig+0xd0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d113      	bne.n	8003d48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	40012c00 	.word	0x40012c00

08003d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <TIM_OC3_SetConfig+0xd0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10d      	bne.n	8003dea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <TIM_OC3_SetConfig+0xd0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	621a      	str	r2, [r3, #32]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00

08003e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <TIM_OC4_SetConfig+0x98>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d109      	bne.n	8003eb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	621a      	str	r2, [r3, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00

08003ee0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f023 0201 	bic.w	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <TIM_TI1_SetConfig+0xa8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_TI1_SetConfig+0x46>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d007      	beq.n	8003f26 <TIM_TI1_SetConfig+0x46>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <TIM_TI1_SetConfig+0xac>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_TI1_SetConfig+0x46>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <TIM_TI1_SetConfig+0xb0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <TIM_TI1_SetConfig+0x4a>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <TIM_TI1_SetConfig+0x4c>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e003      	b.n	8003f4a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f023 030a 	bic.w	r3, r3, #10
 8003f64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 030a 	and.w	r3, r3, #10
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800

08003f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 030a 	bic.w	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	b29b      	uxth	r3, r3
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004042:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f023 0210 	bic.w	r2, r3, #16
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	031b      	lsls	r3, r3, #12
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b087      	sub	sp, #28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004102:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	b2db      	uxtb	r3, r3
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004116:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	031b      	lsls	r3, r3, #12
 8004180:	b29b      	uxth	r3, r3
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	031b      	lsls	r3, r3, #12
 8004194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f043 0307 	orr.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	431a      	orrs	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2201      	movs	r2, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	43db      	mvns	r3, r3
 8004248:	401a      	ands	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	431a      	orrs	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
	...

08004270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004284:	2302      	movs	r3, #2
 8004286:	e046      	b.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d4:	d009      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10c      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800

0800432c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <__errno>:
 8004350:	4b01      	ldr	r3, [pc, #4]	; (8004358 <__errno+0x8>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	2000000c 	.word	0x2000000c

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	2600      	movs	r6, #0
 8004360:	4d0c      	ldr	r5, [pc, #48]	; (8004394 <__libc_init_array+0x38>)
 8004362:	4c0d      	ldr	r4, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004364:	1b64      	subs	r4, r4, r5
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	42a6      	cmp	r6, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	f003 f9ec 	bl	8007748 <_init>
 8004370:	2600      	movs	r6, #0
 8004372:	4d0a      	ldr	r5, [pc, #40]	; (800439c <__libc_init_array+0x40>)
 8004374:	4c0a      	ldr	r4, [pc, #40]	; (80043a0 <__libc_init_array+0x44>)
 8004376:	1b64      	subs	r4, r4, r5
 8004378:	10a4      	asrs	r4, r4, #2
 800437a:	42a6      	cmp	r6, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	f855 3b04 	ldr.w	r3, [r5], #4
 8004384:	4798      	blx	r3
 8004386:	3601      	adds	r6, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	f855 3b04 	ldr.w	r3, [r5], #4
 800438e:	4798      	blx	r3
 8004390:	3601      	adds	r6, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	08007bb8 	.word	0x08007bb8
 8004398:	08007bb8 	.word	0x08007bb8
 800439c:	08007bb8 	.word	0x08007bb8
 80043a0:	08007bbc 	.word	0x08007bbc

080043a4 <memset>:
 80043a4:	4603      	mov	r3, r0
 80043a6:	4402      	add	r2, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <__cvt>:
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ba:	461f      	mov	r7, r3
 80043bc:	bfbb      	ittet	lt
 80043be:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043c2:	461f      	movlt	r7, r3
 80043c4:	2300      	movge	r3, #0
 80043c6:	232d      	movlt	r3, #45	; 0x2d
 80043c8:	b088      	sub	sp, #32
 80043ca:	4614      	mov	r4, r2
 80043cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043d0:	7013      	strb	r3, [r2, #0]
 80043d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80043d8:	f023 0820 	bic.w	r8, r3, #32
 80043dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043e0:	d005      	beq.n	80043ee <__cvt+0x3a>
 80043e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043e6:	d100      	bne.n	80043ea <__cvt+0x36>
 80043e8:	3501      	adds	r5, #1
 80043ea:	2302      	movs	r3, #2
 80043ec:	e000      	b.n	80043f0 <__cvt+0x3c>
 80043ee:	2303      	movs	r3, #3
 80043f0:	aa07      	add	r2, sp, #28
 80043f2:	9204      	str	r2, [sp, #16]
 80043f4:	aa06      	add	r2, sp, #24
 80043f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80043fa:	e9cd 3500 	strd	r3, r5, [sp]
 80043fe:	4622      	mov	r2, r4
 8004400:	463b      	mov	r3, r7
 8004402:	f000 ff9d 	bl	8005340 <_dtoa_r>
 8004406:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800440a:	4606      	mov	r6, r0
 800440c:	d102      	bne.n	8004414 <__cvt+0x60>
 800440e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004410:	07db      	lsls	r3, r3, #31
 8004412:	d522      	bpl.n	800445a <__cvt+0xa6>
 8004414:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004418:	eb06 0905 	add.w	r9, r6, r5
 800441c:	d110      	bne.n	8004440 <__cvt+0x8c>
 800441e:	7833      	ldrb	r3, [r6, #0]
 8004420:	2b30      	cmp	r3, #48	; 0x30
 8004422:	d10a      	bne.n	800443a <__cvt+0x86>
 8004424:	2200      	movs	r2, #0
 8004426:	2300      	movs	r3, #0
 8004428:	4620      	mov	r0, r4
 800442a:	4639      	mov	r1, r7
 800442c:	f7fc fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8004430:	b918      	cbnz	r0, 800443a <__cvt+0x86>
 8004432:	f1c5 0501 	rsb	r5, r5, #1
 8004436:	f8ca 5000 	str.w	r5, [sl]
 800443a:	f8da 3000 	ldr.w	r3, [sl]
 800443e:	4499      	add	r9, r3
 8004440:	2200      	movs	r2, #0
 8004442:	2300      	movs	r3, #0
 8004444:	4620      	mov	r0, r4
 8004446:	4639      	mov	r1, r7
 8004448:	f7fc faae 	bl	80009a8 <__aeabi_dcmpeq>
 800444c:	b108      	cbz	r0, 8004452 <__cvt+0x9e>
 800444e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004452:	2230      	movs	r2, #48	; 0x30
 8004454:	9b07      	ldr	r3, [sp, #28]
 8004456:	454b      	cmp	r3, r9
 8004458:	d307      	bcc.n	800446a <__cvt+0xb6>
 800445a:	4630      	mov	r0, r6
 800445c:	9b07      	ldr	r3, [sp, #28]
 800445e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004460:	1b9b      	subs	r3, r3, r6
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	b008      	add	sp, #32
 8004466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	9107      	str	r1, [sp, #28]
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e7f0      	b.n	8004454 <__cvt+0xa0>

08004472 <__exponent>:
 8004472:	4603      	mov	r3, r0
 8004474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004476:	2900      	cmp	r1, #0
 8004478:	f803 2b02 	strb.w	r2, [r3], #2
 800447c:	bfb6      	itet	lt
 800447e:	222d      	movlt	r2, #45	; 0x2d
 8004480:	222b      	movge	r2, #43	; 0x2b
 8004482:	4249      	neglt	r1, r1
 8004484:	2909      	cmp	r1, #9
 8004486:	7042      	strb	r2, [r0, #1]
 8004488:	dd2b      	ble.n	80044e2 <__exponent+0x70>
 800448a:	f10d 0407 	add.w	r4, sp, #7
 800448e:	46a4      	mov	ip, r4
 8004490:	270a      	movs	r7, #10
 8004492:	fb91 f6f7 	sdiv	r6, r1, r7
 8004496:	460a      	mov	r2, r1
 8004498:	46a6      	mov	lr, r4
 800449a:	fb07 1516 	mls	r5, r7, r6, r1
 800449e:	2a63      	cmp	r2, #99	; 0x63
 80044a0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044a4:	4631      	mov	r1, r6
 80044a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80044aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044ae:	dcf0      	bgt.n	8004492 <__exponent+0x20>
 80044b0:	3130      	adds	r1, #48	; 0x30
 80044b2:	f1ae 0502 	sub.w	r5, lr, #2
 80044b6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044ba:	4629      	mov	r1, r5
 80044bc:	1c44      	adds	r4, r0, #1
 80044be:	4561      	cmp	r1, ip
 80044c0:	d30a      	bcc.n	80044d8 <__exponent+0x66>
 80044c2:	f10d 0209 	add.w	r2, sp, #9
 80044c6:	eba2 020e 	sub.w	r2, r2, lr
 80044ca:	4565      	cmp	r5, ip
 80044cc:	bf88      	it	hi
 80044ce:	2200      	movhi	r2, #0
 80044d0:	4413      	add	r3, r2
 80044d2:	1a18      	subs	r0, r3, r0
 80044d4:	b003      	add	sp, #12
 80044d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044dc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80044e0:	e7ed      	b.n	80044be <__exponent+0x4c>
 80044e2:	2330      	movs	r3, #48	; 0x30
 80044e4:	3130      	adds	r1, #48	; 0x30
 80044e6:	7083      	strb	r3, [r0, #2]
 80044e8:	70c1      	strb	r1, [r0, #3]
 80044ea:	1d03      	adds	r3, r0, #4
 80044ec:	e7f1      	b.n	80044d2 <__exponent+0x60>
	...

080044f0 <_printf_float>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	b091      	sub	sp, #68	; 0x44
 80044f6:	460c      	mov	r4, r1
 80044f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80044fc:	4616      	mov	r6, r2
 80044fe:	461f      	mov	r7, r3
 8004500:	4605      	mov	r5, r0
 8004502:	f001 fec3 	bl	800628c <_localeconv_r>
 8004506:	6803      	ldr	r3, [r0, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	9309      	str	r3, [sp, #36]	; 0x24
 800450c:	f7fb fe20 	bl	8000150 <strlen>
 8004510:	2300      	movs	r3, #0
 8004512:	930e      	str	r3, [sp, #56]	; 0x38
 8004514:	f8d8 3000 	ldr.w	r3, [r8]
 8004518:	900a      	str	r0, [sp, #40]	; 0x28
 800451a:	3307      	adds	r3, #7
 800451c:	f023 0307 	bic.w	r3, r3, #7
 8004520:	f103 0208 	add.w	r2, r3, #8
 8004524:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004528:	f8d4 b000 	ldr.w	fp, [r4]
 800452c:	f8c8 2000 	str.w	r2, [r8]
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004538:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800453c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004540:	930b      	str	r3, [sp, #44]	; 0x2c
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	4640      	mov	r0, r8
 8004548:	4b9c      	ldr	r3, [pc, #624]	; (80047bc <_printf_float+0x2cc>)
 800454a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800454c:	f7fc fa5e 	bl	8000a0c <__aeabi_dcmpun>
 8004550:	bb70      	cbnz	r0, 80045b0 <_printf_float+0xc0>
 8004552:	f04f 32ff 	mov.w	r2, #4294967295
 8004556:	4640      	mov	r0, r8
 8004558:	4b98      	ldr	r3, [pc, #608]	; (80047bc <_printf_float+0x2cc>)
 800455a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800455c:	f7fc fa38 	bl	80009d0 <__aeabi_dcmple>
 8004560:	bb30      	cbnz	r0, 80045b0 <_printf_float+0xc0>
 8004562:	2200      	movs	r2, #0
 8004564:	2300      	movs	r3, #0
 8004566:	4640      	mov	r0, r8
 8004568:	4651      	mov	r1, sl
 800456a:	f7fc fa27 	bl	80009bc <__aeabi_dcmplt>
 800456e:	b110      	cbz	r0, 8004576 <_printf_float+0x86>
 8004570:	232d      	movs	r3, #45	; 0x2d
 8004572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004576:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <_printf_float+0x2d0>)
 8004578:	4892      	ldr	r0, [pc, #584]	; (80047c4 <_printf_float+0x2d4>)
 800457a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800457e:	bf94      	ite	ls
 8004580:	4698      	movls	r8, r3
 8004582:	4680      	movhi	r8, r0
 8004584:	2303      	movs	r3, #3
 8004586:	f04f 0a00 	mov.w	sl, #0
 800458a:	6123      	str	r3, [r4, #16]
 800458c:	f02b 0304 	bic.w	r3, fp, #4
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	4633      	mov	r3, r6
 8004594:	4621      	mov	r1, r4
 8004596:	4628      	mov	r0, r5
 8004598:	9700      	str	r7, [sp, #0]
 800459a:	aa0f      	add	r2, sp, #60	; 0x3c
 800459c:	f000 f9d4 	bl	8004948 <_printf_common>
 80045a0:	3001      	adds	r0, #1
 80045a2:	f040 8090 	bne.w	80046c6 <_printf_float+0x1d6>
 80045a6:	f04f 30ff 	mov.w	r0, #4294967295
 80045aa:	b011      	add	sp, #68	; 0x44
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b0:	4642      	mov	r2, r8
 80045b2:	4653      	mov	r3, sl
 80045b4:	4640      	mov	r0, r8
 80045b6:	4651      	mov	r1, sl
 80045b8:	f7fc fa28 	bl	8000a0c <__aeabi_dcmpun>
 80045bc:	b148      	cbz	r0, 80045d2 <_printf_float+0xe2>
 80045be:	f1ba 0f00 	cmp.w	sl, #0
 80045c2:	bfb8      	it	lt
 80045c4:	232d      	movlt	r3, #45	; 0x2d
 80045c6:	4880      	ldr	r0, [pc, #512]	; (80047c8 <_printf_float+0x2d8>)
 80045c8:	bfb8      	it	lt
 80045ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045ce:	4b7f      	ldr	r3, [pc, #508]	; (80047cc <_printf_float+0x2dc>)
 80045d0:	e7d3      	b.n	800457a <_printf_float+0x8a>
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	d142      	bne.n	8004662 <_printf_float+0x172>
 80045dc:	2306      	movs	r3, #6
 80045de:	6063      	str	r3, [r4, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	9206      	str	r2, [sp, #24]
 80045e4:	aa0e      	add	r2, sp, #56	; 0x38
 80045e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80045ea:	aa0d      	add	r2, sp, #52	; 0x34
 80045ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80045f0:	9203      	str	r2, [sp, #12]
 80045f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80045f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	4642      	mov	r2, r8
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4628      	mov	r0, r5
 8004604:	4653      	mov	r3, sl
 8004606:	910b      	str	r1, [sp, #44]	; 0x2c
 8004608:	f7ff fed4 	bl	80043b4 <__cvt>
 800460c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800460e:	4680      	mov	r8, r0
 8004610:	2947      	cmp	r1, #71	; 0x47
 8004612:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004614:	d108      	bne.n	8004628 <_printf_float+0x138>
 8004616:	1cc8      	adds	r0, r1, #3
 8004618:	db02      	blt.n	8004620 <_printf_float+0x130>
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	4299      	cmp	r1, r3
 800461e:	dd40      	ble.n	80046a2 <_printf_float+0x1b2>
 8004620:	f1a9 0902 	sub.w	r9, r9, #2
 8004624:	fa5f f989 	uxtb.w	r9, r9
 8004628:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800462c:	d81f      	bhi.n	800466e <_printf_float+0x17e>
 800462e:	464a      	mov	r2, r9
 8004630:	3901      	subs	r1, #1
 8004632:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004636:	910d      	str	r1, [sp, #52]	; 0x34
 8004638:	f7ff ff1b 	bl	8004472 <__exponent>
 800463c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800463e:	4682      	mov	sl, r0
 8004640:	1813      	adds	r3, r2, r0
 8004642:	2a01      	cmp	r2, #1
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	dc02      	bgt.n	800464e <_printf_float+0x15e>
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	07d2      	lsls	r2, r2, #31
 800464c:	d501      	bpl.n	8004652 <_printf_float+0x162>
 800464e:	3301      	adds	r3, #1
 8004650:	6123      	str	r3, [r4, #16]
 8004652:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004656:	2b00      	cmp	r3, #0
 8004658:	d09b      	beq.n	8004592 <_printf_float+0xa2>
 800465a:	232d      	movs	r3, #45	; 0x2d
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004660:	e797      	b.n	8004592 <_printf_float+0xa2>
 8004662:	2947      	cmp	r1, #71	; 0x47
 8004664:	d1bc      	bne.n	80045e0 <_printf_float+0xf0>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ba      	bne.n	80045e0 <_printf_float+0xf0>
 800466a:	2301      	movs	r3, #1
 800466c:	e7b7      	b.n	80045de <_printf_float+0xee>
 800466e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004672:	d118      	bne.n	80046a6 <_printf_float+0x1b6>
 8004674:	2900      	cmp	r1, #0
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	dd0b      	ble.n	8004692 <_printf_float+0x1a2>
 800467a:	6121      	str	r1, [r4, #16]
 800467c:	b913      	cbnz	r3, 8004684 <_printf_float+0x194>
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	07d0      	lsls	r0, r2, #31
 8004682:	d502      	bpl.n	800468a <_printf_float+0x19a>
 8004684:	3301      	adds	r3, #1
 8004686:	440b      	add	r3, r1
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	f04f 0a00 	mov.w	sl, #0
 800468e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004690:	e7df      	b.n	8004652 <_printf_float+0x162>
 8004692:	b913      	cbnz	r3, 800469a <_printf_float+0x1aa>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	07d2      	lsls	r2, r2, #31
 8004698:	d501      	bpl.n	800469e <_printf_float+0x1ae>
 800469a:	3302      	adds	r3, #2
 800469c:	e7f4      	b.n	8004688 <_printf_float+0x198>
 800469e:	2301      	movs	r3, #1
 80046a0:	e7f2      	b.n	8004688 <_printf_float+0x198>
 80046a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046a8:	4299      	cmp	r1, r3
 80046aa:	db05      	blt.n	80046b8 <_printf_float+0x1c8>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	6121      	str	r1, [r4, #16]
 80046b0:	07d8      	lsls	r0, r3, #31
 80046b2:	d5ea      	bpl.n	800468a <_printf_float+0x19a>
 80046b4:	1c4b      	adds	r3, r1, #1
 80046b6:	e7e7      	b.n	8004688 <_printf_float+0x198>
 80046b8:	2900      	cmp	r1, #0
 80046ba:	bfcc      	ite	gt
 80046bc:	2201      	movgt	r2, #1
 80046be:	f1c1 0202 	rsble	r2, r1, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	e7e0      	b.n	8004688 <_printf_float+0x198>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	055a      	lsls	r2, r3, #21
 80046ca:	d407      	bmi.n	80046dc <_printf_float+0x1ec>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	4642      	mov	r2, r8
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	d12b      	bne.n	8004732 <_printf_float+0x242>
 80046da:	e764      	b.n	80045a6 <_printf_float+0xb6>
 80046dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046e0:	f240 80dd 	bls.w	800489e <_printf_float+0x3ae>
 80046e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046e8:	2200      	movs	r2, #0
 80046ea:	2300      	movs	r3, #0
 80046ec:	f7fc f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d033      	beq.n	800475c <_printf_float+0x26c>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	4a35      	ldr	r2, [pc, #212]	; (80047d0 <_printf_float+0x2e0>)
 80046fc:	47b8      	blx	r7
 80046fe:	3001      	adds	r0, #1
 8004700:	f43f af51 	beq.w	80045a6 <_printf_float+0xb6>
 8004704:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004708:	429a      	cmp	r2, r3
 800470a:	db02      	blt.n	8004712 <_printf_float+0x222>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	07d8      	lsls	r0, r3, #31
 8004710:	d50f      	bpl.n	8004732 <_printf_float+0x242>
 8004712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	47b8      	blx	r7
 800471c:	3001      	adds	r0, #1
 800471e:	f43f af42 	beq.w	80045a6 <_printf_float+0xb6>
 8004722:	f04f 0800 	mov.w	r8, #0
 8004726:	f104 091a 	add.w	r9, r4, #26
 800472a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800472c:	3b01      	subs	r3, #1
 800472e:	4543      	cmp	r3, r8
 8004730:	dc09      	bgt.n	8004746 <_printf_float+0x256>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	079b      	lsls	r3, r3, #30
 8004736:	f100 8102 	bmi.w	800493e <_printf_float+0x44e>
 800473a:	68e0      	ldr	r0, [r4, #12]
 800473c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800473e:	4298      	cmp	r0, r3
 8004740:	bfb8      	it	lt
 8004742:	4618      	movlt	r0, r3
 8004744:	e731      	b.n	80045aa <_printf_float+0xba>
 8004746:	2301      	movs	r3, #1
 8004748:	464a      	mov	r2, r9
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	47b8      	blx	r7
 8004750:	3001      	adds	r0, #1
 8004752:	f43f af28 	beq.w	80045a6 <_printf_float+0xb6>
 8004756:	f108 0801 	add.w	r8, r8, #1
 800475a:	e7e6      	b.n	800472a <_printf_float+0x23a>
 800475c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800475e:	2b00      	cmp	r3, #0
 8004760:	dc38      	bgt.n	80047d4 <_printf_float+0x2e4>
 8004762:	2301      	movs	r3, #1
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <_printf_float+0x2e0>)
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f af1a 	beq.w	80045a6 <_printf_float+0xb6>
 8004772:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004776:	4313      	orrs	r3, r2
 8004778:	d102      	bne.n	8004780 <_printf_float+0x290>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	07d9      	lsls	r1, r3, #31
 800477e:	d5d8      	bpl.n	8004732 <_printf_float+0x242>
 8004780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	f43f af0b 	beq.w	80045a6 <_printf_float+0xb6>
 8004790:	f04f 0900 	mov.w	r9, #0
 8004794:	f104 0a1a 	add.w	sl, r4, #26
 8004798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800479a:	425b      	negs	r3, r3
 800479c:	454b      	cmp	r3, r9
 800479e:	dc01      	bgt.n	80047a4 <_printf_float+0x2b4>
 80047a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047a2:	e794      	b.n	80046ce <_printf_float+0x1de>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4652      	mov	r2, sl
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f aef9 	beq.w	80045a6 <_printf_float+0xb6>
 80047b4:	f109 0901 	add.w	r9, r9, #1
 80047b8:	e7ee      	b.n	8004798 <_printf_float+0x2a8>
 80047ba:	bf00      	nop
 80047bc:	7fefffff 	.word	0x7fefffff
 80047c0:	080077bc 	.word	0x080077bc
 80047c4:	080077c0 	.word	0x080077c0
 80047c8:	080077c8 	.word	0x080077c8
 80047cc:	080077c4 	.word	0x080077c4
 80047d0:	080077cc 	.word	0x080077cc
 80047d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047d8:	429a      	cmp	r2, r3
 80047da:	bfa8      	it	ge
 80047dc:	461a      	movge	r2, r3
 80047de:	2a00      	cmp	r2, #0
 80047e0:	4691      	mov	r9, r2
 80047e2:	dc37      	bgt.n	8004854 <_printf_float+0x364>
 80047e4:	f04f 0b00 	mov.w	fp, #0
 80047e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047ec:	f104 021a 	add.w	r2, r4, #26
 80047f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80047f4:	ebaa 0309 	sub.w	r3, sl, r9
 80047f8:	455b      	cmp	r3, fp
 80047fa:	dc33      	bgt.n	8004864 <_printf_float+0x374>
 80047fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004800:	429a      	cmp	r2, r3
 8004802:	db3b      	blt.n	800487c <_printf_float+0x38c>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	07da      	lsls	r2, r3, #31
 8004808:	d438      	bmi.n	800487c <_printf_float+0x38c>
 800480a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800480c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800480e:	eba2 030a 	sub.w	r3, r2, sl
 8004812:	eba2 0901 	sub.w	r9, r2, r1
 8004816:	4599      	cmp	r9, r3
 8004818:	bfa8      	it	ge
 800481a:	4699      	movge	r9, r3
 800481c:	f1b9 0f00 	cmp.w	r9, #0
 8004820:	dc34      	bgt.n	800488c <_printf_float+0x39c>
 8004822:	f04f 0800 	mov.w	r8, #0
 8004826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800482a:	f104 0a1a 	add.w	sl, r4, #26
 800482e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	eba3 0309 	sub.w	r3, r3, r9
 8004838:	4543      	cmp	r3, r8
 800483a:	f77f af7a 	ble.w	8004732 <_printf_float+0x242>
 800483e:	2301      	movs	r3, #1
 8004840:	4652      	mov	r2, sl
 8004842:	4631      	mov	r1, r6
 8004844:	4628      	mov	r0, r5
 8004846:	47b8      	blx	r7
 8004848:	3001      	adds	r0, #1
 800484a:	f43f aeac 	beq.w	80045a6 <_printf_float+0xb6>
 800484e:	f108 0801 	add.w	r8, r8, #1
 8004852:	e7ec      	b.n	800482e <_printf_float+0x33e>
 8004854:	4613      	mov	r3, r2
 8004856:	4631      	mov	r1, r6
 8004858:	4642      	mov	r2, r8
 800485a:	4628      	mov	r0, r5
 800485c:	47b8      	blx	r7
 800485e:	3001      	adds	r0, #1
 8004860:	d1c0      	bne.n	80047e4 <_printf_float+0x2f4>
 8004862:	e6a0      	b.n	80045a6 <_printf_float+0xb6>
 8004864:	2301      	movs	r3, #1
 8004866:	4631      	mov	r1, r6
 8004868:	4628      	mov	r0, r5
 800486a:	920b      	str	r2, [sp, #44]	; 0x2c
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f ae99 	beq.w	80045a6 <_printf_float+0xb6>
 8004874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004876:	f10b 0b01 	add.w	fp, fp, #1
 800487a:	e7b9      	b.n	80047f0 <_printf_float+0x300>
 800487c:	4631      	mov	r1, r6
 800487e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004882:	4628      	mov	r0, r5
 8004884:	47b8      	blx	r7
 8004886:	3001      	adds	r0, #1
 8004888:	d1bf      	bne.n	800480a <_printf_float+0x31a>
 800488a:	e68c      	b.n	80045a6 <_printf_float+0xb6>
 800488c:	464b      	mov	r3, r9
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	eb08 020a 	add.w	r2, r8, sl
 8004896:	47b8      	blx	r7
 8004898:	3001      	adds	r0, #1
 800489a:	d1c2      	bne.n	8004822 <_printf_float+0x332>
 800489c:	e683      	b.n	80045a6 <_printf_float+0xb6>
 800489e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048a0:	2a01      	cmp	r2, #1
 80048a2:	dc01      	bgt.n	80048a8 <_printf_float+0x3b8>
 80048a4:	07db      	lsls	r3, r3, #31
 80048a6:	d537      	bpl.n	8004918 <_printf_float+0x428>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4642      	mov	r2, r8
 80048ac:	4631      	mov	r1, r6
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b8      	blx	r7
 80048b2:	3001      	adds	r0, #1
 80048b4:	f43f ae77 	beq.w	80045a6 <_printf_float+0xb6>
 80048b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f ae6f 	beq.w	80045a6 <_printf_float+0xb6>
 80048c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048cc:	2200      	movs	r2, #0
 80048ce:	2300      	movs	r3, #0
 80048d0:	f7fc f86a 	bl	80009a8 <__aeabi_dcmpeq>
 80048d4:	b9d8      	cbnz	r0, 800490e <_printf_float+0x41e>
 80048d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048d8:	f108 0201 	add.w	r2, r8, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	d10e      	bne.n	8004906 <_printf_float+0x416>
 80048e8:	e65d      	b.n	80045a6 <_printf_float+0xb6>
 80048ea:	2301      	movs	r3, #1
 80048ec:	464a      	mov	r2, r9
 80048ee:	4631      	mov	r1, r6
 80048f0:	4628      	mov	r0, r5
 80048f2:	47b8      	blx	r7
 80048f4:	3001      	adds	r0, #1
 80048f6:	f43f ae56 	beq.w	80045a6 <_printf_float+0xb6>
 80048fa:	f108 0801 	add.w	r8, r8, #1
 80048fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004900:	3b01      	subs	r3, #1
 8004902:	4543      	cmp	r3, r8
 8004904:	dcf1      	bgt.n	80048ea <_printf_float+0x3fa>
 8004906:	4653      	mov	r3, sl
 8004908:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800490c:	e6e0      	b.n	80046d0 <_printf_float+0x1e0>
 800490e:	f04f 0800 	mov.w	r8, #0
 8004912:	f104 091a 	add.w	r9, r4, #26
 8004916:	e7f2      	b.n	80048fe <_printf_float+0x40e>
 8004918:	2301      	movs	r3, #1
 800491a:	4642      	mov	r2, r8
 800491c:	e7df      	b.n	80048de <_printf_float+0x3ee>
 800491e:	2301      	movs	r3, #1
 8004920:	464a      	mov	r2, r9
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47b8      	blx	r7
 8004928:	3001      	adds	r0, #1
 800492a:	f43f ae3c 	beq.w	80045a6 <_printf_float+0xb6>
 800492e:	f108 0801 	add.w	r8, r8, #1
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004936:	1a5b      	subs	r3, r3, r1
 8004938:	4543      	cmp	r3, r8
 800493a:	dcf0      	bgt.n	800491e <_printf_float+0x42e>
 800493c:	e6fd      	b.n	800473a <_printf_float+0x24a>
 800493e:	f04f 0800 	mov.w	r8, #0
 8004942:	f104 0919 	add.w	r9, r4, #25
 8004946:	e7f4      	b.n	8004932 <_printf_float+0x442>

08004948 <_printf_common>:
 8004948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	4616      	mov	r6, r2
 800494e:	4699      	mov	r9, r3
 8004950:	688a      	ldr	r2, [r1, #8]
 8004952:	690b      	ldr	r3, [r1, #16]
 8004954:	4607      	mov	r7, r0
 8004956:	4293      	cmp	r3, r2
 8004958:	bfb8      	it	lt
 800495a:	4613      	movlt	r3, r2
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004962:	460c      	mov	r4, r1
 8004964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004968:	b10a      	cbz	r2, 800496e <_printf_common+0x26>
 800496a:	3301      	adds	r3, #1
 800496c:	6033      	str	r3, [r6, #0]
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	0699      	lsls	r1, r3, #26
 8004972:	bf42      	ittt	mi
 8004974:	6833      	ldrmi	r3, [r6, #0]
 8004976:	3302      	addmi	r3, #2
 8004978:	6033      	strmi	r3, [r6, #0]
 800497a:	6825      	ldr	r5, [r4, #0]
 800497c:	f015 0506 	ands.w	r5, r5, #6
 8004980:	d106      	bne.n	8004990 <_printf_common+0x48>
 8004982:	f104 0a19 	add.w	sl, r4, #25
 8004986:	68e3      	ldr	r3, [r4, #12]
 8004988:	6832      	ldr	r2, [r6, #0]
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	42ab      	cmp	r3, r5
 800498e:	dc28      	bgt.n	80049e2 <_printf_common+0x9a>
 8004990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004994:	1e13      	subs	r3, r2, #0
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	bf18      	it	ne
 800499a:	2301      	movne	r3, #1
 800499c:	0692      	lsls	r2, r2, #26
 800499e:	d42d      	bmi.n	80049fc <_printf_common+0xb4>
 80049a0:	4649      	mov	r1, r9
 80049a2:	4638      	mov	r0, r7
 80049a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049a8:	47c0      	blx	r8
 80049aa:	3001      	adds	r0, #1
 80049ac:	d020      	beq.n	80049f0 <_printf_common+0xa8>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	68e5      	ldr	r5, [r4, #12]
 80049b2:	f003 0306 	and.w	r3, r3, #6
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	bf18      	it	ne
 80049ba:	2500      	movne	r5, #0
 80049bc:	6832      	ldr	r2, [r6, #0]
 80049be:	f04f 0600 	mov.w	r6, #0
 80049c2:	68a3      	ldr	r3, [r4, #8]
 80049c4:	bf08      	it	eq
 80049c6:	1aad      	subeq	r5, r5, r2
 80049c8:	6922      	ldr	r2, [r4, #16]
 80049ca:	bf08      	it	eq
 80049cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bfc4      	itt	gt
 80049d4:	1a9b      	subgt	r3, r3, r2
 80049d6:	18ed      	addgt	r5, r5, r3
 80049d8:	341a      	adds	r4, #26
 80049da:	42b5      	cmp	r5, r6
 80049dc:	d11a      	bne.n	8004a14 <_printf_common+0xcc>
 80049de:	2000      	movs	r0, #0
 80049e0:	e008      	b.n	80049f4 <_printf_common+0xac>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4652      	mov	r2, sl
 80049e6:	4649      	mov	r1, r9
 80049e8:	4638      	mov	r0, r7
 80049ea:	47c0      	blx	r8
 80049ec:	3001      	adds	r0, #1
 80049ee:	d103      	bne.n	80049f8 <_printf_common+0xb0>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	3501      	adds	r5, #1
 80049fa:	e7c4      	b.n	8004986 <_printf_common+0x3e>
 80049fc:	2030      	movs	r0, #48	; 0x30
 80049fe:	18e1      	adds	r1, r4, r3
 8004a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a0a:	4422      	add	r2, r4
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a12:	e7c5      	b.n	80049a0 <_printf_common+0x58>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4622      	mov	r2, r4
 8004a18:	4649      	mov	r1, r9
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d0e6      	beq.n	80049f0 <_printf_common+0xa8>
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7d9      	b.n	80049da <_printf_common+0x92>
	...

08004a28 <_printf_i>:
 8004a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	7e27      	ldrb	r7, [r4, #24]
 8004a30:	4691      	mov	r9, r2
 8004a32:	2f78      	cmp	r7, #120	; 0x78
 8004a34:	4680      	mov	r8, r0
 8004a36:	469a      	mov	sl, r3
 8004a38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a3e:	d807      	bhi.n	8004a50 <_printf_i+0x28>
 8004a40:	2f62      	cmp	r7, #98	; 0x62
 8004a42:	d80a      	bhi.n	8004a5a <_printf_i+0x32>
 8004a44:	2f00      	cmp	r7, #0
 8004a46:	f000 80d9 	beq.w	8004bfc <_printf_i+0x1d4>
 8004a4a:	2f58      	cmp	r7, #88	; 0x58
 8004a4c:	f000 80a4 	beq.w	8004b98 <_printf_i+0x170>
 8004a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a58:	e03a      	b.n	8004ad0 <_printf_i+0xa8>
 8004a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a5e:	2b15      	cmp	r3, #21
 8004a60:	d8f6      	bhi.n	8004a50 <_printf_i+0x28>
 8004a62:	a001      	add	r0, pc, #4	; (adr r0, 8004a68 <_printf_i+0x40>)
 8004a64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a68:	08004ac1 	.word	0x08004ac1
 8004a6c:	08004ad5 	.word	0x08004ad5
 8004a70:	08004a51 	.word	0x08004a51
 8004a74:	08004a51 	.word	0x08004a51
 8004a78:	08004a51 	.word	0x08004a51
 8004a7c:	08004a51 	.word	0x08004a51
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004a51 	.word	0x08004a51
 8004a88:	08004a51 	.word	0x08004a51
 8004a8c:	08004a51 	.word	0x08004a51
 8004a90:	08004a51 	.word	0x08004a51
 8004a94:	08004be3 	.word	0x08004be3
 8004a98:	08004b05 	.word	0x08004b05
 8004a9c:	08004bc5 	.word	0x08004bc5
 8004aa0:	08004a51 	.word	0x08004a51
 8004aa4:	08004a51 	.word	0x08004a51
 8004aa8:	08004c05 	.word	0x08004c05
 8004aac:	08004a51 	.word	0x08004a51
 8004ab0:	08004b05 	.word	0x08004b05
 8004ab4:	08004a51 	.word	0x08004a51
 8004ab8:	08004a51 	.word	0x08004a51
 8004abc:	08004bcd 	.word	0x08004bcd
 8004ac0:	680b      	ldr	r3, [r1, #0]
 8004ac2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	600a      	str	r2, [r1, #0]
 8004acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0a4      	b.n	8004c1e <_printf_i+0x1f6>
 8004ad4:	6825      	ldr	r5, [r4, #0]
 8004ad6:	6808      	ldr	r0, [r1, #0]
 8004ad8:	062e      	lsls	r6, r5, #24
 8004ada:	f100 0304 	add.w	r3, r0, #4
 8004ade:	d50a      	bpl.n	8004af6 <_printf_i+0xce>
 8004ae0:	6805      	ldr	r5, [r0, #0]
 8004ae2:	600b      	str	r3, [r1, #0]
 8004ae4:	2d00      	cmp	r5, #0
 8004ae6:	da03      	bge.n	8004af0 <_printf_i+0xc8>
 8004ae8:	232d      	movs	r3, #45	; 0x2d
 8004aea:	426d      	negs	r5, r5
 8004aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af0:	230a      	movs	r3, #10
 8004af2:	485e      	ldr	r0, [pc, #376]	; (8004c6c <_printf_i+0x244>)
 8004af4:	e019      	b.n	8004b2a <_printf_i+0x102>
 8004af6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004afa:	6805      	ldr	r5, [r0, #0]
 8004afc:	600b      	str	r3, [r1, #0]
 8004afe:	bf18      	it	ne
 8004b00:	b22d      	sxthne	r5, r5
 8004b02:	e7ef      	b.n	8004ae4 <_printf_i+0xbc>
 8004b04:	680b      	ldr	r3, [r1, #0]
 8004b06:	6825      	ldr	r5, [r4, #0]
 8004b08:	1d18      	adds	r0, r3, #4
 8004b0a:	6008      	str	r0, [r1, #0]
 8004b0c:	0628      	lsls	r0, r5, #24
 8004b0e:	d501      	bpl.n	8004b14 <_printf_i+0xec>
 8004b10:	681d      	ldr	r5, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <_printf_i+0xf2>
 8004b14:	0669      	lsls	r1, r5, #25
 8004b16:	d5fb      	bpl.n	8004b10 <_printf_i+0xe8>
 8004b18:	881d      	ldrh	r5, [r3, #0]
 8004b1a:	2f6f      	cmp	r7, #111	; 0x6f
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2308      	moveq	r3, #8
 8004b20:	230a      	movne	r3, #10
 8004b22:	4852      	ldr	r0, [pc, #328]	; (8004c6c <_printf_i+0x244>)
 8004b24:	2100      	movs	r1, #0
 8004b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b2a:	6866      	ldr	r6, [r4, #4]
 8004b2c:	2e00      	cmp	r6, #0
 8004b2e:	bfa8      	it	ge
 8004b30:	6821      	ldrge	r1, [r4, #0]
 8004b32:	60a6      	str	r6, [r4, #8]
 8004b34:	bfa4      	itt	ge
 8004b36:	f021 0104 	bicge.w	r1, r1, #4
 8004b3a:	6021      	strge	r1, [r4, #0]
 8004b3c:	b90d      	cbnz	r5, 8004b42 <_printf_i+0x11a>
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	d04d      	beq.n	8004bde <_printf_i+0x1b6>
 8004b42:	4616      	mov	r6, r2
 8004b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b48:	fb03 5711 	mls	r7, r3, r1, r5
 8004b4c:	5dc7      	ldrb	r7, [r0, r7]
 8004b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b52:	462f      	mov	r7, r5
 8004b54:	42bb      	cmp	r3, r7
 8004b56:	460d      	mov	r5, r1
 8004b58:	d9f4      	bls.n	8004b44 <_printf_i+0x11c>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d10b      	bne.n	8004b76 <_printf_i+0x14e>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	07df      	lsls	r7, r3, #31
 8004b62:	d508      	bpl.n	8004b76 <_printf_i+0x14e>
 8004b64:	6923      	ldr	r3, [r4, #16]
 8004b66:	6861      	ldr	r1, [r4, #4]
 8004b68:	4299      	cmp	r1, r3
 8004b6a:	bfde      	ittt	le
 8004b6c:	2330      	movle	r3, #48	; 0x30
 8004b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b76:	1b92      	subs	r2, r2, r6
 8004b78:	6122      	str	r2, [r4, #16]
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4640      	mov	r0, r8
 8004b80:	f8cd a000 	str.w	sl, [sp]
 8004b84:	aa03      	add	r2, sp, #12
 8004b86:	f7ff fedf 	bl	8004948 <_printf_common>
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d14c      	bne.n	8004c28 <_printf_i+0x200>
 8004b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b92:	b004      	add	sp, #16
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	4834      	ldr	r0, [pc, #208]	; (8004c6c <_printf_i+0x244>)
 8004b9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b9e:	680e      	ldr	r6, [r1, #0]
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ba6:	061f      	lsls	r7, r3, #24
 8004ba8:	600e      	str	r6, [r1, #0]
 8004baa:	d514      	bpl.n	8004bd6 <_printf_i+0x1ae>
 8004bac:	07d9      	lsls	r1, r3, #31
 8004bae:	bf44      	itt	mi
 8004bb0:	f043 0320 	orrmi.w	r3, r3, #32
 8004bb4:	6023      	strmi	r3, [r4, #0]
 8004bb6:	b91d      	cbnz	r5, 8004bc0 <_printf_i+0x198>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	f023 0320 	bic.w	r3, r3, #32
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	e7af      	b.n	8004b24 <_printf_i+0xfc>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	f043 0320 	orr.w	r3, r3, #32
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	2378      	movs	r3, #120	; 0x78
 8004bce:	4828      	ldr	r0, [pc, #160]	; (8004c70 <_printf_i+0x248>)
 8004bd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd4:	e7e3      	b.n	8004b9e <_printf_i+0x176>
 8004bd6:	065e      	lsls	r6, r3, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2ad      	uxthmi	r5, r5
 8004bdc:	e7e6      	b.n	8004bac <_printf_i+0x184>
 8004bde:	4616      	mov	r6, r2
 8004be0:	e7bb      	b.n	8004b5a <_printf_i+0x132>
 8004be2:	680b      	ldr	r3, [r1, #0]
 8004be4:	6826      	ldr	r6, [r4, #0]
 8004be6:	1d1d      	adds	r5, r3, #4
 8004be8:	6960      	ldr	r0, [r4, #20]
 8004bea:	600d      	str	r5, [r1, #0]
 8004bec:	0635      	lsls	r5, r6, #24
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	d501      	bpl.n	8004bf6 <_printf_i+0x1ce>
 8004bf2:	6018      	str	r0, [r3, #0]
 8004bf4:	e002      	b.n	8004bfc <_printf_i+0x1d4>
 8004bf6:	0671      	lsls	r1, r6, #25
 8004bf8:	d5fb      	bpl.n	8004bf2 <_printf_i+0x1ca>
 8004bfa:	8018      	strh	r0, [r3, #0]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4616      	mov	r6, r2
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	e7ba      	b.n	8004b7a <_printf_i+0x152>
 8004c04:	680b      	ldr	r3, [r1, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	600a      	str	r2, [r1, #0]
 8004c0a:	681e      	ldr	r6, [r3, #0]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4630      	mov	r0, r6
 8004c10:	6862      	ldr	r2, [r4, #4]
 8004c12:	f001 fbaf 	bl	8006374 <memchr>
 8004c16:	b108      	cbz	r0, 8004c1c <_printf_i+0x1f4>
 8004c18:	1b80      	subs	r0, r0, r6
 8004c1a:	6060      	str	r0, [r4, #4]
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	2300      	movs	r3, #0
 8004c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c26:	e7a8      	b.n	8004b7a <_printf_i+0x152>
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	6923      	ldr	r3, [r4, #16]
 8004c30:	47d0      	blx	sl
 8004c32:	3001      	adds	r0, #1
 8004c34:	d0ab      	beq.n	8004b8e <_printf_i+0x166>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	079b      	lsls	r3, r3, #30
 8004c3a:	d413      	bmi.n	8004c64 <_printf_i+0x23c>
 8004c3c:	68e0      	ldr	r0, [r4, #12]
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	4298      	cmp	r0, r3
 8004c42:	bfb8      	it	lt
 8004c44:	4618      	movlt	r0, r3
 8004c46:	e7a4      	b.n	8004b92 <_printf_i+0x16a>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	4640      	mov	r0, r8
 8004c50:	47d0      	blx	sl
 8004c52:	3001      	adds	r0, #1
 8004c54:	d09b      	beq.n	8004b8e <_printf_i+0x166>
 8004c56:	3501      	adds	r5, #1
 8004c58:	68e3      	ldr	r3, [r4, #12]
 8004c5a:	9903      	ldr	r1, [sp, #12]
 8004c5c:	1a5b      	subs	r3, r3, r1
 8004c5e:	42ab      	cmp	r3, r5
 8004c60:	dcf2      	bgt.n	8004c48 <_printf_i+0x220>
 8004c62:	e7eb      	b.n	8004c3c <_printf_i+0x214>
 8004c64:	2500      	movs	r5, #0
 8004c66:	f104 0619 	add.w	r6, r4, #25
 8004c6a:	e7f5      	b.n	8004c58 <_printf_i+0x230>
 8004c6c:	080077ce 	.word	0x080077ce
 8004c70:	080077df 	.word	0x080077df

08004c74 <iprintf>:
 8004c74:	b40f      	push	{r0, r1, r2, r3}
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <iprintf+0x2c>)
 8004c78:	b513      	push	{r0, r1, r4, lr}
 8004c7a:	681c      	ldr	r4, [r3, #0]
 8004c7c:	b124      	cbz	r4, 8004c88 <iprintf+0x14>
 8004c7e:	69a3      	ldr	r3, [r4, #24]
 8004c80:	b913      	cbnz	r3, 8004c88 <iprintf+0x14>
 8004c82:	4620      	mov	r0, r4
 8004c84:	f001 fa64 	bl	8006150 <__sinit>
 8004c88:	ab05      	add	r3, sp, #20
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	9a04      	ldr	r2, [sp, #16]
 8004c8e:	68a1      	ldr	r1, [r4, #8]
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	f001 ffe9 	bl	8006c68 <_vfiprintf_r>
 8004c96:	b002      	add	sp, #8
 8004c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c9c:	b004      	add	sp, #16
 8004c9e:	4770      	bx	lr
 8004ca0:	2000000c 	.word	0x2000000c

08004ca4 <_puts_r>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	460e      	mov	r6, r1
 8004ca8:	4605      	mov	r5, r0
 8004caa:	b118      	cbz	r0, 8004cb4 <_puts_r+0x10>
 8004cac:	6983      	ldr	r3, [r0, #24]
 8004cae:	b90b      	cbnz	r3, 8004cb4 <_puts_r+0x10>
 8004cb0:	f001 fa4e 	bl	8006150 <__sinit>
 8004cb4:	69ab      	ldr	r3, [r5, #24]
 8004cb6:	68ac      	ldr	r4, [r5, #8]
 8004cb8:	b913      	cbnz	r3, 8004cc0 <_puts_r+0x1c>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f001 fa48 	bl	8006150 <__sinit>
 8004cc0:	4b2c      	ldr	r3, [pc, #176]	; (8004d74 <_puts_r+0xd0>)
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d120      	bne.n	8004d08 <_puts_r+0x64>
 8004cc6:	686c      	ldr	r4, [r5, #4]
 8004cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cca:	07db      	lsls	r3, r3, #31
 8004ccc:	d405      	bmi.n	8004cda <_puts_r+0x36>
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	0598      	lsls	r0, r3, #22
 8004cd2:	d402      	bmi.n	8004cda <_puts_r+0x36>
 8004cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd6:	f001 fade 	bl	8006296 <__retarget_lock_acquire_recursive>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	0719      	lsls	r1, r3, #28
 8004cde:	d51d      	bpl.n	8004d1c <_puts_r+0x78>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	b1db      	cbz	r3, 8004d1c <_puts_r+0x78>
 8004ce4:	3e01      	subs	r6, #1
 8004ce6:	68a3      	ldr	r3, [r4, #8]
 8004ce8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cec:	3b01      	subs	r3, #1
 8004cee:	60a3      	str	r3, [r4, #8]
 8004cf0:	bb39      	cbnz	r1, 8004d42 <_puts_r+0x9e>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da38      	bge.n	8004d68 <_puts_r+0xc4>
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	210a      	movs	r1, #10
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 f9d2 	bl	80050a4 <__swbuf_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d011      	beq.n	8004d28 <_puts_r+0x84>
 8004d04:	250a      	movs	r5, #10
 8004d06:	e011      	b.n	8004d2c <_puts_r+0x88>
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <_puts_r+0xd4>)
 8004d0a:	429c      	cmp	r4, r3
 8004d0c:	d101      	bne.n	8004d12 <_puts_r+0x6e>
 8004d0e:	68ac      	ldr	r4, [r5, #8]
 8004d10:	e7da      	b.n	8004cc8 <_puts_r+0x24>
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <_puts_r+0xd8>)
 8004d14:	429c      	cmp	r4, r3
 8004d16:	bf08      	it	eq
 8004d18:	68ec      	ldreq	r4, [r5, #12]
 8004d1a:	e7d5      	b.n	8004cc8 <_puts_r+0x24>
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fa12 	bl	8005148 <__swsetup_r>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d0dd      	beq.n	8004ce4 <_puts_r+0x40>
 8004d28:	f04f 35ff 	mov.w	r5, #4294967295
 8004d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d2e:	07da      	lsls	r2, r3, #31
 8004d30:	d405      	bmi.n	8004d3e <_puts_r+0x9a>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	059b      	lsls	r3, r3, #22
 8004d36:	d402      	bmi.n	8004d3e <_puts_r+0x9a>
 8004d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d3a:	f001 faad 	bl	8006298 <__retarget_lock_release_recursive>
 8004d3e:	4628      	mov	r0, r5
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da04      	bge.n	8004d50 <_puts_r+0xac>
 8004d46:	69a2      	ldr	r2, [r4, #24]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	dc06      	bgt.n	8004d5a <_puts_r+0xb6>
 8004d4c:	290a      	cmp	r1, #10
 8004d4e:	d004      	beq.n	8004d5a <_puts_r+0xb6>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	6022      	str	r2, [r4, #0]
 8004d56:	7019      	strb	r1, [r3, #0]
 8004d58:	e7c5      	b.n	8004ce6 <_puts_r+0x42>
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f000 f9a1 	bl	80050a4 <__swbuf_r>
 8004d62:	3001      	adds	r0, #1
 8004d64:	d1bf      	bne.n	8004ce6 <_puts_r+0x42>
 8004d66:	e7df      	b.n	8004d28 <_puts_r+0x84>
 8004d68:	250a      	movs	r5, #10
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	6022      	str	r2, [r4, #0]
 8004d70:	701d      	strb	r5, [r3, #0]
 8004d72:	e7db      	b.n	8004d2c <_puts_r+0x88>
 8004d74:	080078a4 	.word	0x080078a4
 8004d78:	080078c4 	.word	0x080078c4
 8004d7c:	08007884 	.word	0x08007884

08004d80 <puts>:
 8004d80:	4b02      	ldr	r3, [pc, #8]	; (8004d8c <puts+0xc>)
 8004d82:	4601      	mov	r1, r0
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f7ff bf8d 	b.w	8004ca4 <_puts_r>
 8004d8a:	bf00      	nop
 8004d8c:	2000000c 	.word	0x2000000c

08004d90 <swapfunc>:
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	b510      	push	{r4, lr}
 8004d94:	d00a      	beq.n	8004dac <swapfunc+0x1c>
 8004d96:	0892      	lsrs	r2, r2, #2
 8004d98:	6803      	ldr	r3, [r0, #0]
 8004d9a:	680c      	ldr	r4, [r1, #0]
 8004d9c:	3a01      	subs	r2, #1
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	f840 4b04 	str.w	r4, [r0], #4
 8004da4:	f841 3b04 	str.w	r3, [r1], #4
 8004da8:	dcf6      	bgt.n	8004d98 <swapfunc+0x8>
 8004daa:	bd10      	pop	{r4, pc}
 8004dac:	4402      	add	r2, r0
 8004dae:	780c      	ldrb	r4, [r1, #0]
 8004db0:	7803      	ldrb	r3, [r0, #0]
 8004db2:	f800 4b01 	strb.w	r4, [r0], #1
 8004db6:	f801 3b01 	strb.w	r3, [r1], #1
 8004dba:	1a13      	subs	r3, r2, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dcf6      	bgt.n	8004dae <swapfunc+0x1e>
 8004dc0:	e7f3      	b.n	8004daa <swapfunc+0x1a>

08004dc2 <med3.isra.0>:
 8004dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc4:	460f      	mov	r7, r1
 8004dc6:	4614      	mov	r4, r2
 8004dc8:	4606      	mov	r6, r0
 8004dca:	461d      	mov	r5, r3
 8004dcc:	4798      	blx	r3
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	da0c      	bge.n	8004df0 <med3.isra.0+0x2e>
 8004dd6:	47a8      	blx	r5
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	da02      	bge.n	8004de2 <med3.isra.0+0x20>
 8004ddc:	463c      	mov	r4, r7
 8004dde:	4620      	mov	r0, r4
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de2:	4621      	mov	r1, r4
 8004de4:	4630      	mov	r0, r6
 8004de6:	47a8      	blx	r5
 8004de8:	2800      	cmp	r0, #0
 8004dea:	dbf8      	blt.n	8004dde <med3.isra.0+0x1c>
 8004dec:	4634      	mov	r4, r6
 8004dee:	e7f6      	b.n	8004dde <med3.isra.0+0x1c>
 8004df0:	47a8      	blx	r5
 8004df2:	2800      	cmp	r0, #0
 8004df4:	dcf2      	bgt.n	8004ddc <med3.isra.0+0x1a>
 8004df6:	4621      	mov	r1, r4
 8004df8:	4630      	mov	r0, r6
 8004dfa:	47a8      	blx	r5
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	daee      	bge.n	8004dde <med3.isra.0+0x1c>
 8004e00:	e7f4      	b.n	8004dec <med3.isra.0+0x2a>

08004e02 <qsort>:
 8004e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e06:	469a      	mov	sl, r3
 8004e08:	ea40 0302 	orr.w	r3, r0, r2
 8004e0c:	079b      	lsls	r3, r3, #30
 8004e0e:	4606      	mov	r6, r0
 8004e10:	4614      	mov	r4, r2
 8004e12:	b097      	sub	sp, #92	; 0x5c
 8004e14:	d11a      	bne.n	8004e4c <qsort+0x4a>
 8004e16:	f1b2 0804 	subs.w	r8, r2, #4
 8004e1a:	bf18      	it	ne
 8004e1c:	f04f 0801 	movne.w	r8, #1
 8004e20:	2300      	movs	r3, #0
 8004e22:	9302      	str	r3, [sp, #8]
 8004e24:	fb04 f701 	mul.w	r7, r4, r1
 8004e28:	1933      	adds	r3, r6, r4
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	2906      	cmp	r1, #6
 8004e2e:	eb06 0307 	add.w	r3, r6, r7
 8004e32:	9303      	str	r3, [sp, #12]
 8004e34:	d82a      	bhi.n	8004e8c <qsort+0x8a>
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	9a03      	ldr	r2, [sp, #12]
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d310      	bcc.n	8004e60 <qsort+0x5e>
 8004e3e:	9b02      	ldr	r3, [sp, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 811f 	bne.w	8005084 <qsort+0x282>
 8004e46:	b017      	add	sp, #92	; 0x5c
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	f04f 0802 	mov.w	r8, #2
 8004e50:	e7e6      	b.n	8004e20 <qsort+0x1e>
 8004e52:	4643      	mov	r3, r8
 8004e54:	4622      	mov	r2, r4
 8004e56:	4639      	mov	r1, r7
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f7ff ff99 	bl	8004d90 <swapfunc>
 8004e5e:	e00e      	b.n	8004e7e <qsort+0x7c>
 8004e60:	9d01      	ldr	r5, [sp, #4]
 8004e62:	e00d      	b.n	8004e80 <qsort+0x7e>
 8004e64:	1b2f      	subs	r7, r5, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	4638      	mov	r0, r7
 8004e6a:	47d0      	blx	sl
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	dd09      	ble.n	8004e84 <qsort+0x82>
 8004e70:	f1b8 0f00 	cmp.w	r8, #0
 8004e74:	d1ed      	bne.n	8004e52 <qsort+0x50>
 8004e76:	682b      	ldr	r3, [r5, #0]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	602a      	str	r2, [r5, #0]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	463d      	mov	r5, r7
 8004e80:	42ae      	cmp	r6, r5
 8004e82:	d3ef      	bcc.n	8004e64 <qsort+0x62>
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	4423      	add	r3, r4
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	e7d4      	b.n	8004e36 <qsort+0x34>
 8004e8c:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8004e90:	1b3f      	subs	r7, r7, r4
 8004e92:	2907      	cmp	r1, #7
 8004e94:	fb04 6909 	mla	r9, r4, r9, r6
 8004e98:	4437      	add	r7, r6
 8004e9a:	d022      	beq.n	8004ee2 <qsort+0xe0>
 8004e9c:	2928      	cmp	r1, #40	; 0x28
 8004e9e:	d945      	bls.n	8004f2c <qsort+0x12a>
 8004ea0:	08c9      	lsrs	r1, r1, #3
 8004ea2:	fb04 f501 	mul.w	r5, r4, r1
 8004ea6:	4653      	mov	r3, sl
 8004ea8:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8004eac:	1971      	adds	r1, r6, r5
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f7ff ff87 	bl	8004dc2 <med3.isra.0>
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	eb09 0205 	add.w	r2, r9, r5
 8004eba:	4653      	mov	r3, sl
 8004ebc:	4683      	mov	fp, r0
 8004ebe:	1b48      	subs	r0, r1, r5
 8004ec0:	f7ff ff7f 	bl	8004dc2 <med3.isra.0>
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	4681      	mov	r9, r0
 8004ec8:	4653      	mov	r3, sl
 8004eca:	1b79      	subs	r1, r7, r5
 8004ecc:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8004ed0:	f7ff ff77 	bl	8004dc2 <med3.isra.0>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	4653      	mov	r3, sl
 8004eda:	4658      	mov	r0, fp
 8004edc:	f7ff ff71 	bl	8004dc2 <med3.isra.0>
 8004ee0:	4681      	mov	r9, r0
 8004ee2:	f1b8 0f00 	cmp.w	r8, #0
 8004ee6:	d124      	bne.n	8004f32 <qsort+0x130>
 8004ee8:	6833      	ldr	r3, [r6, #0]
 8004eea:	f8d9 2000 	ldr.w	r2, [r9]
 8004eee:	6032      	str	r2, [r6, #0]
 8004ef0:	f8c9 3000 	str.w	r3, [r9]
 8004ef4:	eb06 0b04 	add.w	fp, r6, r4
 8004ef8:	46b9      	mov	r9, r7
 8004efa:	465d      	mov	r5, fp
 8004efc:	2300      	movs	r3, #0
 8004efe:	45bb      	cmp	fp, r7
 8004f00:	d835      	bhi.n	8004f6e <qsort+0x16c>
 8004f02:	4631      	mov	r1, r6
 8004f04:	4658      	mov	r0, fp
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	47d0      	blx	sl
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	9b04      	ldr	r3, [sp, #16]
 8004f0e:	dc3e      	bgt.n	8004f8e <qsort+0x18c>
 8004f10:	d10a      	bne.n	8004f28 <qsort+0x126>
 8004f12:	f1b8 0f00 	cmp.w	r8, #0
 8004f16:	d113      	bne.n	8004f40 <qsort+0x13e>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	f8db 2000 	ldr.w	r2, [fp]
 8004f1e:	602a      	str	r2, [r5, #0]
 8004f20:	f8cb 3000 	str.w	r3, [fp]
 8004f24:	4425      	add	r5, r4
 8004f26:	2301      	movs	r3, #1
 8004f28:	44a3      	add	fp, r4
 8004f2a:	e7e8      	b.n	8004efe <qsort+0xfc>
 8004f2c:	463a      	mov	r2, r7
 8004f2e:	46b3      	mov	fp, r6
 8004f30:	e7d1      	b.n	8004ed6 <qsort+0xd4>
 8004f32:	4643      	mov	r3, r8
 8004f34:	4622      	mov	r2, r4
 8004f36:	4649      	mov	r1, r9
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f7ff ff29 	bl	8004d90 <swapfunc>
 8004f3e:	e7d9      	b.n	8004ef4 <qsort+0xf2>
 8004f40:	4643      	mov	r3, r8
 8004f42:	4622      	mov	r2, r4
 8004f44:	4659      	mov	r1, fp
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff ff22 	bl	8004d90 <swapfunc>
 8004f4c:	e7ea      	b.n	8004f24 <qsort+0x122>
 8004f4e:	d10b      	bne.n	8004f68 <qsort+0x166>
 8004f50:	f1b8 0f00 	cmp.w	r8, #0
 8004f54:	d114      	bne.n	8004f80 <qsort+0x17e>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f8d9 2000 	ldr.w	r2, [r9]
 8004f5c:	603a      	str	r2, [r7, #0]
 8004f5e:	f8c9 3000 	str.w	r3, [r9]
 8004f62:	2301      	movs	r3, #1
 8004f64:	eba9 0904 	sub.w	r9, r9, r4
 8004f68:	9f04      	ldr	r7, [sp, #16]
 8004f6a:	45bb      	cmp	fp, r7
 8004f6c:	d90f      	bls.n	8004f8e <qsort+0x18c>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d143      	bne.n	8004ffa <qsort+0x1f8>
 8004f72:	9b01      	ldr	r3, [sp, #4]
 8004f74:	9a03      	ldr	r2, [sp, #12]
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f4bf af61 	bcs.w	8004e3e <qsort+0x3c>
 8004f7c:	9d01      	ldr	r5, [sp, #4]
 8004f7e:	e036      	b.n	8004fee <qsort+0x1ec>
 8004f80:	4643      	mov	r3, r8
 8004f82:	4622      	mov	r2, r4
 8004f84:	4649      	mov	r1, r9
 8004f86:	4638      	mov	r0, r7
 8004f88:	f7ff ff02 	bl	8004d90 <swapfunc>
 8004f8c:	e7e9      	b.n	8004f62 <qsort+0x160>
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4638      	mov	r0, r7
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	47d0      	blx	sl
 8004f96:	1b3b      	subs	r3, r7, r4
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	9b05      	ldr	r3, [sp, #20]
 8004f9e:	dad6      	bge.n	8004f4e <qsort+0x14c>
 8004fa0:	f1b8 0f00 	cmp.w	r8, #0
 8004fa4:	d006      	beq.n	8004fb4 <qsort+0x1b2>
 8004fa6:	4643      	mov	r3, r8
 8004fa8:	4622      	mov	r2, r4
 8004faa:	4639      	mov	r1, r7
 8004fac:	4658      	mov	r0, fp
 8004fae:	f7ff feef 	bl	8004d90 <swapfunc>
 8004fb2:	e005      	b.n	8004fc0 <qsort+0x1be>
 8004fb4:	f8db 3000 	ldr.w	r3, [fp]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	f8cb 2000 	str.w	r2, [fp]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	9f04      	ldr	r7, [sp, #16]
 8004fc2:	e7b0      	b.n	8004f26 <qsort+0x124>
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	4639      	mov	r1, r7
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f7ff fee0 	bl	8004d90 <swapfunc>
 8004fd0:	e00c      	b.n	8004fec <qsort+0x1ea>
 8004fd2:	1b2f      	subs	r7, r5, r4
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47d0      	blx	sl
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	dd09      	ble.n	8004ff2 <qsort+0x1f0>
 8004fde:	f1b8 0f00 	cmp.w	r8, #0
 8004fe2:	d1ef      	bne.n	8004fc4 <qsort+0x1c2>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	463d      	mov	r5, r7
 8004fee:	42ae      	cmp	r6, r5
 8004ff0:	d3ef      	bcc.n	8004fd2 <qsort+0x1d0>
 8004ff2:	9b01      	ldr	r3, [sp, #4]
 8004ff4:	4423      	add	r3, r4
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	e7bb      	b.n	8004f72 <qsort+0x170>
 8004ffa:	ebab 0305 	sub.w	r3, fp, r5
 8004ffe:	1baa      	subs	r2, r5, r6
 8005000:	429a      	cmp	r2, r3
 8005002:	bfa8      	it	ge
 8005004:	461a      	movge	r2, r3
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	b12a      	cbz	r2, 8005016 <qsort+0x214>
 800500a:	4643      	mov	r3, r8
 800500c:	4630      	mov	r0, r6
 800500e:	ebab 0102 	sub.w	r1, fp, r2
 8005012:	f7ff febd 	bl	8004d90 <swapfunc>
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	eba9 0707 	sub.w	r7, r9, r7
 800501c:	eba3 0209 	sub.w	r2, r3, r9
 8005020:	1b12      	subs	r2, r2, r4
 8005022:	42ba      	cmp	r2, r7
 8005024:	bf28      	it	cs
 8005026:	463a      	movcs	r2, r7
 8005028:	b12a      	cbz	r2, 8005036 <qsort+0x234>
 800502a:	9903      	ldr	r1, [sp, #12]
 800502c:	4643      	mov	r3, r8
 800502e:	4658      	mov	r0, fp
 8005030:	1a89      	subs	r1, r1, r2
 8005032:	f7ff fead 	bl	8004d90 <swapfunc>
 8005036:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	454f      	cmp	r7, r9
 800503e:	eba3 0007 	sub.w	r0, r3, r7
 8005042:	d904      	bls.n	800504e <qsort+0x24c>
 8005044:	4633      	mov	r3, r6
 8005046:	4606      	mov	r6, r0
 8005048:	4618      	mov	r0, r3
 800504a:	46b9      	mov	r9, r7
 800504c:	9f01      	ldr	r7, [sp, #4]
 800504e:	42a7      	cmp	r7, r4
 8005050:	d921      	bls.n	8005096 <qsort+0x294>
 8005052:	9b02      	ldr	r3, [sp, #8]
 8005054:	fbb7 f1f4 	udiv	r1, r7, r4
 8005058:	2b07      	cmp	r3, #7
 800505a:	d80d      	bhi.n	8005078 <qsort+0x276>
 800505c:	fbb9 f7f4 	udiv	r7, r9, r4
 8005060:	aa16      	add	r2, sp, #88	; 0x58
 8005062:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005066:	f843 6c40 	str.w	r6, [r3, #-64]
 800506a:	f843 7c3c 	str.w	r7, [r3, #-60]
 800506e:	9b02      	ldr	r3, [sp, #8]
 8005070:	3301      	adds	r3, #1
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	4606      	mov	r6, r0
 8005076:	e6d5      	b.n	8004e24 <qsort+0x22>
 8005078:	4653      	mov	r3, sl
 800507a:	4622      	mov	r2, r4
 800507c:	f7ff fec1 	bl	8004e02 <qsort>
 8005080:	45a1      	cmp	r9, r4
 8005082:	d80b      	bhi.n	800509c <qsort+0x29a>
 8005084:	9b02      	ldr	r3, [sp, #8]
 8005086:	aa16      	add	r2, sp, #88	; 0x58
 8005088:	3b01      	subs	r3, #1
 800508a:	9302      	str	r3, [sp, #8]
 800508c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005090:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8005094:	e7ee      	b.n	8005074 <qsort+0x272>
 8005096:	45a1      	cmp	r9, r4
 8005098:	f67f aed1 	bls.w	8004e3e <qsort+0x3c>
 800509c:	fbb9 f1f4 	udiv	r1, r9, r4
 80050a0:	4630      	mov	r0, r6
 80050a2:	e7e7      	b.n	8005074 <qsort+0x272>

080050a4 <__swbuf_r>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	460e      	mov	r6, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	4605      	mov	r5, r0
 80050ac:	b118      	cbz	r0, 80050b6 <__swbuf_r+0x12>
 80050ae:	6983      	ldr	r3, [r0, #24]
 80050b0:	b90b      	cbnz	r3, 80050b6 <__swbuf_r+0x12>
 80050b2:	f001 f84d 	bl	8006150 <__sinit>
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <__swbuf_r+0x98>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d12b      	bne.n	8005114 <__swbuf_r+0x70>
 80050bc:	686c      	ldr	r4, [r5, #4]
 80050be:	69a3      	ldr	r3, [r4, #24]
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	071a      	lsls	r2, r3, #28
 80050c6:	d52f      	bpl.n	8005128 <__swbuf_r+0x84>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	b36b      	cbz	r3, 8005128 <__swbuf_r+0x84>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	b2f6      	uxtb	r6, r6
 80050d2:	1ac0      	subs	r0, r0, r3
 80050d4:	6963      	ldr	r3, [r4, #20]
 80050d6:	4637      	mov	r7, r6
 80050d8:	4283      	cmp	r3, r0
 80050da:	dc04      	bgt.n	80050e6 <__swbuf_r+0x42>
 80050dc:	4621      	mov	r1, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 ffa2 	bl	8006028 <_fflush_r>
 80050e4:	bb30      	cbnz	r0, 8005134 <__swbuf_r+0x90>
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	3001      	adds	r0, #1
 80050ea:	3b01      	subs	r3, #1
 80050ec:	60a3      	str	r3, [r4, #8]
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	6022      	str	r2, [r4, #0]
 80050f4:	701e      	strb	r6, [r3, #0]
 80050f6:	6963      	ldr	r3, [r4, #20]
 80050f8:	4283      	cmp	r3, r0
 80050fa:	d004      	beq.n	8005106 <__swbuf_r+0x62>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	07db      	lsls	r3, r3, #31
 8005100:	d506      	bpl.n	8005110 <__swbuf_r+0x6c>
 8005102:	2e0a      	cmp	r6, #10
 8005104:	d104      	bne.n	8005110 <__swbuf_r+0x6c>
 8005106:	4621      	mov	r1, r4
 8005108:	4628      	mov	r0, r5
 800510a:	f000 ff8d 	bl	8006028 <_fflush_r>
 800510e:	b988      	cbnz	r0, 8005134 <__swbuf_r+0x90>
 8005110:	4638      	mov	r0, r7
 8005112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <__swbuf_r+0x9c>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d101      	bne.n	800511e <__swbuf_r+0x7a>
 800511a:	68ac      	ldr	r4, [r5, #8]
 800511c:	e7cf      	b.n	80050be <__swbuf_r+0x1a>
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <__swbuf_r+0xa0>)
 8005120:	429c      	cmp	r4, r3
 8005122:	bf08      	it	eq
 8005124:	68ec      	ldreq	r4, [r5, #12]
 8005126:	e7ca      	b.n	80050be <__swbuf_r+0x1a>
 8005128:	4621      	mov	r1, r4
 800512a:	4628      	mov	r0, r5
 800512c:	f000 f80c 	bl	8005148 <__swsetup_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	d0cb      	beq.n	80050cc <__swbuf_r+0x28>
 8005134:	f04f 37ff 	mov.w	r7, #4294967295
 8005138:	e7ea      	b.n	8005110 <__swbuf_r+0x6c>
 800513a:	bf00      	nop
 800513c:	080078a4 	.word	0x080078a4
 8005140:	080078c4 	.word	0x080078c4
 8005144:	08007884 	.word	0x08007884

08005148 <__swsetup_r>:
 8005148:	4b32      	ldr	r3, [pc, #200]	; (8005214 <__swsetup_r+0xcc>)
 800514a:	b570      	push	{r4, r5, r6, lr}
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	4606      	mov	r6, r0
 8005150:	460c      	mov	r4, r1
 8005152:	b125      	cbz	r5, 800515e <__swsetup_r+0x16>
 8005154:	69ab      	ldr	r3, [r5, #24]
 8005156:	b913      	cbnz	r3, 800515e <__swsetup_r+0x16>
 8005158:	4628      	mov	r0, r5
 800515a:	f000 fff9 	bl	8006150 <__sinit>
 800515e:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <__swsetup_r+0xd0>)
 8005160:	429c      	cmp	r4, r3
 8005162:	d10f      	bne.n	8005184 <__swsetup_r+0x3c>
 8005164:	686c      	ldr	r4, [r5, #4]
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800516c:	0719      	lsls	r1, r3, #28
 800516e:	d42c      	bmi.n	80051ca <__swsetup_r+0x82>
 8005170:	06dd      	lsls	r5, r3, #27
 8005172:	d411      	bmi.n	8005198 <__swsetup_r+0x50>
 8005174:	2309      	movs	r3, #9
 8005176:	6033      	str	r3, [r6, #0]
 8005178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	81a3      	strh	r3, [r4, #12]
 8005182:	e03e      	b.n	8005202 <__swsetup_r+0xba>
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <__swsetup_r+0xd4>)
 8005186:	429c      	cmp	r4, r3
 8005188:	d101      	bne.n	800518e <__swsetup_r+0x46>
 800518a:	68ac      	ldr	r4, [r5, #8]
 800518c:	e7eb      	b.n	8005166 <__swsetup_r+0x1e>
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <__swsetup_r+0xd8>)
 8005190:	429c      	cmp	r4, r3
 8005192:	bf08      	it	eq
 8005194:	68ec      	ldreq	r4, [r5, #12]
 8005196:	e7e6      	b.n	8005166 <__swsetup_r+0x1e>
 8005198:	0758      	lsls	r0, r3, #29
 800519a:	d512      	bpl.n	80051c2 <__swsetup_r+0x7a>
 800519c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800519e:	b141      	cbz	r1, 80051b2 <__swsetup_r+0x6a>
 80051a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051a4:	4299      	cmp	r1, r3
 80051a6:	d002      	beq.n	80051ae <__swsetup_r+0x66>
 80051a8:	4630      	mov	r0, r6
 80051aa:	f001 fc8f 	bl	8006acc <_free_r>
 80051ae:	2300      	movs	r3, #0
 80051b0:	6363      	str	r3, [r4, #52]	; 0x34
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	2300      	movs	r3, #0
 80051bc:	6063      	str	r3, [r4, #4]
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	f043 0308 	orr.w	r3, r3, #8
 80051c8:	81a3      	strh	r3, [r4, #12]
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	b94b      	cbnz	r3, 80051e2 <__swsetup_r+0x9a>
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d8:	d003      	beq.n	80051e2 <__swsetup_r+0x9a>
 80051da:	4621      	mov	r1, r4
 80051dc:	4630      	mov	r0, r6
 80051de:	f001 f881 	bl	80062e4 <__smakebuf_r>
 80051e2:	89a0      	ldrh	r0, [r4, #12]
 80051e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051e8:	f010 0301 	ands.w	r3, r0, #1
 80051ec:	d00a      	beq.n	8005204 <__swsetup_r+0xbc>
 80051ee:	2300      	movs	r3, #0
 80051f0:	60a3      	str	r3, [r4, #8]
 80051f2:	6963      	ldr	r3, [r4, #20]
 80051f4:	425b      	negs	r3, r3
 80051f6:	61a3      	str	r3, [r4, #24]
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	b943      	cbnz	r3, 800520e <__swsetup_r+0xc6>
 80051fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005200:	d1ba      	bne.n	8005178 <__swsetup_r+0x30>
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	0781      	lsls	r1, r0, #30
 8005206:	bf58      	it	pl
 8005208:	6963      	ldrpl	r3, [r4, #20]
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	e7f4      	b.n	80051f8 <__swsetup_r+0xb0>
 800520e:	2000      	movs	r0, #0
 8005210:	e7f7      	b.n	8005202 <__swsetup_r+0xba>
 8005212:	bf00      	nop
 8005214:	2000000c 	.word	0x2000000c
 8005218:	080078a4 	.word	0x080078a4
 800521c:	080078c4 	.word	0x080078c4
 8005220:	08007884 	.word	0x08007884

08005224 <quorem>:
 8005224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	6903      	ldr	r3, [r0, #16]
 800522a:	690c      	ldr	r4, [r1, #16]
 800522c:	4607      	mov	r7, r0
 800522e:	42a3      	cmp	r3, r4
 8005230:	f2c0 8083 	blt.w	800533a <quorem+0x116>
 8005234:	3c01      	subs	r4, #1
 8005236:	f100 0514 	add.w	r5, r0, #20
 800523a:	f101 0814 	add.w	r8, r1, #20
 800523e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800524c:	3301      	adds	r3, #1
 800524e:	429a      	cmp	r2, r3
 8005250:	fbb2 f6f3 	udiv	r6, r2, r3
 8005254:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005258:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800525c:	d332      	bcc.n	80052c4 <quorem+0xa0>
 800525e:	f04f 0e00 	mov.w	lr, #0
 8005262:	4640      	mov	r0, r8
 8005264:	46ac      	mov	ip, r5
 8005266:	46f2      	mov	sl, lr
 8005268:	f850 2b04 	ldr.w	r2, [r0], #4
 800526c:	b293      	uxth	r3, r2
 800526e:	fb06 e303 	mla	r3, r6, r3, lr
 8005272:	0c12      	lsrs	r2, r2, #16
 8005274:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005278:	fb06 e202 	mla	r2, r6, r2, lr
 800527c:	b29b      	uxth	r3, r3
 800527e:	ebaa 0303 	sub.w	r3, sl, r3
 8005282:	f8dc a000 	ldr.w	sl, [ip]
 8005286:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800528a:	fa1f fa8a 	uxth.w	sl, sl
 800528e:	4453      	add	r3, sl
 8005290:	fa1f fa82 	uxth.w	sl, r2
 8005294:	f8dc 2000 	ldr.w	r2, [ip]
 8005298:	4581      	cmp	r9, r0
 800529a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800529e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052ac:	f84c 3b04 	str.w	r3, [ip], #4
 80052b0:	d2da      	bcs.n	8005268 <quorem+0x44>
 80052b2:	f855 300b 	ldr.w	r3, [r5, fp]
 80052b6:	b92b      	cbnz	r3, 80052c4 <quorem+0xa0>
 80052b8:	9b01      	ldr	r3, [sp, #4]
 80052ba:	3b04      	subs	r3, #4
 80052bc:	429d      	cmp	r5, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	d32f      	bcc.n	8005322 <quorem+0xfe>
 80052c2:	613c      	str	r4, [r7, #16]
 80052c4:	4638      	mov	r0, r7
 80052c6:	f001 faeb 	bl	80068a0 <__mcmp>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	db25      	blt.n	800531a <quorem+0xf6>
 80052ce:	4628      	mov	r0, r5
 80052d0:	f04f 0c00 	mov.w	ip, #0
 80052d4:	3601      	adds	r6, #1
 80052d6:	f858 1b04 	ldr.w	r1, [r8], #4
 80052da:	f8d0 e000 	ldr.w	lr, [r0]
 80052de:	b28b      	uxth	r3, r1
 80052e0:	ebac 0303 	sub.w	r3, ip, r3
 80052e4:	fa1f f28e 	uxth.w	r2, lr
 80052e8:	4413      	add	r3, r2
 80052ea:	0c0a      	lsrs	r2, r1, #16
 80052ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052fa:	45c1      	cmp	r9, r8
 80052fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005300:	f840 3b04 	str.w	r3, [r0], #4
 8005304:	d2e7      	bcs.n	80052d6 <quorem+0xb2>
 8005306:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800530a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800530e:	b922      	cbnz	r2, 800531a <quorem+0xf6>
 8005310:	3b04      	subs	r3, #4
 8005312:	429d      	cmp	r5, r3
 8005314:	461a      	mov	r2, r3
 8005316:	d30a      	bcc.n	800532e <quorem+0x10a>
 8005318:	613c      	str	r4, [r7, #16]
 800531a:	4630      	mov	r0, r6
 800531c:	b003      	add	sp, #12
 800531e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	3b04      	subs	r3, #4
 8005326:	2a00      	cmp	r2, #0
 8005328:	d1cb      	bne.n	80052c2 <quorem+0x9e>
 800532a:	3c01      	subs	r4, #1
 800532c:	e7c6      	b.n	80052bc <quorem+0x98>
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	3b04      	subs	r3, #4
 8005332:	2a00      	cmp	r2, #0
 8005334:	d1f0      	bne.n	8005318 <quorem+0xf4>
 8005336:	3c01      	subs	r4, #1
 8005338:	e7eb      	b.n	8005312 <quorem+0xee>
 800533a:	2000      	movs	r0, #0
 800533c:	e7ee      	b.n	800531c <quorem+0xf8>
	...

08005340 <_dtoa_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	4616      	mov	r6, r2
 8005346:	461f      	mov	r7, r3
 8005348:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800534a:	b099      	sub	sp, #100	; 0x64
 800534c:	4605      	mov	r5, r0
 800534e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005352:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005356:	b974      	cbnz	r4, 8005376 <_dtoa_r+0x36>
 8005358:	2010      	movs	r0, #16
 800535a:	f001 f803 	bl	8006364 <malloc>
 800535e:	4602      	mov	r2, r0
 8005360:	6268      	str	r0, [r5, #36]	; 0x24
 8005362:	b920      	cbnz	r0, 800536e <_dtoa_r+0x2e>
 8005364:	21ea      	movs	r1, #234	; 0xea
 8005366:	4bae      	ldr	r3, [pc, #696]	; (8005620 <_dtoa_r+0x2e0>)
 8005368:	48ae      	ldr	r0, [pc, #696]	; (8005624 <_dtoa_r+0x2e4>)
 800536a:	f001 fe13 	bl	8006f94 <__assert_func>
 800536e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005372:	6004      	str	r4, [r0, #0]
 8005374:	60c4      	str	r4, [r0, #12]
 8005376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005378:	6819      	ldr	r1, [r3, #0]
 800537a:	b151      	cbz	r1, 8005392 <_dtoa_r+0x52>
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	2301      	movs	r3, #1
 8005380:	4093      	lsls	r3, r2
 8005382:	604a      	str	r2, [r1, #4]
 8005384:	608b      	str	r3, [r1, #8]
 8005386:	4628      	mov	r0, r5
 8005388:	f001 f850 	bl	800642c <_Bfree>
 800538c:	2200      	movs	r2, #0
 800538e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	1e3b      	subs	r3, r7, #0
 8005394:	bfaf      	iteee	ge
 8005396:	2300      	movge	r3, #0
 8005398:	2201      	movlt	r2, #1
 800539a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800539e:	9305      	strlt	r3, [sp, #20]
 80053a0:	bfa8      	it	ge
 80053a2:	f8c8 3000 	strge.w	r3, [r8]
 80053a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80053aa:	4b9f      	ldr	r3, [pc, #636]	; (8005628 <_dtoa_r+0x2e8>)
 80053ac:	bfb8      	it	lt
 80053ae:	f8c8 2000 	strlt.w	r2, [r8]
 80053b2:	ea33 0309 	bics.w	r3, r3, r9
 80053b6:	d119      	bne.n	80053ec <_dtoa_r+0xac>
 80053b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80053bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053c4:	4333      	orrs	r3, r6
 80053c6:	f000 8580 	beq.w	8005eca <_dtoa_r+0xb8a>
 80053ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053cc:	b953      	cbnz	r3, 80053e4 <_dtoa_r+0xa4>
 80053ce:	4b97      	ldr	r3, [pc, #604]	; (800562c <_dtoa_r+0x2ec>)
 80053d0:	e022      	b.n	8005418 <_dtoa_r+0xd8>
 80053d2:	4b97      	ldr	r3, [pc, #604]	; (8005630 <_dtoa_r+0x2f0>)
 80053d4:	9308      	str	r3, [sp, #32]
 80053d6:	3308      	adds	r3, #8
 80053d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	9808      	ldr	r0, [sp, #32]
 80053de:	b019      	add	sp, #100	; 0x64
 80053e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e4:	4b91      	ldr	r3, [pc, #580]	; (800562c <_dtoa_r+0x2ec>)
 80053e6:	9308      	str	r3, [sp, #32]
 80053e8:	3303      	adds	r3, #3
 80053ea:	e7f5      	b.n	80053d8 <_dtoa_r+0x98>
 80053ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80053f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	f7fb fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8005400:	4680      	mov	r8, r0
 8005402:	b158      	cbz	r0, 800541c <_dtoa_r+0xdc>
 8005404:	2301      	movs	r3, #1
 8005406:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8559 	beq.w	8005ec4 <_dtoa_r+0xb84>
 8005412:	4888      	ldr	r0, [pc, #544]	; (8005634 <_dtoa_r+0x2f4>)
 8005414:	6018      	str	r0, [r3, #0]
 8005416:	1e43      	subs	r3, r0, #1
 8005418:	9308      	str	r3, [sp, #32]
 800541a:	e7df      	b.n	80053dc <_dtoa_r+0x9c>
 800541c:	ab16      	add	r3, sp, #88	; 0x58
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	ab17      	add	r3, sp, #92	; 0x5c
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	4628      	mov	r0, r5
 8005426:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800542a:	f001 fae5 	bl	80069f8 <__d2b>
 800542e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005432:	4682      	mov	sl, r0
 8005434:	2c00      	cmp	r4, #0
 8005436:	d07e      	beq.n	8005536 <_dtoa_r+0x1f6>
 8005438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800543c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800543e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005446:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800544a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800544e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005452:	2200      	movs	r2, #0
 8005454:	4b78      	ldr	r3, [pc, #480]	; (8005638 <_dtoa_r+0x2f8>)
 8005456:	f7fa fe87 	bl	8000168 <__aeabi_dsub>
 800545a:	a36b      	add	r3, pc, #428	; (adr r3, 8005608 <_dtoa_r+0x2c8>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fb f83a 	bl	80004d8 <__aeabi_dmul>
 8005464:	a36a      	add	r3, pc, #424	; (adr r3, 8005610 <_dtoa_r+0x2d0>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	f7fa fe7f 	bl	800016c <__adddf3>
 800546e:	4606      	mov	r6, r0
 8005470:	4620      	mov	r0, r4
 8005472:	460f      	mov	r7, r1
 8005474:	f7fa ffc6 	bl	8000404 <__aeabi_i2d>
 8005478:	a367      	add	r3, pc, #412	; (adr r3, 8005618 <_dtoa_r+0x2d8>)
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f7fb f82b 	bl	80004d8 <__aeabi_dmul>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fa fe6f 	bl	800016c <__adddf3>
 800548e:	4606      	mov	r6, r0
 8005490:	460f      	mov	r7, r1
 8005492:	f7fb fad1 	bl	8000a38 <__aeabi_d2iz>
 8005496:	2200      	movs	r2, #0
 8005498:	4681      	mov	r9, r0
 800549a:	2300      	movs	r3, #0
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb fa8c 	bl	80009bc <__aeabi_dcmplt>
 80054a4:	b148      	cbz	r0, 80054ba <_dtoa_r+0x17a>
 80054a6:	4648      	mov	r0, r9
 80054a8:	f7fa ffac 	bl	8000404 <__aeabi_i2d>
 80054ac:	4632      	mov	r2, r6
 80054ae:	463b      	mov	r3, r7
 80054b0:	f7fb fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80054b4:	b908      	cbnz	r0, 80054ba <_dtoa_r+0x17a>
 80054b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80054ba:	f1b9 0f16 	cmp.w	r9, #22
 80054be:	d857      	bhi.n	8005570 <_dtoa_r+0x230>
 80054c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c4:	4b5d      	ldr	r3, [pc, #372]	; (800563c <_dtoa_r+0x2fc>)
 80054c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fb fa75 	bl	80009bc <__aeabi_dcmplt>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d04e      	beq.n	8005574 <_dtoa_r+0x234>
 80054d6:	2300      	movs	r3, #0
 80054d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80054dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80054de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054e0:	1b1c      	subs	r4, r3, r4
 80054e2:	1e63      	subs	r3, r4, #1
 80054e4:	9309      	str	r3, [sp, #36]	; 0x24
 80054e6:	bf49      	itett	mi
 80054e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80054ec:	2300      	movpl	r3, #0
 80054ee:	9306      	strmi	r3, [sp, #24]
 80054f0:	2300      	movmi	r3, #0
 80054f2:	bf54      	ite	pl
 80054f4:	9306      	strpl	r3, [sp, #24]
 80054f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80054f8:	f1b9 0f00 	cmp.w	r9, #0
 80054fc:	db3c      	blt.n	8005578 <_dtoa_r+0x238>
 80054fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005500:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005504:	444b      	add	r3, r9
 8005506:	9309      	str	r3, [sp, #36]	; 0x24
 8005508:	2300      	movs	r3, #0
 800550a:	930a      	str	r3, [sp, #40]	; 0x28
 800550c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800550e:	2b09      	cmp	r3, #9
 8005510:	d86c      	bhi.n	80055ec <_dtoa_r+0x2ac>
 8005512:	2b05      	cmp	r3, #5
 8005514:	bfc4      	itt	gt
 8005516:	3b04      	subgt	r3, #4
 8005518:	9322      	strgt	r3, [sp, #136]	; 0x88
 800551a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800551c:	bfc8      	it	gt
 800551e:	2400      	movgt	r4, #0
 8005520:	f1a3 0302 	sub.w	r3, r3, #2
 8005524:	bfd8      	it	le
 8005526:	2401      	movle	r4, #1
 8005528:	2b03      	cmp	r3, #3
 800552a:	f200 808b 	bhi.w	8005644 <_dtoa_r+0x304>
 800552e:	e8df f003 	tbb	[pc, r3]
 8005532:	4f2d      	.short	0x4f2d
 8005534:	5b4d      	.short	0x5b4d
 8005536:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800553a:	441c      	add	r4, r3
 800553c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005540:	2b20      	cmp	r3, #32
 8005542:	bfc3      	ittte	gt
 8005544:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005548:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800554c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005550:	f1c3 0320 	rsble	r3, r3, #32
 8005554:	bfc6      	itte	gt
 8005556:	fa26 f000 	lsrgt.w	r0, r6, r0
 800555a:	4318      	orrgt	r0, r3
 800555c:	fa06 f003 	lslle.w	r0, r6, r3
 8005560:	f7fa ff40 	bl	80003e4 <__aeabi_ui2d>
 8005564:	2301      	movs	r3, #1
 8005566:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800556a:	3c01      	subs	r4, #1
 800556c:	9313      	str	r3, [sp, #76]	; 0x4c
 800556e:	e770      	b.n	8005452 <_dtoa_r+0x112>
 8005570:	2301      	movs	r3, #1
 8005572:	e7b3      	b.n	80054dc <_dtoa_r+0x19c>
 8005574:	900f      	str	r0, [sp, #60]	; 0x3c
 8005576:	e7b2      	b.n	80054de <_dtoa_r+0x19e>
 8005578:	9b06      	ldr	r3, [sp, #24]
 800557a:	eba3 0309 	sub.w	r3, r3, r9
 800557e:	9306      	str	r3, [sp, #24]
 8005580:	f1c9 0300 	rsb	r3, r9, #0
 8005584:	930a      	str	r3, [sp, #40]	; 0x28
 8005586:	2300      	movs	r3, #0
 8005588:	930e      	str	r3, [sp, #56]	; 0x38
 800558a:	e7bf      	b.n	800550c <_dtoa_r+0x1cc>
 800558c:	2300      	movs	r3, #0
 800558e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005590:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005592:	2b00      	cmp	r3, #0
 8005594:	dc59      	bgt.n	800564a <_dtoa_r+0x30a>
 8005596:	f04f 0b01 	mov.w	fp, #1
 800559a:	465b      	mov	r3, fp
 800559c:	f8cd b008 	str.w	fp, [sp, #8]
 80055a0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80055a4:	2200      	movs	r2, #0
 80055a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80055a8:	6042      	str	r2, [r0, #4]
 80055aa:	2204      	movs	r2, #4
 80055ac:	f102 0614 	add.w	r6, r2, #20
 80055b0:	429e      	cmp	r6, r3
 80055b2:	6841      	ldr	r1, [r0, #4]
 80055b4:	d94f      	bls.n	8005656 <_dtoa_r+0x316>
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 fef8 	bl	80063ac <_Balloc>
 80055bc:	9008      	str	r0, [sp, #32]
 80055be:	2800      	cmp	r0, #0
 80055c0:	d14d      	bne.n	800565e <_dtoa_r+0x31e>
 80055c2:	4602      	mov	r2, r0
 80055c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <_dtoa_r+0x300>)
 80055ca:	e6cd      	b.n	8005368 <_dtoa_r+0x28>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e7de      	b.n	800558e <_dtoa_r+0x24e>
 80055d0:	2300      	movs	r3, #0
 80055d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80055d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055d6:	eb09 0b03 	add.w	fp, r9, r3
 80055da:	f10b 0301 	add.w	r3, fp, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	9302      	str	r3, [sp, #8]
 80055e2:	bfb8      	it	lt
 80055e4:	2301      	movlt	r3, #1
 80055e6:	e7dd      	b.n	80055a4 <_dtoa_r+0x264>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e7f2      	b.n	80055d2 <_dtoa_r+0x292>
 80055ec:	2401      	movs	r4, #1
 80055ee:	2300      	movs	r3, #0
 80055f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80055f2:	9322      	str	r3, [sp, #136]	; 0x88
 80055f4:	f04f 3bff 	mov.w	fp, #4294967295
 80055f8:	2200      	movs	r2, #0
 80055fa:	2312      	movs	r3, #18
 80055fc:	f8cd b008 	str.w	fp, [sp, #8]
 8005600:	9223      	str	r2, [sp, #140]	; 0x8c
 8005602:	e7cf      	b.n	80055a4 <_dtoa_r+0x264>
 8005604:	f3af 8000 	nop.w
 8005608:	636f4361 	.word	0x636f4361
 800560c:	3fd287a7 	.word	0x3fd287a7
 8005610:	8b60c8b3 	.word	0x8b60c8b3
 8005614:	3fc68a28 	.word	0x3fc68a28
 8005618:	509f79fb 	.word	0x509f79fb
 800561c:	3fd34413 	.word	0x3fd34413
 8005620:	080077fd 	.word	0x080077fd
 8005624:	08007814 	.word	0x08007814
 8005628:	7ff00000 	.word	0x7ff00000
 800562c:	080077f9 	.word	0x080077f9
 8005630:	080077f0 	.word	0x080077f0
 8005634:	080077cd 	.word	0x080077cd
 8005638:	3ff80000 	.word	0x3ff80000
 800563c:	08007970 	.word	0x08007970
 8005640:	08007873 	.word	0x08007873
 8005644:	2301      	movs	r3, #1
 8005646:	930b      	str	r3, [sp, #44]	; 0x2c
 8005648:	e7d4      	b.n	80055f4 <_dtoa_r+0x2b4>
 800564a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800564e:	465b      	mov	r3, fp
 8005650:	f8cd b008 	str.w	fp, [sp, #8]
 8005654:	e7a6      	b.n	80055a4 <_dtoa_r+0x264>
 8005656:	3101      	adds	r1, #1
 8005658:	6041      	str	r1, [r0, #4]
 800565a:	0052      	lsls	r2, r2, #1
 800565c:	e7a6      	b.n	80055ac <_dtoa_r+0x26c>
 800565e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005660:	9a08      	ldr	r2, [sp, #32]
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	9b02      	ldr	r3, [sp, #8]
 8005666:	2b0e      	cmp	r3, #14
 8005668:	f200 80a8 	bhi.w	80057bc <_dtoa_r+0x47c>
 800566c:	2c00      	cmp	r4, #0
 800566e:	f000 80a5 	beq.w	80057bc <_dtoa_r+0x47c>
 8005672:	f1b9 0f00 	cmp.w	r9, #0
 8005676:	dd34      	ble.n	80056e2 <_dtoa_r+0x3a2>
 8005678:	4a9a      	ldr	r2, [pc, #616]	; (80058e4 <_dtoa_r+0x5a4>)
 800567a:	f009 030f 	and.w	r3, r9, #15
 800567e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005682:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800568a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800568e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005692:	d016      	beq.n	80056c2 <_dtoa_r+0x382>
 8005694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005698:	4b93      	ldr	r3, [pc, #588]	; (80058e8 <_dtoa_r+0x5a8>)
 800569a:	2703      	movs	r7, #3
 800569c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056a0:	f7fb f844 	bl	800072c <__aeabi_ddiv>
 80056a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056a8:	f004 040f 	and.w	r4, r4, #15
 80056ac:	4e8e      	ldr	r6, [pc, #568]	; (80058e8 <_dtoa_r+0x5a8>)
 80056ae:	b954      	cbnz	r4, 80056c6 <_dtoa_r+0x386>
 80056b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b8:	f7fb f838 	bl	800072c <__aeabi_ddiv>
 80056bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056c0:	e029      	b.n	8005716 <_dtoa_r+0x3d6>
 80056c2:	2702      	movs	r7, #2
 80056c4:	e7f2      	b.n	80056ac <_dtoa_r+0x36c>
 80056c6:	07e1      	lsls	r1, r4, #31
 80056c8:	d508      	bpl.n	80056dc <_dtoa_r+0x39c>
 80056ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056d2:	f7fa ff01 	bl	80004d8 <__aeabi_dmul>
 80056d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056da:	3701      	adds	r7, #1
 80056dc:	1064      	asrs	r4, r4, #1
 80056de:	3608      	adds	r6, #8
 80056e0:	e7e5      	b.n	80056ae <_dtoa_r+0x36e>
 80056e2:	f000 80a5 	beq.w	8005830 <_dtoa_r+0x4f0>
 80056e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ea:	f1c9 0400 	rsb	r4, r9, #0
 80056ee:	4b7d      	ldr	r3, [pc, #500]	; (80058e4 <_dtoa_r+0x5a4>)
 80056f0:	f004 020f 	and.w	r2, r4, #15
 80056f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa feec 	bl	80004d8 <__aeabi_dmul>
 8005700:	2702      	movs	r7, #2
 8005702:	2300      	movs	r3, #0
 8005704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005708:	4e77      	ldr	r6, [pc, #476]	; (80058e8 <_dtoa_r+0x5a8>)
 800570a:	1124      	asrs	r4, r4, #4
 800570c:	2c00      	cmp	r4, #0
 800570e:	f040 8084 	bne.w	800581a <_dtoa_r+0x4da>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1d2      	bne.n	80056bc <_dtoa_r+0x37c>
 8005716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 808b 	beq.w	8005834 <_dtoa_r+0x4f4>
 800571e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005722:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800572a:	2200      	movs	r2, #0
 800572c:	4b6f      	ldr	r3, [pc, #444]	; (80058ec <_dtoa_r+0x5ac>)
 800572e:	f7fb f945 	bl	80009bc <__aeabi_dcmplt>
 8005732:	2800      	cmp	r0, #0
 8005734:	d07e      	beq.n	8005834 <_dtoa_r+0x4f4>
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d07b      	beq.n	8005834 <_dtoa_r+0x4f4>
 800573c:	f1bb 0f00 	cmp.w	fp, #0
 8005740:	dd38      	ble.n	80057b4 <_dtoa_r+0x474>
 8005742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005746:	2200      	movs	r2, #0
 8005748:	4b69      	ldr	r3, [pc, #420]	; (80058f0 <_dtoa_r+0x5b0>)
 800574a:	f7fa fec5 	bl	80004d8 <__aeabi_dmul>
 800574e:	465c      	mov	r4, fp
 8005750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005754:	f109 38ff 	add.w	r8, r9, #4294967295
 8005758:	3701      	adds	r7, #1
 800575a:	4638      	mov	r0, r7
 800575c:	f7fa fe52 	bl	8000404 <__aeabi_i2d>
 8005760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005764:	f7fa feb8 	bl	80004d8 <__aeabi_dmul>
 8005768:	2200      	movs	r2, #0
 800576a:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <_dtoa_r+0x5b4>)
 800576c:	f7fa fcfe 	bl	800016c <__adddf3>
 8005770:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005774:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005778:	9611      	str	r6, [sp, #68]	; 0x44
 800577a:	2c00      	cmp	r4, #0
 800577c:	d15d      	bne.n	800583a <_dtoa_r+0x4fa>
 800577e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005782:	2200      	movs	r2, #0
 8005784:	4b5c      	ldr	r3, [pc, #368]	; (80058f8 <_dtoa_r+0x5b8>)
 8005786:	f7fa fcef 	bl	8000168 <__aeabi_dsub>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005792:	4633      	mov	r3, r6
 8005794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005796:	f7fb f92f 	bl	80009f8 <__aeabi_dcmpgt>
 800579a:	2800      	cmp	r0, #0
 800579c:	f040 829e 	bne.w	8005cdc <_dtoa_r+0x99c>
 80057a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057aa:	f7fb f907 	bl	80009bc <__aeabi_dcmplt>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f040 8292 	bne.w	8005cd8 <_dtoa_r+0x998>
 80057b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80057b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f2c0 8153 	blt.w	8005a6a <_dtoa_r+0x72a>
 80057c4:	f1b9 0f0e 	cmp.w	r9, #14
 80057c8:	f300 814f 	bgt.w	8005a6a <_dtoa_r+0x72a>
 80057cc:	4b45      	ldr	r3, [pc, #276]	; (80058e4 <_dtoa_r+0x5a4>)
 80057ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80057d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80057da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f280 80db 	bge.w	8005998 <_dtoa_r+0x658>
 80057e2:	9b02      	ldr	r3, [sp, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f300 80d7 	bgt.w	8005998 <_dtoa_r+0x658>
 80057ea:	f040 8274 	bne.w	8005cd6 <_dtoa_r+0x996>
 80057ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057f2:	2200      	movs	r2, #0
 80057f4:	4b40      	ldr	r3, [pc, #256]	; (80058f8 <_dtoa_r+0x5b8>)
 80057f6:	f7fa fe6f 	bl	80004d8 <__aeabi_dmul>
 80057fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057fe:	f7fb f8f1 	bl	80009e4 <__aeabi_dcmpge>
 8005802:	9c02      	ldr	r4, [sp, #8]
 8005804:	4626      	mov	r6, r4
 8005806:	2800      	cmp	r0, #0
 8005808:	f040 824a 	bne.w	8005ca0 <_dtoa_r+0x960>
 800580c:	2331      	movs	r3, #49	; 0x31
 800580e:	9f08      	ldr	r7, [sp, #32]
 8005810:	f109 0901 	add.w	r9, r9, #1
 8005814:	f807 3b01 	strb.w	r3, [r7], #1
 8005818:	e246      	b.n	8005ca8 <_dtoa_r+0x968>
 800581a:	07e2      	lsls	r2, r4, #31
 800581c:	d505      	bpl.n	800582a <_dtoa_r+0x4ea>
 800581e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005822:	f7fa fe59 	bl	80004d8 <__aeabi_dmul>
 8005826:	2301      	movs	r3, #1
 8005828:	3701      	adds	r7, #1
 800582a:	1064      	asrs	r4, r4, #1
 800582c:	3608      	adds	r6, #8
 800582e:	e76d      	b.n	800570c <_dtoa_r+0x3cc>
 8005830:	2702      	movs	r7, #2
 8005832:	e770      	b.n	8005716 <_dtoa_r+0x3d6>
 8005834:	46c8      	mov	r8, r9
 8005836:	9c02      	ldr	r4, [sp, #8]
 8005838:	e78f      	b.n	800575a <_dtoa_r+0x41a>
 800583a:	9908      	ldr	r1, [sp, #32]
 800583c:	4b29      	ldr	r3, [pc, #164]	; (80058e4 <_dtoa_r+0x5a4>)
 800583e:	4421      	add	r1, r4
 8005840:	9112      	str	r1, [sp, #72]	; 0x48
 8005842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005844:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005848:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800584c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005850:	2900      	cmp	r1, #0
 8005852:	d055      	beq.n	8005900 <_dtoa_r+0x5c0>
 8005854:	2000      	movs	r0, #0
 8005856:	4929      	ldr	r1, [pc, #164]	; (80058fc <_dtoa_r+0x5bc>)
 8005858:	f7fa ff68 	bl	800072c <__aeabi_ddiv>
 800585c:	463b      	mov	r3, r7
 800585e:	4632      	mov	r2, r6
 8005860:	f7fa fc82 	bl	8000168 <__aeabi_dsub>
 8005864:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005868:	9f08      	ldr	r7, [sp, #32]
 800586a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800586e:	f7fb f8e3 	bl	8000a38 <__aeabi_d2iz>
 8005872:	4604      	mov	r4, r0
 8005874:	f7fa fdc6 	bl	8000404 <__aeabi_i2d>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005880:	f7fa fc72 	bl	8000168 <__aeabi_dsub>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	3430      	adds	r4, #48	; 0x30
 800588a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800588e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005892:	f807 4b01 	strb.w	r4, [r7], #1
 8005896:	f7fb f891 	bl	80009bc <__aeabi_dcmplt>
 800589a:	2800      	cmp	r0, #0
 800589c:	d174      	bne.n	8005988 <_dtoa_r+0x648>
 800589e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a2:	2000      	movs	r0, #0
 80058a4:	4911      	ldr	r1, [pc, #68]	; (80058ec <_dtoa_r+0x5ac>)
 80058a6:	f7fa fc5f 	bl	8000168 <__aeabi_dsub>
 80058aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058ae:	f7fb f885 	bl	80009bc <__aeabi_dcmplt>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f040 80b6 	bne.w	8005a24 <_dtoa_r+0x6e4>
 80058b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058ba:	429f      	cmp	r7, r3
 80058bc:	f43f af7a 	beq.w	80057b4 <_dtoa_r+0x474>
 80058c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058c4:	2200      	movs	r2, #0
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <_dtoa_r+0x5b0>)
 80058c8:	f7fa fe06 	bl	80004d8 <__aeabi_dmul>
 80058cc:	2200      	movs	r2, #0
 80058ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <_dtoa_r+0x5b0>)
 80058d8:	f7fa fdfe 	bl	80004d8 <__aeabi_dmul>
 80058dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058e0:	e7c3      	b.n	800586a <_dtoa_r+0x52a>
 80058e2:	bf00      	nop
 80058e4:	08007970 	.word	0x08007970
 80058e8:	08007948 	.word	0x08007948
 80058ec:	3ff00000 	.word	0x3ff00000
 80058f0:	40240000 	.word	0x40240000
 80058f4:	401c0000 	.word	0x401c0000
 80058f8:	40140000 	.word	0x40140000
 80058fc:	3fe00000 	.word	0x3fe00000
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	f7fa fde8 	bl	80004d8 <__aeabi_dmul>
 8005908:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800590a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800590e:	9c08      	ldr	r4, [sp, #32]
 8005910:	9314      	str	r3, [sp, #80]	; 0x50
 8005912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005916:	f7fb f88f 	bl	8000a38 <__aeabi_d2iz>
 800591a:	9015      	str	r0, [sp, #84]	; 0x54
 800591c:	f7fa fd72 	bl	8000404 <__aeabi_i2d>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005928:	f7fa fc1e 	bl	8000168 <__aeabi_dsub>
 800592c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800592e:	4606      	mov	r6, r0
 8005930:	3330      	adds	r3, #48	; 0x30
 8005932:	f804 3b01 	strb.w	r3, [r4], #1
 8005936:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005938:	460f      	mov	r7, r1
 800593a:	429c      	cmp	r4, r3
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	d124      	bne.n	800598c <_dtoa_r+0x64c>
 8005942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005946:	4bb3      	ldr	r3, [pc, #716]	; (8005c14 <_dtoa_r+0x8d4>)
 8005948:	f7fa fc10 	bl	800016c <__adddf3>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fb f850 	bl	80009f8 <__aeabi_dcmpgt>
 8005958:	2800      	cmp	r0, #0
 800595a:	d162      	bne.n	8005a22 <_dtoa_r+0x6e2>
 800595c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005960:	2000      	movs	r0, #0
 8005962:	49ac      	ldr	r1, [pc, #688]	; (8005c14 <_dtoa_r+0x8d4>)
 8005964:	f7fa fc00 	bl	8000168 <__aeabi_dsub>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4630      	mov	r0, r6
 800596e:	4639      	mov	r1, r7
 8005970:	f7fb f824 	bl	80009bc <__aeabi_dcmplt>
 8005974:	2800      	cmp	r0, #0
 8005976:	f43f af1d 	beq.w	80057b4 <_dtoa_r+0x474>
 800597a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800597c:	1e7b      	subs	r3, r7, #1
 800597e:	9314      	str	r3, [sp, #80]	; 0x50
 8005980:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005984:	2b30      	cmp	r3, #48	; 0x30
 8005986:	d0f8      	beq.n	800597a <_dtoa_r+0x63a>
 8005988:	46c1      	mov	r9, r8
 800598a:	e03a      	b.n	8005a02 <_dtoa_r+0x6c2>
 800598c:	4ba2      	ldr	r3, [pc, #648]	; (8005c18 <_dtoa_r+0x8d8>)
 800598e:	f7fa fda3 	bl	80004d8 <__aeabi_dmul>
 8005992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005996:	e7bc      	b.n	8005912 <_dtoa_r+0x5d2>
 8005998:	9f08      	ldr	r7, [sp, #32]
 800599a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800599e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059a2:	f7fa fec3 	bl	800072c <__aeabi_ddiv>
 80059a6:	f7fb f847 	bl	8000a38 <__aeabi_d2iz>
 80059aa:	4604      	mov	r4, r0
 80059ac:	f7fa fd2a 	bl	8000404 <__aeabi_i2d>
 80059b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059b4:	f7fa fd90 	bl	80004d8 <__aeabi_dmul>
 80059b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80059bc:	460b      	mov	r3, r1
 80059be:	4602      	mov	r2, r0
 80059c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c4:	f7fa fbd0 	bl	8000168 <__aeabi_dsub>
 80059c8:	f807 6b01 	strb.w	r6, [r7], #1
 80059cc:	9e08      	ldr	r6, [sp, #32]
 80059ce:	9b02      	ldr	r3, [sp, #8]
 80059d0:	1bbe      	subs	r6, r7, r6
 80059d2:	42b3      	cmp	r3, r6
 80059d4:	d13a      	bne.n	8005a4c <_dtoa_r+0x70c>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	f7fa fbc7 	bl	800016c <__adddf3>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059ea:	f7fb f805 	bl	80009f8 <__aeabi_dcmpgt>
 80059ee:	bb58      	cbnz	r0, 8005a48 <_dtoa_r+0x708>
 80059f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f8:	f7fa ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80059fc:	b108      	cbz	r0, 8005a02 <_dtoa_r+0x6c2>
 80059fe:	07e1      	lsls	r1, r4, #31
 8005a00:	d422      	bmi.n	8005a48 <_dtoa_r+0x708>
 8005a02:	4628      	mov	r0, r5
 8005a04:	4651      	mov	r1, sl
 8005a06:	f000 fd11 	bl	800642c <_Bfree>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	703b      	strb	r3, [r7, #0]
 8005a0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a10:	f109 0001 	add.w	r0, r9, #1
 8005a14:	6018      	str	r0, [r3, #0]
 8005a16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f43f acdf 	beq.w	80053dc <_dtoa_r+0x9c>
 8005a1e:	601f      	str	r7, [r3, #0]
 8005a20:	e4dc      	b.n	80053dc <_dtoa_r+0x9c>
 8005a22:	4627      	mov	r7, r4
 8005a24:	463b      	mov	r3, r7
 8005a26:	461f      	mov	r7, r3
 8005a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a2c:	2a39      	cmp	r2, #57	; 0x39
 8005a2e:	d107      	bne.n	8005a40 <_dtoa_r+0x700>
 8005a30:	9a08      	ldr	r2, [sp, #32]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d1f7      	bne.n	8005a26 <_dtoa_r+0x6e6>
 8005a36:	2230      	movs	r2, #48	; 0x30
 8005a38:	9908      	ldr	r1, [sp, #32]
 8005a3a:	f108 0801 	add.w	r8, r8, #1
 8005a3e:	700a      	strb	r2, [r1, #0]
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	3201      	adds	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	e79f      	b.n	8005988 <_dtoa_r+0x648>
 8005a48:	46c8      	mov	r8, r9
 8005a4a:	e7eb      	b.n	8005a24 <_dtoa_r+0x6e4>
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4b72      	ldr	r3, [pc, #456]	; (8005c18 <_dtoa_r+0x8d8>)
 8005a50:	f7fa fd42 	bl	80004d8 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f7fa ffa2 	bl	80009a8 <__aeabi_dcmpeq>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d098      	beq.n	800599a <_dtoa_r+0x65a>
 8005a68:	e7cb      	b.n	8005a02 <_dtoa_r+0x6c2>
 8005a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a6c:	2a00      	cmp	r2, #0
 8005a6e:	f000 80cd 	beq.w	8005c0c <_dtoa_r+0x8cc>
 8005a72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a74:	2a01      	cmp	r2, #1
 8005a76:	f300 80af 	bgt.w	8005bd8 <_dtoa_r+0x898>
 8005a7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	f000 80a7 	beq.w	8005bd0 <_dtoa_r+0x890>
 8005a82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a88:	9f06      	ldr	r7, [sp, #24]
 8005a8a:	9a06      	ldr	r2, [sp, #24]
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	441a      	add	r2, r3
 8005a90:	9206      	str	r2, [sp, #24]
 8005a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a94:	4628      	mov	r0, r5
 8005a96:	441a      	add	r2, r3
 8005a98:	9209      	str	r2, [sp, #36]	; 0x24
 8005a9a:	f000 fd81 	bl	80065a0 <__i2b>
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	2f00      	cmp	r7, #0
 8005aa2:	dd0c      	ble.n	8005abe <_dtoa_r+0x77e>
 8005aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	dd09      	ble.n	8005abe <_dtoa_r+0x77e>
 8005aaa:	42bb      	cmp	r3, r7
 8005aac:	bfa8      	it	ge
 8005aae:	463b      	movge	r3, r7
 8005ab0:	9a06      	ldr	r2, [sp, #24]
 8005ab2:	1aff      	subs	r7, r7, r3
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	9206      	str	r2, [sp, #24]
 8005ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	9309      	str	r3, [sp, #36]	; 0x24
 8005abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac0:	b1f3      	cbz	r3, 8005b00 <_dtoa_r+0x7c0>
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80a9 	beq.w	8005c1c <_dtoa_r+0x8dc>
 8005aca:	2c00      	cmp	r4, #0
 8005acc:	dd10      	ble.n	8005af0 <_dtoa_r+0x7b0>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 fe1e 	bl	8006714 <__pow5mult>
 8005ad8:	4652      	mov	r2, sl
 8005ada:	4601      	mov	r1, r0
 8005adc:	4606      	mov	r6, r0
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fd74 	bl	80065cc <__multiply>
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 fc9f 	bl	800642c <_Bfree>
 8005aee:	46c2      	mov	sl, r8
 8005af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af2:	1b1a      	subs	r2, r3, r4
 8005af4:	d004      	beq.n	8005b00 <_dtoa_r+0x7c0>
 8005af6:	4651      	mov	r1, sl
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 fe0b 	bl	8006714 <__pow5mult>
 8005afe:	4682      	mov	sl, r0
 8005b00:	2101      	movs	r1, #1
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fd4c 	bl	80065a0 <__i2b>
 8005b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f340 8087 	ble.w	8005c20 <_dtoa_r+0x8e0>
 8005b12:	461a      	mov	r2, r3
 8005b14:	4601      	mov	r1, r0
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 fdfc 	bl	8006714 <__pow5mult>
 8005b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b1e:	4604      	mov	r4, r0
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f340 8080 	ble.w	8005c26 <_dtoa_r+0x8e6>
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b30:	6918      	ldr	r0, [r3, #16]
 8005b32:	f000 fce7 	bl	8006504 <__hi0bits>
 8005b36:	f1c0 0020 	rsb	r0, r0, #32
 8005b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3c:	4418      	add	r0, r3
 8005b3e:	f010 001f 	ands.w	r0, r0, #31
 8005b42:	f000 8092 	beq.w	8005c6a <_dtoa_r+0x92a>
 8005b46:	f1c0 0320 	rsb	r3, r0, #32
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	f340 808a 	ble.w	8005c64 <_dtoa_r+0x924>
 8005b50:	f1c0 001c 	rsb	r0, r0, #28
 8005b54:	9b06      	ldr	r3, [sp, #24]
 8005b56:	4407      	add	r7, r0
 8005b58:	4403      	add	r3, r0
 8005b5a:	9306      	str	r3, [sp, #24]
 8005b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5e:	4403      	add	r3, r0
 8005b60:	9309      	str	r3, [sp, #36]	; 0x24
 8005b62:	9b06      	ldr	r3, [sp, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dd05      	ble.n	8005b74 <_dtoa_r+0x834>
 8005b68:	4651      	mov	r1, sl
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 fe2b 	bl	80067c8 <__lshift>
 8005b72:	4682      	mov	sl, r0
 8005b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dd05      	ble.n	8005b86 <_dtoa_r+0x846>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 fe22 	bl	80067c8 <__lshift>
 8005b84:	4604      	mov	r4, r0
 8005b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d070      	beq.n	8005c6e <_dtoa_r+0x92e>
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	4650      	mov	r0, sl
 8005b90:	f000 fe86 	bl	80068a0 <__mcmp>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	da6a      	bge.n	8005c6e <_dtoa_r+0x92e>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	220a      	movs	r2, #10
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fc66 	bl	8006470 <__multadd>
 8005ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba6:	4682      	mov	sl, r0
 8005ba8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8193 	beq.w	8005ed8 <_dtoa_r+0xb98>
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	220a      	movs	r2, #10
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 fc59 	bl	8006470 <__multadd>
 8005bbe:	f1bb 0f00 	cmp.w	fp, #0
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	f300 8093 	bgt.w	8005cee <_dtoa_r+0x9ae>
 8005bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	dc57      	bgt.n	8005c7e <_dtoa_r+0x93e>
 8005bce:	e08e      	b.n	8005cee <_dtoa_r+0x9ae>
 8005bd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bd6:	e756      	b.n	8005a86 <_dtoa_r+0x746>
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	1e5c      	subs	r4, r3, #1
 8005bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bde:	42a3      	cmp	r3, r4
 8005be0:	bfb7      	itett	lt
 8005be2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005be4:	1b1c      	subge	r4, r3, r4
 8005be6:	1ae2      	sublt	r2, r4, r3
 8005be8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005bea:	bfbe      	ittt	lt
 8005bec:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005bee:	189b      	addlt	r3, r3, r2
 8005bf0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005bf2:	9b02      	ldr	r3, [sp, #8]
 8005bf4:	bfb8      	it	lt
 8005bf6:	2400      	movlt	r4, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bfbb      	ittet	lt
 8005bfc:	9b06      	ldrlt	r3, [sp, #24]
 8005bfe:	9a02      	ldrlt	r2, [sp, #8]
 8005c00:	9f06      	ldrge	r7, [sp, #24]
 8005c02:	1a9f      	sublt	r7, r3, r2
 8005c04:	bfac      	ite	ge
 8005c06:	9b02      	ldrge	r3, [sp, #8]
 8005c08:	2300      	movlt	r3, #0
 8005c0a:	e73e      	b.n	8005a8a <_dtoa_r+0x74a>
 8005c0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c0e:	9f06      	ldr	r7, [sp, #24]
 8005c10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c12:	e745      	b.n	8005aa0 <_dtoa_r+0x760>
 8005c14:	3fe00000 	.word	0x3fe00000
 8005c18:	40240000 	.word	0x40240000
 8005c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c1e:	e76a      	b.n	8005af6 <_dtoa_r+0x7b6>
 8005c20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	dc19      	bgt.n	8005c5a <_dtoa_r+0x91a>
 8005c26:	9b04      	ldr	r3, [sp, #16]
 8005c28:	b9bb      	cbnz	r3, 8005c5a <_dtoa_r+0x91a>
 8005c2a:	9b05      	ldr	r3, [sp, #20]
 8005c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c30:	b99b      	cbnz	r3, 8005c5a <_dtoa_r+0x91a>
 8005c32:	9b05      	ldr	r3, [sp, #20]
 8005c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	0d1b      	lsrs	r3, r3, #20
 8005c3a:	051b      	lsls	r3, r3, #20
 8005c3c:	b183      	cbz	r3, 8005c60 <_dtoa_r+0x920>
 8005c3e:	f04f 0801 	mov.w	r8, #1
 8005c42:	9b06      	ldr	r3, [sp, #24]
 8005c44:	3301      	adds	r3, #1
 8005c46:	9306      	str	r3, [sp, #24]
 8005c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f47f af6a 	bne.w	8005b2a <_dtoa_r+0x7ea>
 8005c56:	2001      	movs	r0, #1
 8005c58:	e76f      	b.n	8005b3a <_dtoa_r+0x7fa>
 8005c5a:	f04f 0800 	mov.w	r8, #0
 8005c5e:	e7f6      	b.n	8005c4e <_dtoa_r+0x90e>
 8005c60:	4698      	mov	r8, r3
 8005c62:	e7f4      	b.n	8005c4e <_dtoa_r+0x90e>
 8005c64:	f43f af7d 	beq.w	8005b62 <_dtoa_r+0x822>
 8005c68:	4618      	mov	r0, r3
 8005c6a:	301c      	adds	r0, #28
 8005c6c:	e772      	b.n	8005b54 <_dtoa_r+0x814>
 8005c6e:	9b02      	ldr	r3, [sp, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dc36      	bgt.n	8005ce2 <_dtoa_r+0x9a2>
 8005c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	dd33      	ble.n	8005ce2 <_dtoa_r+0x9a2>
 8005c7a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c7e:	f1bb 0f00 	cmp.w	fp, #0
 8005c82:	d10d      	bne.n	8005ca0 <_dtoa_r+0x960>
 8005c84:	4621      	mov	r1, r4
 8005c86:	465b      	mov	r3, fp
 8005c88:	2205      	movs	r2, #5
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 fbf0 	bl	8006470 <__multadd>
 8005c90:	4601      	mov	r1, r0
 8005c92:	4604      	mov	r4, r0
 8005c94:	4650      	mov	r0, sl
 8005c96:	f000 fe03 	bl	80068a0 <__mcmp>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f73f adb6 	bgt.w	800580c <_dtoa_r+0x4cc>
 8005ca0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ca2:	9f08      	ldr	r7, [sp, #32]
 8005ca4:	ea6f 0903 	mvn.w	r9, r3
 8005ca8:	f04f 0800 	mov.w	r8, #0
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 fbbc 	bl	800642c <_Bfree>
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	f43f aea4 	beq.w	8005a02 <_dtoa_r+0x6c2>
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	d005      	beq.n	8005ccc <_dtoa_r+0x98c>
 8005cc0:	45b0      	cmp	r8, r6
 8005cc2:	d003      	beq.n	8005ccc <_dtoa_r+0x98c>
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 fbb0 	bl	800642c <_Bfree>
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 fbac 	bl	800642c <_Bfree>
 8005cd4:	e695      	b.n	8005a02 <_dtoa_r+0x6c2>
 8005cd6:	2400      	movs	r4, #0
 8005cd8:	4626      	mov	r6, r4
 8005cda:	e7e1      	b.n	8005ca0 <_dtoa_r+0x960>
 8005cdc:	46c1      	mov	r9, r8
 8005cde:	4626      	mov	r6, r4
 8005ce0:	e594      	b.n	800580c <_dtoa_r+0x4cc>
 8005ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80fc 	beq.w	8005ee6 <_dtoa_r+0xba6>
 8005cee:	2f00      	cmp	r7, #0
 8005cf0:	dd05      	ble.n	8005cfe <_dtoa_r+0x9be>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	463a      	mov	r2, r7
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 fd66 	bl	80067c8 <__lshift>
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	f1b8 0f00 	cmp.w	r8, #0
 8005d02:	d05c      	beq.n	8005dbe <_dtoa_r+0xa7e>
 8005d04:	4628      	mov	r0, r5
 8005d06:	6871      	ldr	r1, [r6, #4]
 8005d08:	f000 fb50 	bl	80063ac <_Balloc>
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	b928      	cbnz	r0, 8005d1c <_dtoa_r+0x9dc>
 8005d10:	4602      	mov	r2, r0
 8005d12:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d16:	4b7e      	ldr	r3, [pc, #504]	; (8005f10 <_dtoa_r+0xbd0>)
 8005d18:	f7ff bb26 	b.w	8005368 <_dtoa_r+0x28>
 8005d1c:	6932      	ldr	r2, [r6, #16]
 8005d1e:	f106 010c 	add.w	r1, r6, #12
 8005d22:	3202      	adds	r2, #2
 8005d24:	0092      	lsls	r2, r2, #2
 8005d26:	300c      	adds	r0, #12
 8005d28:	f000 fb32 	bl	8006390 <memcpy>
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4639      	mov	r1, r7
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 fd49 	bl	80067c8 <__lshift>
 8005d36:	46b0      	mov	r8, r6
 8005d38:	4606      	mov	r6, r0
 8005d3a:	9b08      	ldr	r3, [sp, #32]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	9302      	str	r3, [sp, #8]
 8005d40:	9b08      	ldr	r3, [sp, #32]
 8005d42:	445b      	add	r3, fp
 8005d44:	930a      	str	r3, [sp, #40]	; 0x28
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4e:	9b02      	ldr	r3, [sp, #8]
 8005d50:	4621      	mov	r1, r4
 8005d52:	4650      	mov	r0, sl
 8005d54:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d58:	f7ff fa64 	bl	8005224 <quorem>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4641      	mov	r1, r8
 8005d60:	3330      	adds	r3, #48	; 0x30
 8005d62:	9004      	str	r0, [sp, #16]
 8005d64:	4650      	mov	r0, sl
 8005d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d68:	f000 fd9a 	bl	80068a0 <__mcmp>
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	9006      	str	r0, [sp, #24]
 8005d70:	4621      	mov	r1, r4
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 fdb0 	bl	80068d8 <__mdiff>
 8005d78:	68c2      	ldr	r2, [r0, #12]
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d7e:	bb02      	cbnz	r2, 8005dc2 <_dtoa_r+0xa82>
 8005d80:	4601      	mov	r1, r0
 8005d82:	4650      	mov	r0, sl
 8005d84:	f000 fd8c 	bl	80068a0 <__mcmp>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	4628      	mov	r0, r5
 8005d90:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005d94:	f000 fb4a 	bl	800642c <_Bfree>
 8005d98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d9c:	9f02      	ldr	r7, [sp, #8]
 8005d9e:	ea43 0102 	orr.w	r1, r3, r2
 8005da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da4:	430b      	orrs	r3, r1
 8005da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da8:	d10d      	bne.n	8005dc6 <_dtoa_r+0xa86>
 8005daa:	2b39      	cmp	r3, #57	; 0x39
 8005dac:	d027      	beq.n	8005dfe <_dtoa_r+0xabe>
 8005dae:	9a06      	ldr	r2, [sp, #24]
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	dd01      	ble.n	8005db8 <_dtoa_r+0xa78>
 8005db4:	9b04      	ldr	r3, [sp, #16]
 8005db6:	3331      	adds	r3, #49	; 0x31
 8005db8:	f88b 3000 	strb.w	r3, [fp]
 8005dbc:	e776      	b.n	8005cac <_dtoa_r+0x96c>
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	e7b9      	b.n	8005d36 <_dtoa_r+0x9f6>
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	e7e2      	b.n	8005d8c <_dtoa_r+0xa4c>
 8005dc6:	9906      	ldr	r1, [sp, #24]
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	db04      	blt.n	8005dd6 <_dtoa_r+0xa96>
 8005dcc:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005dce:	4301      	orrs	r1, r0
 8005dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dd2:	4301      	orrs	r1, r0
 8005dd4:	d120      	bne.n	8005e18 <_dtoa_r+0xad8>
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	ddee      	ble.n	8005db8 <_dtoa_r+0xa78>
 8005dda:	4651      	mov	r1, sl
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4628      	mov	r0, r5
 8005de0:	9302      	str	r3, [sp, #8]
 8005de2:	f000 fcf1 	bl	80067c8 <__lshift>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4682      	mov	sl, r0
 8005dea:	f000 fd59 	bl	80068a0 <__mcmp>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	dc02      	bgt.n	8005dfa <_dtoa_r+0xaba>
 8005df4:	d1e0      	bne.n	8005db8 <_dtoa_r+0xa78>
 8005df6:	07da      	lsls	r2, r3, #31
 8005df8:	d5de      	bpl.n	8005db8 <_dtoa_r+0xa78>
 8005dfa:	2b39      	cmp	r3, #57	; 0x39
 8005dfc:	d1da      	bne.n	8005db4 <_dtoa_r+0xa74>
 8005dfe:	2339      	movs	r3, #57	; 0x39
 8005e00:	f88b 3000 	strb.w	r3, [fp]
 8005e04:	463b      	mov	r3, r7
 8005e06:	461f      	mov	r7, r3
 8005e08:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	2a39      	cmp	r2, #57	; 0x39
 8005e10:	d050      	beq.n	8005eb4 <_dtoa_r+0xb74>
 8005e12:	3201      	adds	r2, #1
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e749      	b.n	8005cac <_dtoa_r+0x96c>
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	dd03      	ble.n	8005e24 <_dtoa_r+0xae4>
 8005e1c:	2b39      	cmp	r3, #57	; 0x39
 8005e1e:	d0ee      	beq.n	8005dfe <_dtoa_r+0xabe>
 8005e20:	3301      	adds	r3, #1
 8005e22:	e7c9      	b.n	8005db8 <_dtoa_r+0xa78>
 8005e24:	9a02      	ldr	r2, [sp, #8]
 8005e26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e2c:	428a      	cmp	r2, r1
 8005e2e:	d02a      	beq.n	8005e86 <_dtoa_r+0xb46>
 8005e30:	4651      	mov	r1, sl
 8005e32:	2300      	movs	r3, #0
 8005e34:	220a      	movs	r2, #10
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fb1a 	bl	8006470 <__multadd>
 8005e3c:	45b0      	cmp	r8, r6
 8005e3e:	4682      	mov	sl, r0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	f04f 020a 	mov.w	r2, #10
 8005e48:	4641      	mov	r1, r8
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	d107      	bne.n	8005e5e <_dtoa_r+0xb1e>
 8005e4e:	f000 fb0f 	bl	8006470 <__multadd>
 8005e52:	4680      	mov	r8, r0
 8005e54:	4606      	mov	r6, r0
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	9302      	str	r3, [sp, #8]
 8005e5c:	e777      	b.n	8005d4e <_dtoa_r+0xa0e>
 8005e5e:	f000 fb07 	bl	8006470 <__multadd>
 8005e62:	4631      	mov	r1, r6
 8005e64:	4680      	mov	r8, r0
 8005e66:	2300      	movs	r3, #0
 8005e68:	220a      	movs	r2, #10
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fb00 	bl	8006470 <__multadd>
 8005e70:	4606      	mov	r6, r0
 8005e72:	e7f0      	b.n	8005e56 <_dtoa_r+0xb16>
 8005e74:	f1bb 0f00 	cmp.w	fp, #0
 8005e78:	bfcc      	ite	gt
 8005e7a:	465f      	movgt	r7, fp
 8005e7c:	2701      	movle	r7, #1
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	9a08      	ldr	r2, [sp, #32]
 8005e84:	4417      	add	r7, r2
 8005e86:	4651      	mov	r1, sl
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	9302      	str	r3, [sp, #8]
 8005e8e:	f000 fc9b 	bl	80067c8 <__lshift>
 8005e92:	4621      	mov	r1, r4
 8005e94:	4682      	mov	sl, r0
 8005e96:	f000 fd03 	bl	80068a0 <__mcmp>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	dcb2      	bgt.n	8005e04 <_dtoa_r+0xac4>
 8005e9e:	d102      	bne.n	8005ea6 <_dtoa_r+0xb66>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	07db      	lsls	r3, r3, #31
 8005ea4:	d4ae      	bmi.n	8005e04 <_dtoa_r+0xac4>
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	461f      	mov	r7, r3
 8005eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eae:	2a30      	cmp	r2, #48	; 0x30
 8005eb0:	d0fa      	beq.n	8005ea8 <_dtoa_r+0xb68>
 8005eb2:	e6fb      	b.n	8005cac <_dtoa_r+0x96c>
 8005eb4:	9a08      	ldr	r2, [sp, #32]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d1a5      	bne.n	8005e06 <_dtoa_r+0xac6>
 8005eba:	2331      	movs	r3, #49	; 0x31
 8005ebc:	f109 0901 	add.w	r9, r9, #1
 8005ec0:	7013      	strb	r3, [r2, #0]
 8005ec2:	e6f3      	b.n	8005cac <_dtoa_r+0x96c>
 8005ec4:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <_dtoa_r+0xbd4>)
 8005ec6:	f7ff baa7 	b.w	8005418 <_dtoa_r+0xd8>
 8005eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f aa80 	bne.w	80053d2 <_dtoa_r+0x92>
 8005ed2:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <_dtoa_r+0xbd8>)
 8005ed4:	f7ff baa0 	b.w	8005418 <_dtoa_r+0xd8>
 8005ed8:	f1bb 0f00 	cmp.w	fp, #0
 8005edc:	dc03      	bgt.n	8005ee6 <_dtoa_r+0xba6>
 8005ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	f73f aecc 	bgt.w	8005c7e <_dtoa_r+0x93e>
 8005ee6:	9f08      	ldr	r7, [sp, #32]
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4650      	mov	r0, sl
 8005eec:	f7ff f99a 	bl	8005224 <quorem>
 8005ef0:	9a08      	ldr	r2, [sp, #32]
 8005ef2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ef6:	f807 3b01 	strb.w	r3, [r7], #1
 8005efa:	1aba      	subs	r2, r7, r2
 8005efc:	4593      	cmp	fp, r2
 8005efe:	ddb9      	ble.n	8005e74 <_dtoa_r+0xb34>
 8005f00:	4651      	mov	r1, sl
 8005f02:	2300      	movs	r3, #0
 8005f04:	220a      	movs	r2, #10
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fab2 	bl	8006470 <__multadd>
 8005f0c:	4682      	mov	sl, r0
 8005f0e:	e7eb      	b.n	8005ee8 <_dtoa_r+0xba8>
 8005f10:	08007873 	.word	0x08007873
 8005f14:	080077cc 	.word	0x080077cc
 8005f18:	080077f0 	.word	0x080077f0

08005f1c <__sflush_r>:
 8005f1c:	898a      	ldrh	r2, [r1, #12]
 8005f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f22:	4605      	mov	r5, r0
 8005f24:	0710      	lsls	r0, r2, #28
 8005f26:	460c      	mov	r4, r1
 8005f28:	d458      	bmi.n	8005fdc <__sflush_r+0xc0>
 8005f2a:	684b      	ldr	r3, [r1, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	dc05      	bgt.n	8005f3c <__sflush_r+0x20>
 8005f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dc02      	bgt.n	8005f3c <__sflush_r+0x20>
 8005f36:	2000      	movs	r0, #0
 8005f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	d0f9      	beq.n	8005f36 <__sflush_r+0x1a>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f48:	682f      	ldr	r7, [r5, #0]
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	d032      	beq.n	8005fb4 <__sflush_r+0x98>
 8005f4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	075a      	lsls	r2, r3, #29
 8005f54:	d505      	bpl.n	8005f62 <__sflush_r+0x46>
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	1ac0      	subs	r0, r0, r3
 8005f5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f5c:	b10b      	cbz	r3, 8005f62 <__sflush_r+0x46>
 8005f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f60:	1ac0      	subs	r0, r0, r3
 8005f62:	2300      	movs	r3, #0
 8005f64:	4602      	mov	r2, r0
 8005f66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f68:	4628      	mov	r0, r5
 8005f6a:	6a21      	ldr	r1, [r4, #32]
 8005f6c:	47b0      	blx	r6
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	d106      	bne.n	8005f82 <__sflush_r+0x66>
 8005f74:	6829      	ldr	r1, [r5, #0]
 8005f76:	291d      	cmp	r1, #29
 8005f78:	d82c      	bhi.n	8005fd4 <__sflush_r+0xb8>
 8005f7a:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <__sflush_r+0x108>)
 8005f7c:	40ca      	lsrs	r2, r1
 8005f7e:	07d6      	lsls	r6, r2, #31
 8005f80:	d528      	bpl.n	8005fd4 <__sflush_r+0xb8>
 8005f82:	2200      	movs	r2, #0
 8005f84:	6062      	str	r2, [r4, #4]
 8005f86:	6922      	ldr	r2, [r4, #16]
 8005f88:	04d9      	lsls	r1, r3, #19
 8005f8a:	6022      	str	r2, [r4, #0]
 8005f8c:	d504      	bpl.n	8005f98 <__sflush_r+0x7c>
 8005f8e:	1c42      	adds	r2, r0, #1
 8005f90:	d101      	bne.n	8005f96 <__sflush_r+0x7a>
 8005f92:	682b      	ldr	r3, [r5, #0]
 8005f94:	b903      	cbnz	r3, 8005f98 <__sflush_r+0x7c>
 8005f96:	6560      	str	r0, [r4, #84]	; 0x54
 8005f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f9a:	602f      	str	r7, [r5, #0]
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	d0ca      	beq.n	8005f36 <__sflush_r+0x1a>
 8005fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	d002      	beq.n	8005fae <__sflush_r+0x92>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fd8f 	bl	8006acc <_free_r>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	6360      	str	r0, [r4, #52]	; 0x34
 8005fb2:	e7c1      	b.n	8005f38 <__sflush_r+0x1c>
 8005fb4:	6a21      	ldr	r1, [r4, #32]
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b0      	blx	r6
 8005fbc:	1c41      	adds	r1, r0, #1
 8005fbe:	d1c7      	bne.n	8005f50 <__sflush_r+0x34>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0c4      	beq.n	8005f50 <__sflush_r+0x34>
 8005fc6:	2b1d      	cmp	r3, #29
 8005fc8:	d001      	beq.n	8005fce <__sflush_r+0xb2>
 8005fca:	2b16      	cmp	r3, #22
 8005fcc:	d101      	bne.n	8005fd2 <__sflush_r+0xb6>
 8005fce:	602f      	str	r7, [r5, #0]
 8005fd0:	e7b1      	b.n	8005f36 <__sflush_r+0x1a>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	e7ad      	b.n	8005f38 <__sflush_r+0x1c>
 8005fdc:	690f      	ldr	r7, [r1, #16]
 8005fde:	2f00      	cmp	r7, #0
 8005fe0:	d0a9      	beq.n	8005f36 <__sflush_r+0x1a>
 8005fe2:	0793      	lsls	r3, r2, #30
 8005fe4:	bf18      	it	ne
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	680e      	ldr	r6, [r1, #0]
 8005fea:	bf08      	it	eq
 8005fec:	694b      	ldreq	r3, [r1, #20]
 8005fee:	eba6 0807 	sub.w	r8, r6, r7
 8005ff2:	600f      	str	r7, [r1, #0]
 8005ff4:	608b      	str	r3, [r1, #8]
 8005ff6:	f1b8 0f00 	cmp.w	r8, #0
 8005ffa:	dd9c      	ble.n	8005f36 <__sflush_r+0x1a>
 8005ffc:	4643      	mov	r3, r8
 8005ffe:	463a      	mov	r2, r7
 8006000:	4628      	mov	r0, r5
 8006002:	6a21      	ldr	r1, [r4, #32]
 8006004:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006006:	47b0      	blx	r6
 8006008:	2800      	cmp	r0, #0
 800600a:	dc06      	bgt.n	800601a <__sflush_r+0xfe>
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	e78e      	b.n	8005f38 <__sflush_r+0x1c>
 800601a:	4407      	add	r7, r0
 800601c:	eba8 0800 	sub.w	r8, r8, r0
 8006020:	e7e9      	b.n	8005ff6 <__sflush_r+0xda>
 8006022:	bf00      	nop
 8006024:	20400001 	.word	0x20400001

08006028 <_fflush_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	690b      	ldr	r3, [r1, #16]
 800602c:	4605      	mov	r5, r0
 800602e:	460c      	mov	r4, r1
 8006030:	b913      	cbnz	r3, 8006038 <_fflush_r+0x10>
 8006032:	2500      	movs	r5, #0
 8006034:	4628      	mov	r0, r5
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	b118      	cbz	r0, 8006042 <_fflush_r+0x1a>
 800603a:	6983      	ldr	r3, [r0, #24]
 800603c:	b90b      	cbnz	r3, 8006042 <_fflush_r+0x1a>
 800603e:	f000 f887 	bl	8006150 <__sinit>
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <_fflush_r+0x6c>)
 8006044:	429c      	cmp	r4, r3
 8006046:	d11b      	bne.n	8006080 <_fflush_r+0x58>
 8006048:	686c      	ldr	r4, [r5, #4]
 800604a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ef      	beq.n	8006032 <_fflush_r+0xa>
 8006052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006054:	07d0      	lsls	r0, r2, #31
 8006056:	d404      	bmi.n	8006062 <_fflush_r+0x3a>
 8006058:	0599      	lsls	r1, r3, #22
 800605a:	d402      	bmi.n	8006062 <_fflush_r+0x3a>
 800605c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605e:	f000 f91a 	bl	8006296 <__retarget_lock_acquire_recursive>
 8006062:	4628      	mov	r0, r5
 8006064:	4621      	mov	r1, r4
 8006066:	f7ff ff59 	bl	8005f1c <__sflush_r>
 800606a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800606c:	4605      	mov	r5, r0
 800606e:	07da      	lsls	r2, r3, #31
 8006070:	d4e0      	bmi.n	8006034 <_fflush_r+0xc>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	059b      	lsls	r3, r3, #22
 8006076:	d4dd      	bmi.n	8006034 <_fflush_r+0xc>
 8006078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800607a:	f000 f90d 	bl	8006298 <__retarget_lock_release_recursive>
 800607e:	e7d9      	b.n	8006034 <_fflush_r+0xc>
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <_fflush_r+0x70>)
 8006082:	429c      	cmp	r4, r3
 8006084:	d101      	bne.n	800608a <_fflush_r+0x62>
 8006086:	68ac      	ldr	r4, [r5, #8]
 8006088:	e7df      	b.n	800604a <_fflush_r+0x22>
 800608a:	4b04      	ldr	r3, [pc, #16]	; (800609c <_fflush_r+0x74>)
 800608c:	429c      	cmp	r4, r3
 800608e:	bf08      	it	eq
 8006090:	68ec      	ldreq	r4, [r5, #12]
 8006092:	e7da      	b.n	800604a <_fflush_r+0x22>
 8006094:	080078a4 	.word	0x080078a4
 8006098:	080078c4 	.word	0x080078c4
 800609c:	08007884 	.word	0x08007884

080060a0 <std>:
 80060a0:	2300      	movs	r3, #0
 80060a2:	b510      	push	{r4, lr}
 80060a4:	4604      	mov	r4, r0
 80060a6:	e9c0 3300 	strd	r3, r3, [r0]
 80060aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ae:	6083      	str	r3, [r0, #8]
 80060b0:	8181      	strh	r1, [r0, #12]
 80060b2:	6643      	str	r3, [r0, #100]	; 0x64
 80060b4:	81c2      	strh	r2, [r0, #14]
 80060b6:	6183      	str	r3, [r0, #24]
 80060b8:	4619      	mov	r1, r3
 80060ba:	2208      	movs	r2, #8
 80060bc:	305c      	adds	r0, #92	; 0x5c
 80060be:	f7fe f971 	bl	80043a4 <memset>
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <std+0x38>)
 80060c4:	6224      	str	r4, [r4, #32]
 80060c6:	6263      	str	r3, [r4, #36]	; 0x24
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <std+0x3c>)
 80060ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80060cc:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <std+0x40>)
 80060ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060d0:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <std+0x44>)
 80060d2:	6323      	str	r3, [r4, #48]	; 0x30
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	bf00      	nop
 80060d8:	08006ee9 	.word	0x08006ee9
 80060dc:	08006f0b 	.word	0x08006f0b
 80060e0:	08006f43 	.word	0x08006f43
 80060e4:	08006f67 	.word	0x08006f67

080060e8 <_cleanup_r>:
 80060e8:	4901      	ldr	r1, [pc, #4]	; (80060f0 <_cleanup_r+0x8>)
 80060ea:	f000 b8af 	b.w	800624c <_fwalk_reent>
 80060ee:	bf00      	nop
 80060f0:	08006029 	.word	0x08006029

080060f4 <__sfmoreglue>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	2568      	movs	r5, #104	; 0x68
 80060f8:	1e4a      	subs	r2, r1, #1
 80060fa:	4355      	muls	r5, r2
 80060fc:	460e      	mov	r6, r1
 80060fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006102:	f000 fd2f 	bl	8006b64 <_malloc_r>
 8006106:	4604      	mov	r4, r0
 8006108:	b140      	cbz	r0, 800611c <__sfmoreglue+0x28>
 800610a:	2100      	movs	r1, #0
 800610c:	e9c0 1600 	strd	r1, r6, [r0]
 8006110:	300c      	adds	r0, #12
 8006112:	60a0      	str	r0, [r4, #8]
 8006114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006118:	f7fe f944 	bl	80043a4 <memset>
 800611c:	4620      	mov	r0, r4
 800611e:	bd70      	pop	{r4, r5, r6, pc}

08006120 <__sfp_lock_acquire>:
 8006120:	4801      	ldr	r0, [pc, #4]	; (8006128 <__sfp_lock_acquire+0x8>)
 8006122:	f000 b8b8 	b.w	8006296 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	20000de0 	.word	0x20000de0

0800612c <__sfp_lock_release>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__sfp_lock_release+0x8>)
 800612e:	f000 b8b3 	b.w	8006298 <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	20000de0 	.word	0x20000de0

08006138 <__sinit_lock_acquire>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__sinit_lock_acquire+0x8>)
 800613a:	f000 b8ac 	b.w	8006296 <__retarget_lock_acquire_recursive>
 800613e:	bf00      	nop
 8006140:	20000ddb 	.word	0x20000ddb

08006144 <__sinit_lock_release>:
 8006144:	4801      	ldr	r0, [pc, #4]	; (800614c <__sinit_lock_release+0x8>)
 8006146:	f000 b8a7 	b.w	8006298 <__retarget_lock_release_recursive>
 800614a:	bf00      	nop
 800614c:	20000ddb 	.word	0x20000ddb

08006150 <__sinit>:
 8006150:	b510      	push	{r4, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	f7ff fff0 	bl	8006138 <__sinit_lock_acquire>
 8006158:	69a3      	ldr	r3, [r4, #24]
 800615a:	b11b      	cbz	r3, 8006164 <__sinit+0x14>
 800615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006160:	f7ff bff0 	b.w	8006144 <__sinit_lock_release>
 8006164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006168:	6523      	str	r3, [r4, #80]	; 0x50
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <__sinit+0x68>)
 800616c:	4a13      	ldr	r2, [pc, #76]	; (80061bc <__sinit+0x6c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	62a2      	str	r2, [r4, #40]	; 0x28
 8006172:	42a3      	cmp	r3, r4
 8006174:	bf08      	it	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	4620      	mov	r0, r4
 800617a:	bf08      	it	eq
 800617c:	61a3      	streq	r3, [r4, #24]
 800617e:	f000 f81f 	bl	80061c0 <__sfp>
 8006182:	6060      	str	r0, [r4, #4]
 8006184:	4620      	mov	r0, r4
 8006186:	f000 f81b 	bl	80061c0 <__sfp>
 800618a:	60a0      	str	r0, [r4, #8]
 800618c:	4620      	mov	r0, r4
 800618e:	f000 f817 	bl	80061c0 <__sfp>
 8006192:	2200      	movs	r2, #0
 8006194:	2104      	movs	r1, #4
 8006196:	60e0      	str	r0, [r4, #12]
 8006198:	6860      	ldr	r0, [r4, #4]
 800619a:	f7ff ff81 	bl	80060a0 <std>
 800619e:	2201      	movs	r2, #1
 80061a0:	2109      	movs	r1, #9
 80061a2:	68a0      	ldr	r0, [r4, #8]
 80061a4:	f7ff ff7c 	bl	80060a0 <std>
 80061a8:	2202      	movs	r2, #2
 80061aa:	2112      	movs	r1, #18
 80061ac:	68e0      	ldr	r0, [r4, #12]
 80061ae:	f7ff ff77 	bl	80060a0 <std>
 80061b2:	2301      	movs	r3, #1
 80061b4:	61a3      	str	r3, [r4, #24]
 80061b6:	e7d1      	b.n	800615c <__sinit+0xc>
 80061b8:	080077b8 	.word	0x080077b8
 80061bc:	080060e9 	.word	0x080060e9

080061c0 <__sfp>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	4607      	mov	r7, r0
 80061c4:	f7ff ffac 	bl	8006120 <__sfp_lock_acquire>
 80061c8:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <__sfp+0x84>)
 80061ca:	681e      	ldr	r6, [r3, #0]
 80061cc:	69b3      	ldr	r3, [r6, #24]
 80061ce:	b913      	cbnz	r3, 80061d6 <__sfp+0x16>
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7ff ffbd 	bl	8006150 <__sinit>
 80061d6:	3648      	adds	r6, #72	; 0x48
 80061d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061dc:	3b01      	subs	r3, #1
 80061de:	d503      	bpl.n	80061e8 <__sfp+0x28>
 80061e0:	6833      	ldr	r3, [r6, #0]
 80061e2:	b30b      	cbz	r3, 8006228 <__sfp+0x68>
 80061e4:	6836      	ldr	r6, [r6, #0]
 80061e6:	e7f7      	b.n	80061d8 <__sfp+0x18>
 80061e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061ec:	b9d5      	cbnz	r5, 8006224 <__sfp+0x64>
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <__sfp+0x88>)
 80061f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061f4:	60e3      	str	r3, [r4, #12]
 80061f6:	6665      	str	r5, [r4, #100]	; 0x64
 80061f8:	f000 f84c 	bl	8006294 <__retarget_lock_init_recursive>
 80061fc:	f7ff ff96 	bl	800612c <__sfp_lock_release>
 8006200:	2208      	movs	r2, #8
 8006202:	4629      	mov	r1, r5
 8006204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800620c:	6025      	str	r5, [r4, #0]
 800620e:	61a5      	str	r5, [r4, #24]
 8006210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006214:	f7fe f8c6 	bl	80043a4 <memset>
 8006218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800621c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006220:	4620      	mov	r0, r4
 8006222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006224:	3468      	adds	r4, #104	; 0x68
 8006226:	e7d9      	b.n	80061dc <__sfp+0x1c>
 8006228:	2104      	movs	r1, #4
 800622a:	4638      	mov	r0, r7
 800622c:	f7ff ff62 	bl	80060f4 <__sfmoreglue>
 8006230:	4604      	mov	r4, r0
 8006232:	6030      	str	r0, [r6, #0]
 8006234:	2800      	cmp	r0, #0
 8006236:	d1d5      	bne.n	80061e4 <__sfp+0x24>
 8006238:	f7ff ff78 	bl	800612c <__sfp_lock_release>
 800623c:	230c      	movs	r3, #12
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	e7ee      	b.n	8006220 <__sfp+0x60>
 8006242:	bf00      	nop
 8006244:	080077b8 	.word	0x080077b8
 8006248:	ffff0001 	.word	0xffff0001

0800624c <_fwalk_reent>:
 800624c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006250:	4606      	mov	r6, r0
 8006252:	4688      	mov	r8, r1
 8006254:	2700      	movs	r7, #0
 8006256:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800625a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800625e:	f1b9 0901 	subs.w	r9, r9, #1
 8006262:	d505      	bpl.n	8006270 <_fwalk_reent+0x24>
 8006264:	6824      	ldr	r4, [r4, #0]
 8006266:	2c00      	cmp	r4, #0
 8006268:	d1f7      	bne.n	800625a <_fwalk_reent+0xe>
 800626a:	4638      	mov	r0, r7
 800626c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006270:	89ab      	ldrh	r3, [r5, #12]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d907      	bls.n	8006286 <_fwalk_reent+0x3a>
 8006276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800627a:	3301      	adds	r3, #1
 800627c:	d003      	beq.n	8006286 <_fwalk_reent+0x3a>
 800627e:	4629      	mov	r1, r5
 8006280:	4630      	mov	r0, r6
 8006282:	47c0      	blx	r8
 8006284:	4307      	orrs	r7, r0
 8006286:	3568      	adds	r5, #104	; 0x68
 8006288:	e7e9      	b.n	800625e <_fwalk_reent+0x12>
	...

0800628c <_localeconv_r>:
 800628c:	4800      	ldr	r0, [pc, #0]	; (8006290 <_localeconv_r+0x4>)
 800628e:	4770      	bx	lr
 8006290:	20000160 	.word	0x20000160

08006294 <__retarget_lock_init_recursive>:
 8006294:	4770      	bx	lr

08006296 <__retarget_lock_acquire_recursive>:
 8006296:	4770      	bx	lr

08006298 <__retarget_lock_release_recursive>:
 8006298:	4770      	bx	lr

0800629a <__swhatbuf_r>:
 800629a:	b570      	push	{r4, r5, r6, lr}
 800629c:	460e      	mov	r6, r1
 800629e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a2:	4614      	mov	r4, r2
 80062a4:	2900      	cmp	r1, #0
 80062a6:	461d      	mov	r5, r3
 80062a8:	b096      	sub	sp, #88	; 0x58
 80062aa:	da07      	bge.n	80062bc <__swhatbuf_r+0x22>
 80062ac:	2300      	movs	r3, #0
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	89b3      	ldrh	r3, [r6, #12]
 80062b2:	061a      	lsls	r2, r3, #24
 80062b4:	d410      	bmi.n	80062d8 <__swhatbuf_r+0x3e>
 80062b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ba:	e00e      	b.n	80062da <__swhatbuf_r+0x40>
 80062bc:	466a      	mov	r2, sp
 80062be:	f000 fea9 	bl	8007014 <_fstat_r>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	dbf2      	blt.n	80062ac <__swhatbuf_r+0x12>
 80062c6:	9a01      	ldr	r2, [sp, #4]
 80062c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062d0:	425a      	negs	r2, r3
 80062d2:	415a      	adcs	r2, r3
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	e7ee      	b.n	80062b6 <__swhatbuf_r+0x1c>
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	2000      	movs	r0, #0
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	b016      	add	sp, #88	; 0x58
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080062e4 <__smakebuf_r>:
 80062e4:	898b      	ldrh	r3, [r1, #12]
 80062e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062e8:	079d      	lsls	r5, r3, #30
 80062ea:	4606      	mov	r6, r0
 80062ec:	460c      	mov	r4, r1
 80062ee:	d507      	bpl.n	8006300 <__smakebuf_r+0x1c>
 80062f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	6123      	str	r3, [r4, #16]
 80062f8:	2301      	movs	r3, #1
 80062fa:	6163      	str	r3, [r4, #20]
 80062fc:	b002      	add	sp, #8
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	466a      	mov	r2, sp
 8006302:	ab01      	add	r3, sp, #4
 8006304:	f7ff ffc9 	bl	800629a <__swhatbuf_r>
 8006308:	9900      	ldr	r1, [sp, #0]
 800630a:	4605      	mov	r5, r0
 800630c:	4630      	mov	r0, r6
 800630e:	f000 fc29 	bl	8006b64 <_malloc_r>
 8006312:	b948      	cbnz	r0, 8006328 <__smakebuf_r+0x44>
 8006314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006318:	059a      	lsls	r2, r3, #22
 800631a:	d4ef      	bmi.n	80062fc <__smakebuf_r+0x18>
 800631c:	f023 0303 	bic.w	r3, r3, #3
 8006320:	f043 0302 	orr.w	r3, r3, #2
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	e7e3      	b.n	80062f0 <__smakebuf_r+0xc>
 8006328:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <__smakebuf_r+0x7c>)
 800632a:	62b3      	str	r3, [r6, #40]	; 0x28
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	6020      	str	r0, [r4, #0]
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	9b00      	ldr	r3, [sp, #0]
 8006338:	6120      	str	r0, [r4, #16]
 800633a:	6163      	str	r3, [r4, #20]
 800633c:	9b01      	ldr	r3, [sp, #4]
 800633e:	b15b      	cbz	r3, 8006358 <__smakebuf_r+0x74>
 8006340:	4630      	mov	r0, r6
 8006342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006346:	f000 fe77 	bl	8007038 <_isatty_r>
 800634a:	b128      	cbz	r0, 8006358 <__smakebuf_r+0x74>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	89a0      	ldrh	r0, [r4, #12]
 800635a:	4305      	orrs	r5, r0
 800635c:	81a5      	strh	r5, [r4, #12]
 800635e:	e7cd      	b.n	80062fc <__smakebuf_r+0x18>
 8006360:	080060e9 	.word	0x080060e9

08006364 <malloc>:
 8006364:	4b02      	ldr	r3, [pc, #8]	; (8006370 <malloc+0xc>)
 8006366:	4601      	mov	r1, r0
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	f000 bbfb 	b.w	8006b64 <_malloc_r>
 800636e:	bf00      	nop
 8006370:	2000000c 	.word	0x2000000c

08006374 <memchr>:
 8006374:	4603      	mov	r3, r0
 8006376:	b510      	push	{r4, lr}
 8006378:	b2c9      	uxtb	r1, r1
 800637a:	4402      	add	r2, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	4618      	mov	r0, r3
 8006380:	d101      	bne.n	8006386 <memchr+0x12>
 8006382:	2000      	movs	r0, #0
 8006384:	e003      	b.n	800638e <memchr+0x1a>
 8006386:	7804      	ldrb	r4, [r0, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	428c      	cmp	r4, r1
 800638c:	d1f6      	bne.n	800637c <memchr+0x8>
 800638e:	bd10      	pop	{r4, pc}

08006390 <memcpy>:
 8006390:	440a      	add	r2, r1
 8006392:	4291      	cmp	r1, r2
 8006394:	f100 33ff 	add.w	r3, r0, #4294967295
 8006398:	d100      	bne.n	800639c <memcpy+0xc>
 800639a:	4770      	bx	lr
 800639c:	b510      	push	{r4, lr}
 800639e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a2:	4291      	cmp	r1, r2
 80063a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a8:	d1f9      	bne.n	800639e <memcpy+0xe>
 80063aa:	bd10      	pop	{r4, pc}

080063ac <_Balloc>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	b976      	cbnz	r6, 80063d4 <_Balloc+0x28>
 80063b6:	2010      	movs	r0, #16
 80063b8:	f7ff ffd4 	bl	8006364 <malloc>
 80063bc:	4602      	mov	r2, r0
 80063be:	6260      	str	r0, [r4, #36]	; 0x24
 80063c0:	b920      	cbnz	r0, 80063cc <_Balloc+0x20>
 80063c2:	2166      	movs	r1, #102	; 0x66
 80063c4:	4b17      	ldr	r3, [pc, #92]	; (8006424 <_Balloc+0x78>)
 80063c6:	4818      	ldr	r0, [pc, #96]	; (8006428 <_Balloc+0x7c>)
 80063c8:	f000 fde4 	bl	8006f94 <__assert_func>
 80063cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d0:	6006      	str	r6, [r0, #0]
 80063d2:	60c6      	str	r6, [r0, #12]
 80063d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063d6:	68f3      	ldr	r3, [r6, #12]
 80063d8:	b183      	cbz	r3, 80063fc <_Balloc+0x50>
 80063da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063e2:	b9b8      	cbnz	r0, 8006414 <_Balloc+0x68>
 80063e4:	2101      	movs	r1, #1
 80063e6:	fa01 f605 	lsl.w	r6, r1, r5
 80063ea:	1d72      	adds	r2, r6, #5
 80063ec:	4620      	mov	r0, r4
 80063ee:	0092      	lsls	r2, r2, #2
 80063f0:	f000 fb5e 	bl	8006ab0 <_calloc_r>
 80063f4:	b160      	cbz	r0, 8006410 <_Balloc+0x64>
 80063f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063fa:	e00e      	b.n	800641a <_Balloc+0x6e>
 80063fc:	2221      	movs	r2, #33	; 0x21
 80063fe:	2104      	movs	r1, #4
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fb55 	bl	8006ab0 <_calloc_r>
 8006406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006408:	60f0      	str	r0, [r6, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e4      	bne.n	80063da <_Balloc+0x2e>
 8006410:	2000      	movs	r0, #0
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	6802      	ldr	r2, [r0, #0]
 8006416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800641a:	2300      	movs	r3, #0
 800641c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006420:	e7f7      	b.n	8006412 <_Balloc+0x66>
 8006422:	bf00      	nop
 8006424:	080077fd 	.word	0x080077fd
 8006428:	080078e4 	.word	0x080078e4

0800642c <_Bfree>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006430:	4605      	mov	r5, r0
 8006432:	460c      	mov	r4, r1
 8006434:	b976      	cbnz	r6, 8006454 <_Bfree+0x28>
 8006436:	2010      	movs	r0, #16
 8006438:	f7ff ff94 	bl	8006364 <malloc>
 800643c:	4602      	mov	r2, r0
 800643e:	6268      	str	r0, [r5, #36]	; 0x24
 8006440:	b920      	cbnz	r0, 800644c <_Bfree+0x20>
 8006442:	218a      	movs	r1, #138	; 0x8a
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <_Bfree+0x3c>)
 8006446:	4809      	ldr	r0, [pc, #36]	; (800646c <_Bfree+0x40>)
 8006448:	f000 fda4 	bl	8006f94 <__assert_func>
 800644c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006450:	6006      	str	r6, [r0, #0]
 8006452:	60c6      	str	r6, [r0, #12]
 8006454:	b13c      	cbz	r4, 8006466 <_Bfree+0x3a>
 8006456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006458:	6862      	ldr	r2, [r4, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006460:	6021      	str	r1, [r4, #0]
 8006462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	080077fd 	.word	0x080077fd
 800646c:	080078e4 	.word	0x080078e4

08006470 <__multadd>:
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	4698      	mov	r8, r3
 8006476:	460c      	mov	r4, r1
 8006478:	2300      	movs	r3, #0
 800647a:	690e      	ldr	r6, [r1, #16]
 800647c:	4607      	mov	r7, r0
 800647e:	f101 0014 	add.w	r0, r1, #20
 8006482:	6805      	ldr	r5, [r0, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	b2a9      	uxth	r1, r5
 8006488:	fb02 8101 	mla	r1, r2, r1, r8
 800648c:	0c2d      	lsrs	r5, r5, #16
 800648e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006492:	fb02 c505 	mla	r5, r2, r5, ip
 8006496:	b289      	uxth	r1, r1
 8006498:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800649c:	429e      	cmp	r6, r3
 800649e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80064a2:	f840 1b04 	str.w	r1, [r0], #4
 80064a6:	dcec      	bgt.n	8006482 <__multadd+0x12>
 80064a8:	f1b8 0f00 	cmp.w	r8, #0
 80064ac:	d022      	beq.n	80064f4 <__multadd+0x84>
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	dc19      	bgt.n	80064e8 <__multadd+0x78>
 80064b4:	6861      	ldr	r1, [r4, #4]
 80064b6:	4638      	mov	r0, r7
 80064b8:	3101      	adds	r1, #1
 80064ba:	f7ff ff77 	bl	80063ac <_Balloc>
 80064be:	4605      	mov	r5, r0
 80064c0:	b928      	cbnz	r0, 80064ce <__multadd+0x5e>
 80064c2:	4602      	mov	r2, r0
 80064c4:	21b5      	movs	r1, #181	; 0xb5
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <__multadd+0x8c>)
 80064c8:	480d      	ldr	r0, [pc, #52]	; (8006500 <__multadd+0x90>)
 80064ca:	f000 fd63 	bl	8006f94 <__assert_func>
 80064ce:	6922      	ldr	r2, [r4, #16]
 80064d0:	f104 010c 	add.w	r1, r4, #12
 80064d4:	3202      	adds	r2, #2
 80064d6:	0092      	lsls	r2, r2, #2
 80064d8:	300c      	adds	r0, #12
 80064da:	f7ff ff59 	bl	8006390 <memcpy>
 80064de:	4621      	mov	r1, r4
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff ffa3 	bl	800642c <_Bfree>
 80064e6:	462c      	mov	r4, r5
 80064e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80064ec:	3601      	adds	r6, #1
 80064ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80064f2:	6126      	str	r6, [r4, #16]
 80064f4:	4620      	mov	r0, r4
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fa:	bf00      	nop
 80064fc:	08007873 	.word	0x08007873
 8006500:	080078e4 	.word	0x080078e4

08006504 <__hi0bits>:
 8006504:	0c02      	lsrs	r2, r0, #16
 8006506:	0412      	lsls	r2, r2, #16
 8006508:	4603      	mov	r3, r0
 800650a:	b9ca      	cbnz	r2, 8006540 <__hi0bits+0x3c>
 800650c:	0403      	lsls	r3, r0, #16
 800650e:	2010      	movs	r0, #16
 8006510:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006514:	bf04      	itt	eq
 8006516:	021b      	lsleq	r3, r3, #8
 8006518:	3008      	addeq	r0, #8
 800651a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800651e:	bf04      	itt	eq
 8006520:	011b      	lsleq	r3, r3, #4
 8006522:	3004      	addeq	r0, #4
 8006524:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006528:	bf04      	itt	eq
 800652a:	009b      	lsleq	r3, r3, #2
 800652c:	3002      	addeq	r0, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	db05      	blt.n	800653e <__hi0bits+0x3a>
 8006532:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006536:	f100 0001 	add.w	r0, r0, #1
 800653a:	bf08      	it	eq
 800653c:	2020      	moveq	r0, #32
 800653e:	4770      	bx	lr
 8006540:	2000      	movs	r0, #0
 8006542:	e7e5      	b.n	8006510 <__hi0bits+0xc>

08006544 <__lo0bits>:
 8006544:	6803      	ldr	r3, [r0, #0]
 8006546:	4602      	mov	r2, r0
 8006548:	f013 0007 	ands.w	r0, r3, #7
 800654c:	d00b      	beq.n	8006566 <__lo0bits+0x22>
 800654e:	07d9      	lsls	r1, r3, #31
 8006550:	d422      	bmi.n	8006598 <__lo0bits+0x54>
 8006552:	0798      	lsls	r0, r3, #30
 8006554:	bf49      	itett	mi
 8006556:	085b      	lsrmi	r3, r3, #1
 8006558:	089b      	lsrpl	r3, r3, #2
 800655a:	2001      	movmi	r0, #1
 800655c:	6013      	strmi	r3, [r2, #0]
 800655e:	bf5c      	itt	pl
 8006560:	2002      	movpl	r0, #2
 8006562:	6013      	strpl	r3, [r2, #0]
 8006564:	4770      	bx	lr
 8006566:	b299      	uxth	r1, r3
 8006568:	b909      	cbnz	r1, 800656e <__lo0bits+0x2a>
 800656a:	2010      	movs	r0, #16
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006572:	bf04      	itt	eq
 8006574:	0a1b      	lsreq	r3, r3, #8
 8006576:	3008      	addeq	r0, #8
 8006578:	0719      	lsls	r1, r3, #28
 800657a:	bf04      	itt	eq
 800657c:	091b      	lsreq	r3, r3, #4
 800657e:	3004      	addeq	r0, #4
 8006580:	0799      	lsls	r1, r3, #30
 8006582:	bf04      	itt	eq
 8006584:	089b      	lsreq	r3, r3, #2
 8006586:	3002      	addeq	r0, #2
 8006588:	07d9      	lsls	r1, r3, #31
 800658a:	d403      	bmi.n	8006594 <__lo0bits+0x50>
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	f100 0001 	add.w	r0, r0, #1
 8006592:	d003      	beq.n	800659c <__lo0bits+0x58>
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4770      	bx	lr
 8006598:	2000      	movs	r0, #0
 800659a:	4770      	bx	lr
 800659c:	2020      	movs	r0, #32
 800659e:	4770      	bx	lr

080065a0 <__i2b>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	460c      	mov	r4, r1
 80065a4:	2101      	movs	r1, #1
 80065a6:	f7ff ff01 	bl	80063ac <_Balloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__i2b+0x1a>
 80065ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065b2:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <__i2b+0x24>)
 80065b4:	4804      	ldr	r0, [pc, #16]	; (80065c8 <__i2b+0x28>)
 80065b6:	f000 fced 	bl	8006f94 <__assert_func>
 80065ba:	2301      	movs	r3, #1
 80065bc:	6144      	str	r4, [r0, #20]
 80065be:	6103      	str	r3, [r0, #16]
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	bf00      	nop
 80065c4:	08007873 	.word	0x08007873
 80065c8:	080078e4 	.word	0x080078e4

080065cc <__multiply>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4614      	mov	r4, r2
 80065d2:	690a      	ldr	r2, [r1, #16]
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	460d      	mov	r5, r1
 80065d8:	429a      	cmp	r2, r3
 80065da:	bfbe      	ittt	lt
 80065dc:	460b      	movlt	r3, r1
 80065de:	4625      	movlt	r5, r4
 80065e0:	461c      	movlt	r4, r3
 80065e2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80065e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065ea:	68ab      	ldr	r3, [r5, #8]
 80065ec:	6869      	ldr	r1, [r5, #4]
 80065ee:	eb0a 0709 	add.w	r7, sl, r9
 80065f2:	42bb      	cmp	r3, r7
 80065f4:	b085      	sub	sp, #20
 80065f6:	bfb8      	it	lt
 80065f8:	3101      	addlt	r1, #1
 80065fa:	f7ff fed7 	bl	80063ac <_Balloc>
 80065fe:	b930      	cbnz	r0, 800660e <__multiply+0x42>
 8006600:	4602      	mov	r2, r0
 8006602:	f240 115d 	movw	r1, #349	; 0x15d
 8006606:	4b41      	ldr	r3, [pc, #260]	; (800670c <__multiply+0x140>)
 8006608:	4841      	ldr	r0, [pc, #260]	; (8006710 <__multiply+0x144>)
 800660a:	f000 fcc3 	bl	8006f94 <__assert_func>
 800660e:	f100 0614 	add.w	r6, r0, #20
 8006612:	4633      	mov	r3, r6
 8006614:	2200      	movs	r2, #0
 8006616:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800661a:	4543      	cmp	r3, r8
 800661c:	d31e      	bcc.n	800665c <__multiply+0x90>
 800661e:	f105 0c14 	add.w	ip, r5, #20
 8006622:	f104 0314 	add.w	r3, r4, #20
 8006626:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800662a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800662e:	9202      	str	r2, [sp, #8]
 8006630:	ebac 0205 	sub.w	r2, ip, r5
 8006634:	3a15      	subs	r2, #21
 8006636:	f022 0203 	bic.w	r2, r2, #3
 800663a:	3204      	adds	r2, #4
 800663c:	f105 0115 	add.w	r1, r5, #21
 8006640:	458c      	cmp	ip, r1
 8006642:	bf38      	it	cc
 8006644:	2204      	movcc	r2, #4
 8006646:	9201      	str	r2, [sp, #4]
 8006648:	9a02      	ldr	r2, [sp, #8]
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	429a      	cmp	r2, r3
 800664e:	d808      	bhi.n	8006662 <__multiply+0x96>
 8006650:	2f00      	cmp	r7, #0
 8006652:	dc55      	bgt.n	8006700 <__multiply+0x134>
 8006654:	6107      	str	r7, [r0, #16]
 8006656:	b005      	add	sp, #20
 8006658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665c:	f843 2b04 	str.w	r2, [r3], #4
 8006660:	e7db      	b.n	800661a <__multiply+0x4e>
 8006662:	f8b3 a000 	ldrh.w	sl, [r3]
 8006666:	f1ba 0f00 	cmp.w	sl, #0
 800666a:	d020      	beq.n	80066ae <__multiply+0xe2>
 800666c:	46b1      	mov	r9, r6
 800666e:	2200      	movs	r2, #0
 8006670:	f105 0e14 	add.w	lr, r5, #20
 8006674:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006678:	f8d9 b000 	ldr.w	fp, [r9]
 800667c:	b2a1      	uxth	r1, r4
 800667e:	fa1f fb8b 	uxth.w	fp, fp
 8006682:	fb0a b101 	mla	r1, sl, r1, fp
 8006686:	4411      	add	r1, r2
 8006688:	f8d9 2000 	ldr.w	r2, [r9]
 800668c:	0c24      	lsrs	r4, r4, #16
 800668e:	0c12      	lsrs	r2, r2, #16
 8006690:	fb0a 2404 	mla	r4, sl, r4, r2
 8006694:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006698:	b289      	uxth	r1, r1
 800669a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800669e:	45f4      	cmp	ip, lr
 80066a0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80066a4:	f849 1b04 	str.w	r1, [r9], #4
 80066a8:	d8e4      	bhi.n	8006674 <__multiply+0xa8>
 80066aa:	9901      	ldr	r1, [sp, #4]
 80066ac:	5072      	str	r2, [r6, r1]
 80066ae:	9a03      	ldr	r2, [sp, #12]
 80066b0:	3304      	adds	r3, #4
 80066b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066b6:	f1b9 0f00 	cmp.w	r9, #0
 80066ba:	d01f      	beq.n	80066fc <__multiply+0x130>
 80066bc:	46b6      	mov	lr, r6
 80066be:	f04f 0a00 	mov.w	sl, #0
 80066c2:	6834      	ldr	r4, [r6, #0]
 80066c4:	f105 0114 	add.w	r1, r5, #20
 80066c8:	880a      	ldrh	r2, [r1, #0]
 80066ca:	f8be b002 	ldrh.w	fp, [lr, #2]
 80066ce:	b2a4      	uxth	r4, r4
 80066d0:	fb09 b202 	mla	r2, r9, r2, fp
 80066d4:	4492      	add	sl, r2
 80066d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80066da:	f84e 4b04 	str.w	r4, [lr], #4
 80066de:	f851 4b04 	ldr.w	r4, [r1], #4
 80066e2:	f8be 2000 	ldrh.w	r2, [lr]
 80066e6:	0c24      	lsrs	r4, r4, #16
 80066e8:	fb09 2404 	mla	r4, r9, r4, r2
 80066ec:	458c      	cmp	ip, r1
 80066ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066f6:	d8e7      	bhi.n	80066c8 <__multiply+0xfc>
 80066f8:	9a01      	ldr	r2, [sp, #4]
 80066fa:	50b4      	str	r4, [r6, r2]
 80066fc:	3604      	adds	r6, #4
 80066fe:	e7a3      	b.n	8006648 <__multiply+0x7c>
 8006700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1a5      	bne.n	8006654 <__multiply+0x88>
 8006708:	3f01      	subs	r7, #1
 800670a:	e7a1      	b.n	8006650 <__multiply+0x84>
 800670c:	08007873 	.word	0x08007873
 8006710:	080078e4 	.word	0x080078e4

08006714 <__pow5mult>:
 8006714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006718:	4615      	mov	r5, r2
 800671a:	f012 0203 	ands.w	r2, r2, #3
 800671e:	4606      	mov	r6, r0
 8006720:	460f      	mov	r7, r1
 8006722:	d007      	beq.n	8006734 <__pow5mult+0x20>
 8006724:	4c25      	ldr	r4, [pc, #148]	; (80067bc <__pow5mult+0xa8>)
 8006726:	3a01      	subs	r2, #1
 8006728:	2300      	movs	r3, #0
 800672a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800672e:	f7ff fe9f 	bl	8006470 <__multadd>
 8006732:	4607      	mov	r7, r0
 8006734:	10ad      	asrs	r5, r5, #2
 8006736:	d03d      	beq.n	80067b4 <__pow5mult+0xa0>
 8006738:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800673a:	b97c      	cbnz	r4, 800675c <__pow5mult+0x48>
 800673c:	2010      	movs	r0, #16
 800673e:	f7ff fe11 	bl	8006364 <malloc>
 8006742:	4602      	mov	r2, r0
 8006744:	6270      	str	r0, [r6, #36]	; 0x24
 8006746:	b928      	cbnz	r0, 8006754 <__pow5mult+0x40>
 8006748:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800674c:	4b1c      	ldr	r3, [pc, #112]	; (80067c0 <__pow5mult+0xac>)
 800674e:	481d      	ldr	r0, [pc, #116]	; (80067c4 <__pow5mult+0xb0>)
 8006750:	f000 fc20 	bl	8006f94 <__assert_func>
 8006754:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006758:	6004      	str	r4, [r0, #0]
 800675a:	60c4      	str	r4, [r0, #12]
 800675c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006760:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006764:	b94c      	cbnz	r4, 800677a <__pow5mult+0x66>
 8006766:	f240 2171 	movw	r1, #625	; 0x271
 800676a:	4630      	mov	r0, r6
 800676c:	f7ff ff18 	bl	80065a0 <__i2b>
 8006770:	2300      	movs	r3, #0
 8006772:	4604      	mov	r4, r0
 8006774:	f8c8 0008 	str.w	r0, [r8, #8]
 8006778:	6003      	str	r3, [r0, #0]
 800677a:	f04f 0900 	mov.w	r9, #0
 800677e:	07eb      	lsls	r3, r5, #31
 8006780:	d50a      	bpl.n	8006798 <__pow5mult+0x84>
 8006782:	4639      	mov	r1, r7
 8006784:	4622      	mov	r2, r4
 8006786:	4630      	mov	r0, r6
 8006788:	f7ff ff20 	bl	80065cc <__multiply>
 800678c:	4680      	mov	r8, r0
 800678e:	4639      	mov	r1, r7
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff fe4b 	bl	800642c <_Bfree>
 8006796:	4647      	mov	r7, r8
 8006798:	106d      	asrs	r5, r5, #1
 800679a:	d00b      	beq.n	80067b4 <__pow5mult+0xa0>
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	b938      	cbnz	r0, 80067b0 <__pow5mult+0x9c>
 80067a0:	4622      	mov	r2, r4
 80067a2:	4621      	mov	r1, r4
 80067a4:	4630      	mov	r0, r6
 80067a6:	f7ff ff11 	bl	80065cc <__multiply>
 80067aa:	6020      	str	r0, [r4, #0]
 80067ac:	f8c0 9000 	str.w	r9, [r0]
 80067b0:	4604      	mov	r4, r0
 80067b2:	e7e4      	b.n	800677e <__pow5mult+0x6a>
 80067b4:	4638      	mov	r0, r7
 80067b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ba:	bf00      	nop
 80067bc:	08007a38 	.word	0x08007a38
 80067c0:	080077fd 	.word	0x080077fd
 80067c4:	080078e4 	.word	0x080078e4

080067c8 <__lshift>:
 80067c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	460c      	mov	r4, r1
 80067ce:	4607      	mov	r7, r0
 80067d0:	4691      	mov	r9, r2
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	6849      	ldr	r1, [r1, #4]
 80067d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067e0:	f108 0601 	add.w	r6, r8, #1
 80067e4:	42b3      	cmp	r3, r6
 80067e6:	db0b      	blt.n	8006800 <__lshift+0x38>
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff fddf 	bl	80063ac <_Balloc>
 80067ee:	4605      	mov	r5, r0
 80067f0:	b948      	cbnz	r0, 8006806 <__lshift+0x3e>
 80067f2:	4602      	mov	r2, r0
 80067f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067f8:	4b27      	ldr	r3, [pc, #156]	; (8006898 <__lshift+0xd0>)
 80067fa:	4828      	ldr	r0, [pc, #160]	; (800689c <__lshift+0xd4>)
 80067fc:	f000 fbca 	bl	8006f94 <__assert_func>
 8006800:	3101      	adds	r1, #1
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	e7ee      	b.n	80067e4 <__lshift+0x1c>
 8006806:	2300      	movs	r3, #0
 8006808:	f100 0114 	add.w	r1, r0, #20
 800680c:	f100 0210 	add.w	r2, r0, #16
 8006810:	4618      	mov	r0, r3
 8006812:	4553      	cmp	r3, sl
 8006814:	db33      	blt.n	800687e <__lshift+0xb6>
 8006816:	6920      	ldr	r0, [r4, #16]
 8006818:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800681c:	f104 0314 	add.w	r3, r4, #20
 8006820:	f019 091f 	ands.w	r9, r9, #31
 8006824:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006828:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800682c:	d02b      	beq.n	8006886 <__lshift+0xbe>
 800682e:	468a      	mov	sl, r1
 8006830:	2200      	movs	r2, #0
 8006832:	f1c9 0e20 	rsb	lr, r9, #32
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	fa00 f009 	lsl.w	r0, r0, r9
 800683c:	4302      	orrs	r2, r0
 800683e:	f84a 2b04 	str.w	r2, [sl], #4
 8006842:	f853 2b04 	ldr.w	r2, [r3], #4
 8006846:	459c      	cmp	ip, r3
 8006848:	fa22 f20e 	lsr.w	r2, r2, lr
 800684c:	d8f3      	bhi.n	8006836 <__lshift+0x6e>
 800684e:	ebac 0304 	sub.w	r3, ip, r4
 8006852:	3b15      	subs	r3, #21
 8006854:	f023 0303 	bic.w	r3, r3, #3
 8006858:	3304      	adds	r3, #4
 800685a:	f104 0015 	add.w	r0, r4, #21
 800685e:	4584      	cmp	ip, r0
 8006860:	bf38      	it	cc
 8006862:	2304      	movcc	r3, #4
 8006864:	50ca      	str	r2, [r1, r3]
 8006866:	b10a      	cbz	r2, 800686c <__lshift+0xa4>
 8006868:	f108 0602 	add.w	r6, r8, #2
 800686c:	3e01      	subs	r6, #1
 800686e:	4638      	mov	r0, r7
 8006870:	4621      	mov	r1, r4
 8006872:	612e      	str	r6, [r5, #16]
 8006874:	f7ff fdda 	bl	800642c <_Bfree>
 8006878:	4628      	mov	r0, r5
 800687a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006882:	3301      	adds	r3, #1
 8006884:	e7c5      	b.n	8006812 <__lshift+0x4a>
 8006886:	3904      	subs	r1, #4
 8006888:	f853 2b04 	ldr.w	r2, [r3], #4
 800688c:	459c      	cmp	ip, r3
 800688e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006892:	d8f9      	bhi.n	8006888 <__lshift+0xc0>
 8006894:	e7ea      	b.n	800686c <__lshift+0xa4>
 8006896:	bf00      	nop
 8006898:	08007873 	.word	0x08007873
 800689c:	080078e4 	.word	0x080078e4

080068a0 <__mcmp>:
 80068a0:	4603      	mov	r3, r0
 80068a2:	690a      	ldr	r2, [r1, #16]
 80068a4:	6900      	ldr	r0, [r0, #16]
 80068a6:	b530      	push	{r4, r5, lr}
 80068a8:	1a80      	subs	r0, r0, r2
 80068aa:	d10d      	bne.n	80068c8 <__mcmp+0x28>
 80068ac:	3314      	adds	r3, #20
 80068ae:	3114      	adds	r1, #20
 80068b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068c0:	4295      	cmp	r5, r2
 80068c2:	d002      	beq.n	80068ca <__mcmp+0x2a>
 80068c4:	d304      	bcc.n	80068d0 <__mcmp+0x30>
 80068c6:	2001      	movs	r0, #1
 80068c8:	bd30      	pop	{r4, r5, pc}
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	d3f4      	bcc.n	80068b8 <__mcmp+0x18>
 80068ce:	e7fb      	b.n	80068c8 <__mcmp+0x28>
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295
 80068d4:	e7f8      	b.n	80068c8 <__mcmp+0x28>
	...

080068d8 <__mdiff>:
 80068d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	460c      	mov	r4, r1
 80068de:	4606      	mov	r6, r0
 80068e0:	4611      	mov	r1, r2
 80068e2:	4620      	mov	r0, r4
 80068e4:	4692      	mov	sl, r2
 80068e6:	f7ff ffdb 	bl	80068a0 <__mcmp>
 80068ea:	1e05      	subs	r5, r0, #0
 80068ec:	d111      	bne.n	8006912 <__mdiff+0x3a>
 80068ee:	4629      	mov	r1, r5
 80068f0:	4630      	mov	r0, r6
 80068f2:	f7ff fd5b 	bl	80063ac <_Balloc>
 80068f6:	4602      	mov	r2, r0
 80068f8:	b928      	cbnz	r0, 8006906 <__mdiff+0x2e>
 80068fa:	f240 2132 	movw	r1, #562	; 0x232
 80068fe:	4b3c      	ldr	r3, [pc, #240]	; (80069f0 <__mdiff+0x118>)
 8006900:	483c      	ldr	r0, [pc, #240]	; (80069f4 <__mdiff+0x11c>)
 8006902:	f000 fb47 	bl	8006f94 <__assert_func>
 8006906:	2301      	movs	r3, #1
 8006908:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800690c:	4610      	mov	r0, r2
 800690e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006912:	bfa4      	itt	ge
 8006914:	4653      	movge	r3, sl
 8006916:	46a2      	movge	sl, r4
 8006918:	4630      	mov	r0, r6
 800691a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800691e:	bfa6      	itte	ge
 8006920:	461c      	movge	r4, r3
 8006922:	2500      	movge	r5, #0
 8006924:	2501      	movlt	r5, #1
 8006926:	f7ff fd41 	bl	80063ac <_Balloc>
 800692a:	4602      	mov	r2, r0
 800692c:	b918      	cbnz	r0, 8006936 <__mdiff+0x5e>
 800692e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006932:	4b2f      	ldr	r3, [pc, #188]	; (80069f0 <__mdiff+0x118>)
 8006934:	e7e4      	b.n	8006900 <__mdiff+0x28>
 8006936:	f100 0814 	add.w	r8, r0, #20
 800693a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800693e:	60c5      	str	r5, [r0, #12]
 8006940:	f04f 0c00 	mov.w	ip, #0
 8006944:	f10a 0514 	add.w	r5, sl, #20
 8006948:	f10a 0010 	add.w	r0, sl, #16
 800694c:	46c2      	mov	sl, r8
 800694e:	6926      	ldr	r6, [r4, #16]
 8006950:	f104 0914 	add.w	r9, r4, #20
 8006954:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800695c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006960:	f859 3b04 	ldr.w	r3, [r9], #4
 8006964:	fa1f f18b 	uxth.w	r1, fp
 8006968:	4461      	add	r1, ip
 800696a:	fa1f fc83 	uxth.w	ip, r3
 800696e:	0c1b      	lsrs	r3, r3, #16
 8006970:	eba1 010c 	sub.w	r1, r1, ip
 8006974:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006978:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800697c:	b289      	uxth	r1, r1
 800697e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006982:	454e      	cmp	r6, r9
 8006984:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006988:	f84a 3b04 	str.w	r3, [sl], #4
 800698c:	d8e6      	bhi.n	800695c <__mdiff+0x84>
 800698e:	1b33      	subs	r3, r6, r4
 8006990:	3b15      	subs	r3, #21
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	3415      	adds	r4, #21
 8006998:	3304      	adds	r3, #4
 800699a:	42a6      	cmp	r6, r4
 800699c:	bf38      	it	cc
 800699e:	2304      	movcc	r3, #4
 80069a0:	441d      	add	r5, r3
 80069a2:	4443      	add	r3, r8
 80069a4:	461e      	mov	r6, r3
 80069a6:	462c      	mov	r4, r5
 80069a8:	4574      	cmp	r4, lr
 80069aa:	d30e      	bcc.n	80069ca <__mdiff+0xf2>
 80069ac:	f10e 0103 	add.w	r1, lr, #3
 80069b0:	1b49      	subs	r1, r1, r5
 80069b2:	f021 0103 	bic.w	r1, r1, #3
 80069b6:	3d03      	subs	r5, #3
 80069b8:	45ae      	cmp	lr, r5
 80069ba:	bf38      	it	cc
 80069bc:	2100      	movcc	r1, #0
 80069be:	4419      	add	r1, r3
 80069c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80069c4:	b18b      	cbz	r3, 80069ea <__mdiff+0x112>
 80069c6:	6117      	str	r7, [r2, #16]
 80069c8:	e7a0      	b.n	800690c <__mdiff+0x34>
 80069ca:	f854 8b04 	ldr.w	r8, [r4], #4
 80069ce:	fa1f f188 	uxth.w	r1, r8
 80069d2:	4461      	add	r1, ip
 80069d4:	1408      	asrs	r0, r1, #16
 80069d6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80069da:	b289      	uxth	r1, r1
 80069dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069e4:	f846 1b04 	str.w	r1, [r6], #4
 80069e8:	e7de      	b.n	80069a8 <__mdiff+0xd0>
 80069ea:	3f01      	subs	r7, #1
 80069ec:	e7e8      	b.n	80069c0 <__mdiff+0xe8>
 80069ee:	bf00      	nop
 80069f0:	08007873 	.word	0x08007873
 80069f4:	080078e4 	.word	0x080078e4

080069f8 <__d2b>:
 80069f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069fc:	2101      	movs	r1, #1
 80069fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a02:	4690      	mov	r8, r2
 8006a04:	461d      	mov	r5, r3
 8006a06:	f7ff fcd1 	bl	80063ac <_Balloc>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	b930      	cbnz	r0, 8006a1c <__d2b+0x24>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	f240 310a 	movw	r1, #778	; 0x30a
 8006a14:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <__d2b+0xb0>)
 8006a16:	4825      	ldr	r0, [pc, #148]	; (8006aac <__d2b+0xb4>)
 8006a18:	f000 fabc 	bl	8006f94 <__assert_func>
 8006a1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006a20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006a24:	bb2d      	cbnz	r5, 8006a72 <__d2b+0x7a>
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	f1b8 0300 	subs.w	r3, r8, #0
 8006a2c:	d026      	beq.n	8006a7c <__d2b+0x84>
 8006a2e:	4668      	mov	r0, sp
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	f7ff fd87 	bl	8006544 <__lo0bits>
 8006a36:	9900      	ldr	r1, [sp, #0]
 8006a38:	b1f0      	cbz	r0, 8006a78 <__d2b+0x80>
 8006a3a:	9a01      	ldr	r2, [sp, #4]
 8006a3c:	f1c0 0320 	rsb	r3, r0, #32
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	430b      	orrs	r3, r1
 8006a46:	40c2      	lsrs	r2, r0
 8006a48:	6163      	str	r3, [r4, #20]
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bf14      	ite	ne
 8006a52:	2102      	movne	r1, #2
 8006a54:	2101      	moveq	r1, #1
 8006a56:	61a3      	str	r3, [r4, #24]
 8006a58:	6121      	str	r1, [r4, #16]
 8006a5a:	b1c5      	cbz	r5, 8006a8e <__d2b+0x96>
 8006a5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a60:	4405      	add	r5, r0
 8006a62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a66:	603d      	str	r5, [r7, #0]
 8006a68:	6030      	str	r0, [r6, #0]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	b002      	add	sp, #8
 8006a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a76:	e7d6      	b.n	8006a26 <__d2b+0x2e>
 8006a78:	6161      	str	r1, [r4, #20]
 8006a7a:	e7e7      	b.n	8006a4c <__d2b+0x54>
 8006a7c:	a801      	add	r0, sp, #4
 8006a7e:	f7ff fd61 	bl	8006544 <__lo0bits>
 8006a82:	2101      	movs	r1, #1
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	6121      	str	r1, [r4, #16]
 8006a88:	6163      	str	r3, [r4, #20]
 8006a8a:	3020      	adds	r0, #32
 8006a8c:	e7e5      	b.n	8006a5a <__d2b+0x62>
 8006a8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a96:	6038      	str	r0, [r7, #0]
 8006a98:	6918      	ldr	r0, [r3, #16]
 8006a9a:	f7ff fd33 	bl	8006504 <__hi0bits>
 8006a9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006aa2:	6031      	str	r1, [r6, #0]
 8006aa4:	e7e1      	b.n	8006a6a <__d2b+0x72>
 8006aa6:	bf00      	nop
 8006aa8:	08007873 	.word	0x08007873
 8006aac:	080078e4 	.word	0x080078e4

08006ab0 <_calloc_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	fb02 f501 	mul.w	r5, r2, r1
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	f000 f854 	bl	8006b64 <_malloc_r>
 8006abc:	4604      	mov	r4, r0
 8006abe:	b118      	cbz	r0, 8006ac8 <_calloc_r+0x18>
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	f7fd fc6e 	bl	80043a4 <memset>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd38      	pop	{r3, r4, r5, pc}

08006acc <_free_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4605      	mov	r5, r0
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d043      	beq.n	8006b5c <_free_r+0x90>
 8006ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad8:	1f0c      	subs	r4, r1, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bfb8      	it	lt
 8006ade:	18e4      	addlt	r4, r4, r3
 8006ae0:	f000 fade 	bl	80070a0 <__malloc_lock>
 8006ae4:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <_free_r+0x94>)
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	4610      	mov	r0, r2
 8006aea:	b933      	cbnz	r3, 8006afa <_free_r+0x2e>
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	6014      	str	r4, [r2, #0]
 8006af0:	4628      	mov	r0, r5
 8006af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006af6:	f000 bad9 	b.w	80070ac <__malloc_unlock>
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	d90a      	bls.n	8006b14 <_free_r+0x48>
 8006afe:	6821      	ldr	r1, [r4, #0]
 8006b00:	1862      	adds	r2, r4, r1
 8006b02:	4293      	cmp	r3, r2
 8006b04:	bf01      	itttt	eq
 8006b06:	681a      	ldreq	r2, [r3, #0]
 8006b08:	685b      	ldreq	r3, [r3, #4]
 8006b0a:	1852      	addeq	r2, r2, r1
 8006b0c:	6022      	streq	r2, [r4, #0]
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	6004      	str	r4, [r0, #0]
 8006b12:	e7ed      	b.n	8006af0 <_free_r+0x24>
 8006b14:	461a      	mov	r2, r3
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	b10b      	cbz	r3, 8006b1e <_free_r+0x52>
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	d9fa      	bls.n	8006b14 <_free_r+0x48>
 8006b1e:	6811      	ldr	r1, [r2, #0]
 8006b20:	1850      	adds	r0, r2, r1
 8006b22:	42a0      	cmp	r0, r4
 8006b24:	d10b      	bne.n	8006b3e <_free_r+0x72>
 8006b26:	6820      	ldr	r0, [r4, #0]
 8006b28:	4401      	add	r1, r0
 8006b2a:	1850      	adds	r0, r2, r1
 8006b2c:	4283      	cmp	r3, r0
 8006b2e:	6011      	str	r1, [r2, #0]
 8006b30:	d1de      	bne.n	8006af0 <_free_r+0x24>
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	4401      	add	r1, r0
 8006b38:	6011      	str	r1, [r2, #0]
 8006b3a:	6053      	str	r3, [r2, #4]
 8006b3c:	e7d8      	b.n	8006af0 <_free_r+0x24>
 8006b3e:	d902      	bls.n	8006b46 <_free_r+0x7a>
 8006b40:	230c      	movs	r3, #12
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	e7d4      	b.n	8006af0 <_free_r+0x24>
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	1821      	adds	r1, r4, r0
 8006b4a:	428b      	cmp	r3, r1
 8006b4c:	bf01      	itttt	eq
 8006b4e:	6819      	ldreq	r1, [r3, #0]
 8006b50:	685b      	ldreq	r3, [r3, #4]
 8006b52:	1809      	addeq	r1, r1, r0
 8006b54:	6021      	streq	r1, [r4, #0]
 8006b56:	6063      	str	r3, [r4, #4]
 8006b58:	6054      	str	r4, [r2, #4]
 8006b5a:	e7c9      	b.n	8006af0 <_free_r+0x24>
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000224 	.word	0x20000224

08006b64 <_malloc_r>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	1ccd      	adds	r5, r1, #3
 8006b68:	f025 0503 	bic.w	r5, r5, #3
 8006b6c:	3508      	adds	r5, #8
 8006b6e:	2d0c      	cmp	r5, #12
 8006b70:	bf38      	it	cc
 8006b72:	250c      	movcc	r5, #12
 8006b74:	2d00      	cmp	r5, #0
 8006b76:	4606      	mov	r6, r0
 8006b78:	db01      	blt.n	8006b7e <_malloc_r+0x1a>
 8006b7a:	42a9      	cmp	r1, r5
 8006b7c:	d903      	bls.n	8006b86 <_malloc_r+0x22>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	6033      	str	r3, [r6, #0]
 8006b82:	2000      	movs	r0, #0
 8006b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b86:	f000 fa8b 	bl	80070a0 <__malloc_lock>
 8006b8a:	4921      	ldr	r1, [pc, #132]	; (8006c10 <_malloc_r+0xac>)
 8006b8c:	680a      	ldr	r2, [r1, #0]
 8006b8e:	4614      	mov	r4, r2
 8006b90:	b99c      	cbnz	r4, 8006bba <_malloc_r+0x56>
 8006b92:	4f20      	ldr	r7, [pc, #128]	; (8006c14 <_malloc_r+0xb0>)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	b923      	cbnz	r3, 8006ba2 <_malloc_r+0x3e>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f994 	bl	8006ec8 <_sbrk_r>
 8006ba0:	6038      	str	r0, [r7, #0]
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f98f 	bl	8006ec8 <_sbrk_r>
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	d123      	bne.n	8006bf6 <_malloc_r+0x92>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	6033      	str	r3, [r6, #0]
 8006bb4:	f000 fa7a 	bl	80070ac <__malloc_unlock>
 8006bb8:	e7e3      	b.n	8006b82 <_malloc_r+0x1e>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	1b5b      	subs	r3, r3, r5
 8006bbe:	d417      	bmi.n	8006bf0 <_malloc_r+0x8c>
 8006bc0:	2b0b      	cmp	r3, #11
 8006bc2:	d903      	bls.n	8006bcc <_malloc_r+0x68>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	441c      	add	r4, r3
 8006bc8:	6025      	str	r5, [r4, #0]
 8006bca:	e004      	b.n	8006bd6 <_malloc_r+0x72>
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	42a2      	cmp	r2, r4
 8006bd0:	bf0c      	ite	eq
 8006bd2:	600b      	streq	r3, [r1, #0]
 8006bd4:	6053      	strne	r3, [r2, #4]
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 fa68 	bl	80070ac <__malloc_unlock>
 8006bdc:	f104 000b 	add.w	r0, r4, #11
 8006be0:	1d23      	adds	r3, r4, #4
 8006be2:	f020 0007 	bic.w	r0, r0, #7
 8006be6:	1ac2      	subs	r2, r0, r3
 8006be8:	d0cc      	beq.n	8006b84 <_malloc_r+0x20>
 8006bea:	1a1b      	subs	r3, r3, r0
 8006bec:	50a3      	str	r3, [r4, r2]
 8006bee:	e7c9      	b.n	8006b84 <_malloc_r+0x20>
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	6864      	ldr	r4, [r4, #4]
 8006bf4:	e7cc      	b.n	8006b90 <_malloc_r+0x2c>
 8006bf6:	1cc4      	adds	r4, r0, #3
 8006bf8:	f024 0403 	bic.w	r4, r4, #3
 8006bfc:	42a0      	cmp	r0, r4
 8006bfe:	d0e3      	beq.n	8006bc8 <_malloc_r+0x64>
 8006c00:	1a21      	subs	r1, r4, r0
 8006c02:	4630      	mov	r0, r6
 8006c04:	f000 f960 	bl	8006ec8 <_sbrk_r>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d1dd      	bne.n	8006bc8 <_malloc_r+0x64>
 8006c0c:	e7cf      	b.n	8006bae <_malloc_r+0x4a>
 8006c0e:	bf00      	nop
 8006c10:	20000224 	.word	0x20000224
 8006c14:	20000228 	.word	0x20000228

08006c18 <__sfputc_r>:
 8006c18:	6893      	ldr	r3, [r2, #8]
 8006c1a:	b410      	push	{r4}
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	6093      	str	r3, [r2, #8]
 8006c22:	da07      	bge.n	8006c34 <__sfputc_r+0x1c>
 8006c24:	6994      	ldr	r4, [r2, #24]
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	db01      	blt.n	8006c2e <__sfputc_r+0x16>
 8006c2a:	290a      	cmp	r1, #10
 8006c2c:	d102      	bne.n	8006c34 <__sfputc_r+0x1c>
 8006c2e:	bc10      	pop	{r4}
 8006c30:	f7fe ba38 	b.w	80050a4 <__swbuf_r>
 8006c34:	6813      	ldr	r3, [r2, #0]
 8006c36:	1c58      	adds	r0, r3, #1
 8006c38:	6010      	str	r0, [r2, #0]
 8006c3a:	7019      	strb	r1, [r3, #0]
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	bc10      	pop	{r4}
 8006c40:	4770      	bx	lr

08006c42 <__sfputs_r>:
 8006c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c44:	4606      	mov	r6, r0
 8006c46:	460f      	mov	r7, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	18d5      	adds	r5, r2, r3
 8006c4c:	42ac      	cmp	r4, r5
 8006c4e:	d101      	bne.n	8006c54 <__sfputs_r+0x12>
 8006c50:	2000      	movs	r0, #0
 8006c52:	e007      	b.n	8006c64 <__sfputs_r+0x22>
 8006c54:	463a      	mov	r2, r7
 8006c56:	4630      	mov	r0, r6
 8006c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5c:	f7ff ffdc 	bl	8006c18 <__sfputc_r>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d1f3      	bne.n	8006c4c <__sfputs_r+0xa>
 8006c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c68 <_vfiprintf_r>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	4614      	mov	r4, r2
 8006c70:	4698      	mov	r8, r3
 8006c72:	4606      	mov	r6, r0
 8006c74:	b09d      	sub	sp, #116	; 0x74
 8006c76:	b118      	cbz	r0, 8006c80 <_vfiprintf_r+0x18>
 8006c78:	6983      	ldr	r3, [r0, #24]
 8006c7a:	b90b      	cbnz	r3, 8006c80 <_vfiprintf_r+0x18>
 8006c7c:	f7ff fa68 	bl	8006150 <__sinit>
 8006c80:	4b89      	ldr	r3, [pc, #548]	; (8006ea8 <_vfiprintf_r+0x240>)
 8006c82:	429d      	cmp	r5, r3
 8006c84:	d11b      	bne.n	8006cbe <_vfiprintf_r+0x56>
 8006c86:	6875      	ldr	r5, [r6, #4]
 8006c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	d405      	bmi.n	8006c9a <_vfiprintf_r+0x32>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	059a      	lsls	r2, r3, #22
 8006c92:	d402      	bmi.n	8006c9a <_vfiprintf_r+0x32>
 8006c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c96:	f7ff fafe 	bl	8006296 <__retarget_lock_acquire_recursive>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	071b      	lsls	r3, r3, #28
 8006c9e:	d501      	bpl.n	8006ca4 <_vfiprintf_r+0x3c>
 8006ca0:	692b      	ldr	r3, [r5, #16]
 8006ca2:	b9eb      	cbnz	r3, 8006ce0 <_vfiprintf_r+0x78>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7fe fa4e 	bl	8005148 <__swsetup_r>
 8006cac:	b1c0      	cbz	r0, 8006ce0 <_vfiprintf_r+0x78>
 8006cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cb0:	07dc      	lsls	r4, r3, #31
 8006cb2:	d50e      	bpl.n	8006cd2 <_vfiprintf_r+0x6a>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	b01d      	add	sp, #116	; 0x74
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	4b7b      	ldr	r3, [pc, #492]	; (8006eac <_vfiprintf_r+0x244>)
 8006cc0:	429d      	cmp	r5, r3
 8006cc2:	d101      	bne.n	8006cc8 <_vfiprintf_r+0x60>
 8006cc4:	68b5      	ldr	r5, [r6, #8]
 8006cc6:	e7df      	b.n	8006c88 <_vfiprintf_r+0x20>
 8006cc8:	4b79      	ldr	r3, [pc, #484]	; (8006eb0 <_vfiprintf_r+0x248>)
 8006cca:	429d      	cmp	r5, r3
 8006ccc:	bf08      	it	eq
 8006cce:	68f5      	ldreq	r5, [r6, #12]
 8006cd0:	e7da      	b.n	8006c88 <_vfiprintf_r+0x20>
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	0598      	lsls	r0, r3, #22
 8006cd6:	d4ed      	bmi.n	8006cb4 <_vfiprintf_r+0x4c>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cda:	f7ff fadd 	bl	8006298 <__retarget_lock_release_recursive>
 8006cde:	e7e9      	b.n	8006cb4 <_vfiprintf_r+0x4c>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cea:	2330      	movs	r3, #48	; 0x30
 8006cec:	f04f 0901 	mov.w	r9, #1
 8006cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cf4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006eb4 <_vfiprintf_r+0x24c>
 8006cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	469a      	mov	sl, r3
 8006d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d04:	b10a      	cbz	r2, 8006d0a <_vfiprintf_r+0xa2>
 8006d06:	2a25      	cmp	r2, #37	; 0x25
 8006d08:	d1f9      	bne.n	8006cfe <_vfiprintf_r+0x96>
 8006d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d0e:	d00b      	beq.n	8006d28 <_vfiprintf_r+0xc0>
 8006d10:	465b      	mov	r3, fp
 8006d12:	4622      	mov	r2, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ff93 	bl	8006c42 <__sfputs_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f000 80aa 	beq.w	8006e76 <_vfiprintf_r+0x20e>
 8006d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d24:	445a      	add	r2, fp
 8006d26:	9209      	str	r2, [sp, #36]	; 0x24
 8006d28:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80a2 	beq.w	8006e76 <_vfiprintf_r+0x20e>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d3c:	f10a 0a01 	add.w	sl, sl, #1
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	9307      	str	r3, [sp, #28]
 8006d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d48:	931a      	str	r3, [sp, #104]	; 0x68
 8006d4a:	4654      	mov	r4, sl
 8006d4c:	2205      	movs	r2, #5
 8006d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d52:	4858      	ldr	r0, [pc, #352]	; (8006eb4 <_vfiprintf_r+0x24c>)
 8006d54:	f7ff fb0e 	bl	8006374 <memchr>
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	b9d8      	cbnz	r0, 8006d94 <_vfiprintf_r+0x12c>
 8006d5c:	06d1      	lsls	r1, r2, #27
 8006d5e:	bf44      	itt	mi
 8006d60:	2320      	movmi	r3, #32
 8006d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d66:	0713      	lsls	r3, r2, #28
 8006d68:	bf44      	itt	mi
 8006d6a:	232b      	movmi	r3, #43	; 0x2b
 8006d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d70:	f89a 3000 	ldrb.w	r3, [sl]
 8006d74:	2b2a      	cmp	r3, #42	; 0x2a
 8006d76:	d015      	beq.n	8006da4 <_vfiprintf_r+0x13c>
 8006d78:	4654      	mov	r4, sl
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	f04f 0c0a 	mov.w	ip, #10
 8006d80:	9a07      	ldr	r2, [sp, #28]
 8006d82:	4621      	mov	r1, r4
 8006d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d88:	3b30      	subs	r3, #48	; 0x30
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d94e      	bls.n	8006e2c <_vfiprintf_r+0x1c4>
 8006d8e:	b1b0      	cbz	r0, 8006dbe <_vfiprintf_r+0x156>
 8006d90:	9207      	str	r2, [sp, #28]
 8006d92:	e014      	b.n	8006dbe <_vfiprintf_r+0x156>
 8006d94:	eba0 0308 	sub.w	r3, r0, r8
 8006d98:	fa09 f303 	lsl.w	r3, r9, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	46a2      	mov	sl, r4
 8006da0:	9304      	str	r3, [sp, #16]
 8006da2:	e7d2      	b.n	8006d4a <_vfiprintf_r+0xe2>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	1d19      	adds	r1, r3, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	9103      	str	r1, [sp, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfbb      	ittet	lt
 8006db0:	425b      	neglt	r3, r3
 8006db2:	f042 0202 	orrlt.w	r2, r2, #2
 8006db6:	9307      	strge	r3, [sp, #28]
 8006db8:	9307      	strlt	r3, [sp, #28]
 8006dba:	bfb8      	it	lt
 8006dbc:	9204      	strlt	r2, [sp, #16]
 8006dbe:	7823      	ldrb	r3, [r4, #0]
 8006dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8006dc2:	d10c      	bne.n	8006dde <_vfiprintf_r+0x176>
 8006dc4:	7863      	ldrb	r3, [r4, #1]
 8006dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc8:	d135      	bne.n	8006e36 <_vfiprintf_r+0x1ce>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	3402      	adds	r4, #2
 8006dce:	1d1a      	adds	r2, r3, #4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	9203      	str	r2, [sp, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bfb8      	it	lt
 8006dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ddc:	9305      	str	r3, [sp, #20]
 8006dde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ec4 <_vfiprintf_r+0x25c>
 8006de2:	2203      	movs	r2, #3
 8006de4:	4650      	mov	r0, sl
 8006de6:	7821      	ldrb	r1, [r4, #0]
 8006de8:	f7ff fac4 	bl	8006374 <memchr>
 8006dec:	b140      	cbz	r0, 8006e00 <_vfiprintf_r+0x198>
 8006dee:	2340      	movs	r3, #64	; 0x40
 8006df0:	eba0 000a 	sub.w	r0, r0, sl
 8006df4:	fa03 f000 	lsl.w	r0, r3, r0
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	3401      	adds	r4, #1
 8006dfc:	4303      	orrs	r3, r0
 8006dfe:	9304      	str	r3, [sp, #16]
 8006e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e04:	2206      	movs	r2, #6
 8006e06:	482c      	ldr	r0, [pc, #176]	; (8006eb8 <_vfiprintf_r+0x250>)
 8006e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e0c:	f7ff fab2 	bl	8006374 <memchr>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d03f      	beq.n	8006e94 <_vfiprintf_r+0x22c>
 8006e14:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <_vfiprintf_r+0x254>)
 8006e16:	bb1b      	cbnz	r3, 8006e60 <_vfiprintf_r+0x1f8>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	3307      	adds	r3, #7
 8006e1c:	f023 0307 	bic.w	r3, r3, #7
 8006e20:	3308      	adds	r3, #8
 8006e22:	9303      	str	r3, [sp, #12]
 8006e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e26:	443b      	add	r3, r7
 8006e28:	9309      	str	r3, [sp, #36]	; 0x24
 8006e2a:	e767      	b.n	8006cfc <_vfiprintf_r+0x94>
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	2001      	movs	r0, #1
 8006e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e34:	e7a5      	b.n	8006d82 <_vfiprintf_r+0x11a>
 8006e36:	2300      	movs	r3, #0
 8006e38:	f04f 0c0a 	mov.w	ip, #10
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	3401      	adds	r4, #1
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	4620      	mov	r0, r4
 8006e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e48:	3a30      	subs	r2, #48	; 0x30
 8006e4a:	2a09      	cmp	r2, #9
 8006e4c:	d903      	bls.n	8006e56 <_vfiprintf_r+0x1ee>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0c5      	beq.n	8006dde <_vfiprintf_r+0x176>
 8006e52:	9105      	str	r1, [sp, #20]
 8006e54:	e7c3      	b.n	8006dde <_vfiprintf_r+0x176>
 8006e56:	4604      	mov	r4, r0
 8006e58:	2301      	movs	r3, #1
 8006e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e5e:	e7f0      	b.n	8006e42 <_vfiprintf_r+0x1da>
 8006e60:	ab03      	add	r3, sp, #12
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	462a      	mov	r2, r5
 8006e66:	4630      	mov	r0, r6
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <_vfiprintf_r+0x258>)
 8006e6a:	a904      	add	r1, sp, #16
 8006e6c:	f7fd fb40 	bl	80044f0 <_printf_float>
 8006e70:	4607      	mov	r7, r0
 8006e72:	1c78      	adds	r0, r7, #1
 8006e74:	d1d6      	bne.n	8006e24 <_vfiprintf_r+0x1bc>
 8006e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e78:	07d9      	lsls	r1, r3, #31
 8006e7a:	d405      	bmi.n	8006e88 <_vfiprintf_r+0x220>
 8006e7c:	89ab      	ldrh	r3, [r5, #12]
 8006e7e:	059a      	lsls	r2, r3, #22
 8006e80:	d402      	bmi.n	8006e88 <_vfiprintf_r+0x220>
 8006e82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e84:	f7ff fa08 	bl	8006298 <__retarget_lock_release_recursive>
 8006e88:	89ab      	ldrh	r3, [r5, #12]
 8006e8a:	065b      	lsls	r3, r3, #25
 8006e8c:	f53f af12 	bmi.w	8006cb4 <_vfiprintf_r+0x4c>
 8006e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e92:	e711      	b.n	8006cb8 <_vfiprintf_r+0x50>
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <_vfiprintf_r+0x258>)
 8006e9e:	a904      	add	r1, sp, #16
 8006ea0:	f7fd fdc2 	bl	8004a28 <_printf_i>
 8006ea4:	e7e4      	b.n	8006e70 <_vfiprintf_r+0x208>
 8006ea6:	bf00      	nop
 8006ea8:	080078a4 	.word	0x080078a4
 8006eac:	080078c4 	.word	0x080078c4
 8006eb0:	08007884 	.word	0x08007884
 8006eb4:	08007a44 	.word	0x08007a44
 8006eb8:	08007a4e 	.word	0x08007a4e
 8006ebc:	080044f1 	.word	0x080044f1
 8006ec0:	08006c43 	.word	0x08006c43
 8006ec4:	08007a4a 	.word	0x08007a4a

08006ec8 <_sbrk_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4d05      	ldr	r5, [pc, #20]	; (8006ee4 <_sbrk_r+0x1c>)
 8006ece:	4604      	mov	r4, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	602b      	str	r3, [r5, #0]
 8006ed4:	f7fa fe64 	bl	8001ba0 <_sbrk>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_sbrk_r+0x1a>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_sbrk_r+0x1a>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000de4 	.word	0x20000de4

08006ee8 <__sread>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	460c      	mov	r4, r1
 8006eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef0:	f000 f8e2 	bl	80070b8 <_read_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	bfab      	itete	ge
 8006ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006efa:	89a3      	ldrhlt	r3, [r4, #12]
 8006efc:	181b      	addge	r3, r3, r0
 8006efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f02:	bfac      	ite	ge
 8006f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f06:	81a3      	strhlt	r3, [r4, #12]
 8006f08:	bd10      	pop	{r4, pc}

08006f0a <__swrite>:
 8006f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	461f      	mov	r7, r3
 8006f10:	898b      	ldrh	r3, [r1, #12]
 8006f12:	4605      	mov	r5, r0
 8006f14:	05db      	lsls	r3, r3, #23
 8006f16:	460c      	mov	r4, r1
 8006f18:	4616      	mov	r6, r2
 8006f1a:	d505      	bpl.n	8006f28 <__swrite+0x1e>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f24:	f000 f898 	bl	8007058 <_lseek_r>
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	4632      	mov	r2, r6
 8006f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	4628      	mov	r0, r5
 8006f34:	463b      	mov	r3, r7
 8006f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	f000 b817 	b.w	8006f70 <_write_r>

08006f42 <__sseek>:
 8006f42:	b510      	push	{r4, lr}
 8006f44:	460c      	mov	r4, r1
 8006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4a:	f000 f885 	bl	8007058 <_lseek_r>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	bf15      	itete	ne
 8006f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f5e:	81a3      	strheq	r3, [r4, #12]
 8006f60:	bf18      	it	ne
 8006f62:	81a3      	strhne	r3, [r4, #12]
 8006f64:	bd10      	pop	{r4, pc}

08006f66 <__sclose>:
 8006f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6a:	f000 b831 	b.w	8006fd0 <_close_r>
	...

08006f70 <_write_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4604      	mov	r4, r0
 8006f74:	4608      	mov	r0, r1
 8006f76:	4611      	mov	r1, r2
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4d05      	ldr	r5, [pc, #20]	; (8006f90 <_write_r+0x20>)
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f000 f9b4 	bl	80072ec <_write>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_write_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_write_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	20000de4 	.word	0x20000de4

08006f94 <__assert_func>:
 8006f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f96:	4614      	mov	r4, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <__assert_func+0x2c>)
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68d8      	ldr	r0, [r3, #12]
 8006fa2:	b14c      	cbz	r4, 8006fb8 <__assert_func+0x24>
 8006fa4:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <__assert_func+0x30>)
 8006fa6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006faa:	9100      	str	r1, [sp, #0]
 8006fac:	462b      	mov	r3, r5
 8006fae:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <__assert_func+0x34>)
 8006fb0:	f000 f81e 	bl	8006ff0 <fiprintf>
 8006fb4:	f000 f89f 	bl	80070f6 <abort>
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <__assert_func+0x38>)
 8006fba:	461c      	mov	r4, r3
 8006fbc:	e7f3      	b.n	8006fa6 <__assert_func+0x12>
 8006fbe:	bf00      	nop
 8006fc0:	2000000c 	.word	0x2000000c
 8006fc4:	08007a55 	.word	0x08007a55
 8006fc8:	08007a62 	.word	0x08007a62
 8006fcc:	08007a90 	.word	0x08007a90

08006fd0 <_close_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4d05      	ldr	r5, [pc, #20]	; (8006fec <_close_r+0x1c>)
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	f000 f9b4 	bl	8007348 <_close>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_close_r+0x1a>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_close_r+0x1a>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20000de4 	.word	0x20000de4

08006ff0 <fiprintf>:
 8006ff0:	b40e      	push	{r1, r2, r3}
 8006ff2:	b503      	push	{r0, r1, lr}
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	ab03      	add	r3, sp, #12
 8006ff8:	4805      	ldr	r0, [pc, #20]	; (8007010 <fiprintf+0x20>)
 8006ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	f7ff fe31 	bl	8006c68 <_vfiprintf_r>
 8007006:	b002      	add	sp, #8
 8007008:	f85d eb04 	ldr.w	lr, [sp], #4
 800700c:	b003      	add	sp, #12
 800700e:	4770      	bx	lr
 8007010:	2000000c 	.word	0x2000000c

08007014 <_fstat_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	2300      	movs	r3, #0
 8007018:	4d06      	ldr	r5, [pc, #24]	; (8007034 <_fstat_r+0x20>)
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	4611      	mov	r1, r2
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	f000 f9da 	bl	80073da <_fstat>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d102      	bne.n	8007030 <_fstat_r+0x1c>
 800702a:	682b      	ldr	r3, [r5, #0]
 800702c:	b103      	cbz	r3, 8007030 <_fstat_r+0x1c>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	bd38      	pop	{r3, r4, r5, pc}
 8007032:	bf00      	nop
 8007034:	20000de4 	.word	0x20000de4

08007038 <_isatty_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	2300      	movs	r3, #0
 800703c:	4d05      	ldr	r5, [pc, #20]	; (8007054 <_isatty_r+0x1c>)
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f000 fb3a 	bl	80076bc <_isatty>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_isatty_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_isatty_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20000de4 	.word	0x20000de4

08007058 <_lseek_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	4611      	mov	r1, r2
 8007060:	2200      	movs	r2, #0
 8007062:	4d05      	ldr	r5, [pc, #20]	; (8007078 <_lseek_r+0x20>)
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f000 f92e 	bl	80072c8 <_lseek>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_lseek_r+0x1e>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_lseek_r+0x1e>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20000de4 	.word	0x20000de4

0800707c <__ascii_mbtowc>:
 800707c:	b082      	sub	sp, #8
 800707e:	b901      	cbnz	r1, 8007082 <__ascii_mbtowc+0x6>
 8007080:	a901      	add	r1, sp, #4
 8007082:	b142      	cbz	r2, 8007096 <__ascii_mbtowc+0x1a>
 8007084:	b14b      	cbz	r3, 800709a <__ascii_mbtowc+0x1e>
 8007086:	7813      	ldrb	r3, [r2, #0]
 8007088:	600b      	str	r3, [r1, #0]
 800708a:	7812      	ldrb	r2, [r2, #0]
 800708c:	1e10      	subs	r0, r2, #0
 800708e:	bf18      	it	ne
 8007090:	2001      	movne	r0, #1
 8007092:	b002      	add	sp, #8
 8007094:	4770      	bx	lr
 8007096:	4610      	mov	r0, r2
 8007098:	e7fb      	b.n	8007092 <__ascii_mbtowc+0x16>
 800709a:	f06f 0001 	mvn.w	r0, #1
 800709e:	e7f8      	b.n	8007092 <__ascii_mbtowc+0x16>

080070a0 <__malloc_lock>:
 80070a0:	4801      	ldr	r0, [pc, #4]	; (80070a8 <__malloc_lock+0x8>)
 80070a2:	f7ff b8f8 	b.w	8006296 <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	20000ddc 	.word	0x20000ddc

080070ac <__malloc_unlock>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__malloc_unlock+0x8>)
 80070ae:	f7ff b8f3 	b.w	8006298 <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	20000ddc 	.word	0x20000ddc

080070b8 <_read_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	4d05      	ldr	r5, [pc, #20]	; (80070d8 <_read_r+0x20>)
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f000 f8a8 	bl	800721c <_read>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_read_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_read_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000de4 	.word	0x20000de4

080070dc <__ascii_wctomb>:
 80070dc:	4603      	mov	r3, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	b141      	cbz	r1, 80070f4 <__ascii_wctomb+0x18>
 80070e2:	2aff      	cmp	r2, #255	; 0xff
 80070e4:	d904      	bls.n	80070f0 <__ascii_wctomb+0x14>
 80070e6:	228a      	movs	r2, #138	; 0x8a
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	4770      	bx	lr
 80070f0:	2001      	movs	r0, #1
 80070f2:	700a      	strb	r2, [r1, #0]
 80070f4:	4770      	bx	lr

080070f6 <abort>:
 80070f6:	2006      	movs	r0, #6
 80070f8:	b508      	push	{r3, lr}
 80070fa:	f000 f82b 	bl	8007154 <raise>
 80070fe:	2001      	movs	r0, #1
 8007100:	f000 faf8 	bl	80076f4 <_exit>

08007104 <_raise_r>:
 8007104:	291f      	cmp	r1, #31
 8007106:	b538      	push	{r3, r4, r5, lr}
 8007108:	4604      	mov	r4, r0
 800710a:	460d      	mov	r5, r1
 800710c:	d904      	bls.n	8007118 <_raise_r+0x14>
 800710e:	2316      	movs	r3, #22
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	f04f 30ff 	mov.w	r0, #4294967295
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800711a:	b112      	cbz	r2, 8007122 <_raise_r+0x1e>
 800711c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007120:	b94b      	cbnz	r3, 8007136 <_raise_r+0x32>
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f830 	bl	8007188 <_getpid_r>
 8007128:	462a      	mov	r2, r5
 800712a:	4601      	mov	r1, r0
 800712c:	4620      	mov	r0, r4
 800712e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007132:	f000 b817 	b.w	8007164 <_kill_r>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d00a      	beq.n	8007150 <_raise_r+0x4c>
 800713a:	1c59      	adds	r1, r3, #1
 800713c:	d103      	bne.n	8007146 <_raise_r+0x42>
 800713e:	2316      	movs	r3, #22
 8007140:	6003      	str	r3, [r0, #0]
 8007142:	2001      	movs	r0, #1
 8007144:	e7e7      	b.n	8007116 <_raise_r+0x12>
 8007146:	2400      	movs	r4, #0
 8007148:	4628      	mov	r0, r5
 800714a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800714e:	4798      	blx	r3
 8007150:	2000      	movs	r0, #0
 8007152:	e7e0      	b.n	8007116 <_raise_r+0x12>

08007154 <raise>:
 8007154:	4b02      	ldr	r3, [pc, #8]	; (8007160 <raise+0xc>)
 8007156:	4601      	mov	r1, r0
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f7ff bfd3 	b.w	8007104 <_raise_r>
 800715e:	bf00      	nop
 8007160:	2000000c 	.word	0x2000000c

08007164 <_kill_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	2300      	movs	r3, #0
 8007168:	4d06      	ldr	r5, [pc, #24]	; (8007184 <_kill_r+0x20>)
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	f000 fadd 	bl	8007730 <_kill>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d102      	bne.n	8007180 <_kill_r+0x1c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b103      	cbz	r3, 8007180 <_kill_r+0x1c>
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	20000de4 	.word	0x20000de4

08007188 <_getpid_r>:
 8007188:	f000 b904 	b.w	8007394 <_getpid>

0800718c <findslot>:
 800718c:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <findslot+0x2c>)
 800718e:	b510      	push	{r4, lr}
 8007190:	4604      	mov	r4, r0
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	b118      	cbz	r0, 800719e <findslot+0x12>
 8007196:	6983      	ldr	r3, [r0, #24]
 8007198:	b90b      	cbnz	r3, 800719e <findslot+0x12>
 800719a:	f7fe ffd9 	bl	8006150 <__sinit>
 800719e:	2c13      	cmp	r4, #19
 80071a0:	d807      	bhi.n	80071b2 <findslot+0x26>
 80071a2:	4806      	ldr	r0, [pc, #24]	; (80071bc <findslot+0x30>)
 80071a4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80071a8:	3201      	adds	r2, #1
 80071aa:	d002      	beq.n	80071b2 <findslot+0x26>
 80071ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	2000      	movs	r0, #0
 80071b4:	e7fc      	b.n	80071b0 <findslot+0x24>
 80071b6:	bf00      	nop
 80071b8:	2000000c 	.word	0x2000000c
 80071bc:	20000238 	.word	0x20000238

080071c0 <checkerror>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	4604      	mov	r4, r0
 80071c6:	d109      	bne.n	80071dc <checkerror+0x1c>
 80071c8:	f7fd f8c2 	bl	8004350 <__errno>
 80071cc:	2613      	movs	r6, #19
 80071ce:	4605      	mov	r5, r0
 80071d0:	2700      	movs	r7, #0
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	beab      	bkpt	0x00ab
 80071d8:	4606      	mov	r6, r0
 80071da:	602e      	str	r6, [r5, #0]
 80071dc:	4620      	mov	r0, r4
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071e0 <error>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	4604      	mov	r4, r0
 80071e4:	f7fd f8b4 	bl	8004350 <__errno>
 80071e8:	2613      	movs	r6, #19
 80071ea:	4605      	mov	r5, r0
 80071ec:	2700      	movs	r7, #0
 80071ee:	4630      	mov	r0, r6
 80071f0:	4639      	mov	r1, r7
 80071f2:	beab      	bkpt	0x00ab
 80071f4:	4606      	mov	r6, r0
 80071f6:	4620      	mov	r0, r4
 80071f8:	602e      	str	r6, [r5, #0]
 80071fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071fc <_swiread>:
 80071fc:	b530      	push	{r4, r5, lr}
 80071fe:	b085      	sub	sp, #20
 8007200:	2406      	movs	r4, #6
 8007202:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007206:	9203      	str	r2, [sp, #12]
 8007208:	ad01      	add	r5, sp, #4
 800720a:	4620      	mov	r0, r4
 800720c:	4629      	mov	r1, r5
 800720e:	beab      	bkpt	0x00ab
 8007210:	4604      	mov	r4, r0
 8007212:	4620      	mov	r0, r4
 8007214:	f7ff ffd4 	bl	80071c0 <checkerror>
 8007218:	b005      	add	sp, #20
 800721a:	bd30      	pop	{r4, r5, pc}

0800721c <_read>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	460e      	mov	r6, r1
 8007220:	4615      	mov	r5, r2
 8007222:	f7ff ffb3 	bl	800718c <findslot>
 8007226:	4604      	mov	r4, r0
 8007228:	b930      	cbnz	r0, 8007238 <_read+0x1c>
 800722a:	f7fd f891 	bl	8004350 <__errno>
 800722e:	2309      	movs	r3, #9
 8007230:	6003      	str	r3, [r0, #0]
 8007232:	f04f 30ff 	mov.w	r0, #4294967295
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	462a      	mov	r2, r5
 800723a:	4631      	mov	r1, r6
 800723c:	6800      	ldr	r0, [r0, #0]
 800723e:	f7ff ffdd 	bl	80071fc <_swiread>
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	bf1f      	itttt	ne
 8007246:	6863      	ldrne	r3, [r4, #4]
 8007248:	1a28      	subne	r0, r5, r0
 800724a:	181b      	addne	r3, r3, r0
 800724c:	6063      	strne	r3, [r4, #4]
 800724e:	e7f2      	b.n	8007236 <_read+0x1a>

08007250 <_swilseek>:
 8007250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	4616      	mov	r6, r2
 8007256:	f7ff ff99 	bl	800718c <findslot>
 800725a:	4605      	mov	r5, r0
 800725c:	b940      	cbnz	r0, 8007270 <_swilseek+0x20>
 800725e:	f7fd f877 	bl	8004350 <__errno>
 8007262:	2309      	movs	r3, #9
 8007264:	6003      	str	r3, [r0, #0]
 8007266:	f04f 34ff 	mov.w	r4, #4294967295
 800726a:	4620      	mov	r0, r4
 800726c:	b003      	add	sp, #12
 800726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007270:	2e02      	cmp	r6, #2
 8007272:	d903      	bls.n	800727c <_swilseek+0x2c>
 8007274:	f7fd f86c 	bl	8004350 <__errno>
 8007278:	2316      	movs	r3, #22
 800727a:	e7f3      	b.n	8007264 <_swilseek+0x14>
 800727c:	2e01      	cmp	r6, #1
 800727e:	d112      	bne.n	80072a6 <_swilseek+0x56>
 8007280:	6843      	ldr	r3, [r0, #4]
 8007282:	18e4      	adds	r4, r4, r3
 8007284:	d4f6      	bmi.n	8007274 <_swilseek+0x24>
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	260a      	movs	r6, #10
 800728a:	466f      	mov	r7, sp
 800728c:	e9cd 3400 	strd	r3, r4, [sp]
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	beab      	bkpt	0x00ab
 8007296:	4606      	mov	r6, r0
 8007298:	4630      	mov	r0, r6
 800729a:	f7ff ff91 	bl	80071c0 <checkerror>
 800729e:	2800      	cmp	r0, #0
 80072a0:	dbe1      	blt.n	8007266 <_swilseek+0x16>
 80072a2:	606c      	str	r4, [r5, #4]
 80072a4:	e7e1      	b.n	800726a <_swilseek+0x1a>
 80072a6:	2e02      	cmp	r6, #2
 80072a8:	d1ed      	bne.n	8007286 <_swilseek+0x36>
 80072aa:	6803      	ldr	r3, [r0, #0]
 80072ac:	260c      	movs	r6, #12
 80072ae:	466f      	mov	r7, sp
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	beab      	bkpt	0x00ab
 80072b8:	4606      	mov	r6, r0
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ff80 	bl	80071c0 <checkerror>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d0d0      	beq.n	8007266 <_swilseek+0x16>
 80072c4:	4404      	add	r4, r0
 80072c6:	e7de      	b.n	8007286 <_swilseek+0x36>

080072c8 <_lseek>:
 80072c8:	f7ff bfc2 	b.w	8007250 <_swilseek>

080072cc <_swiwrite>:
 80072cc:	b530      	push	{r4, r5, lr}
 80072ce:	b085      	sub	sp, #20
 80072d0:	2405      	movs	r4, #5
 80072d2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80072d6:	9203      	str	r2, [sp, #12]
 80072d8:	ad01      	add	r5, sp, #4
 80072da:	4620      	mov	r0, r4
 80072dc:	4629      	mov	r1, r5
 80072de:	beab      	bkpt	0x00ab
 80072e0:	4604      	mov	r4, r0
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7ff ff6c 	bl	80071c0 <checkerror>
 80072e8:	b005      	add	sp, #20
 80072ea:	bd30      	pop	{r4, r5, pc}

080072ec <_write>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	460e      	mov	r6, r1
 80072f0:	4615      	mov	r5, r2
 80072f2:	f7ff ff4b 	bl	800718c <findslot>
 80072f6:	4604      	mov	r4, r0
 80072f8:	b930      	cbnz	r0, 8007308 <_write+0x1c>
 80072fa:	f7fd f829 	bl	8004350 <__errno>
 80072fe:	2309      	movs	r3, #9
 8007300:	6003      	str	r3, [r0, #0]
 8007302:	f04f 30ff 	mov.w	r0, #4294967295
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	462a      	mov	r2, r5
 800730a:	4631      	mov	r1, r6
 800730c:	6800      	ldr	r0, [r0, #0]
 800730e:	f7ff ffdd 	bl	80072cc <_swiwrite>
 8007312:	1e03      	subs	r3, r0, #0
 8007314:	dbf5      	blt.n	8007302 <_write+0x16>
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	1ae8      	subs	r0, r5, r3
 800731a:	4402      	add	r2, r0
 800731c:	42ab      	cmp	r3, r5
 800731e:	6062      	str	r2, [r4, #4]
 8007320:	d1f1      	bne.n	8007306 <_write+0x1a>
 8007322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007326:	2000      	movs	r0, #0
 8007328:	f7ff bf5a 	b.w	80071e0 <error>

0800732c <_swiclose>:
 800732c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800732e:	2402      	movs	r4, #2
 8007330:	9001      	str	r0, [sp, #4]
 8007332:	ad01      	add	r5, sp, #4
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	beab      	bkpt	0x00ab
 800733a:	4604      	mov	r4, r0
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff ff3f 	bl	80071c0 <checkerror>
 8007342:	b003      	add	sp, #12
 8007344:	bd30      	pop	{r4, r5, pc}
	...

08007348 <_close>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4605      	mov	r5, r0
 800734c:	f7ff ff1e 	bl	800718c <findslot>
 8007350:	4604      	mov	r4, r0
 8007352:	b930      	cbnz	r0, 8007362 <_close+0x1a>
 8007354:	f7fc fffc 	bl	8004350 <__errno>
 8007358:	2309      	movs	r3, #9
 800735a:	6003      	str	r3, [r0, #0]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	3d01      	subs	r5, #1
 8007364:	2d01      	cmp	r5, #1
 8007366:	d809      	bhi.n	800737c <_close+0x34>
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <_close+0x48>)
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	d104      	bne.n	800737c <_close+0x34>
 8007372:	f04f 33ff 	mov.w	r3, #4294967295
 8007376:	6003      	str	r3, [r0, #0]
 8007378:	2000      	movs	r0, #0
 800737a:	e7f1      	b.n	8007360 <_close+0x18>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	f7ff ffd5 	bl	800732c <_swiclose>
 8007382:	2800      	cmp	r0, #0
 8007384:	d1ec      	bne.n	8007360 <_close+0x18>
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	e7e8      	b.n	8007360 <_close+0x18>
 800738e:	bf00      	nop
 8007390:	20000238 	.word	0x20000238

08007394 <_getpid>:
 8007394:	2001      	movs	r0, #1
 8007396:	4770      	bx	lr

08007398 <_swistat>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	460c      	mov	r4, r1
 800739c:	f7ff fef6 	bl	800718c <findslot>
 80073a0:	4605      	mov	r5, r0
 80073a2:	b930      	cbnz	r0, 80073b2 <_swistat+0x1a>
 80073a4:	f7fc ffd4 	bl	8004350 <__errno>
 80073a8:	2309      	movs	r3, #9
 80073aa:	6003      	str	r3, [r0, #0]
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
 80073b2:	6863      	ldr	r3, [r4, #4]
 80073b4:	260c      	movs	r6, #12
 80073b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073ba:	6063      	str	r3, [r4, #4]
 80073bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80073c2:	4630      	mov	r0, r6
 80073c4:	4629      	mov	r1, r5
 80073c6:	beab      	bkpt	0x00ab
 80073c8:	4605      	mov	r5, r0
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7ff fef8 	bl	80071c0 <checkerror>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	bf1c      	itt	ne
 80073d4:	6120      	strne	r0, [r4, #16]
 80073d6:	2000      	movne	r0, #0
 80073d8:	e7ea      	b.n	80073b0 <_swistat+0x18>

080073da <_fstat>:
 80073da:	460b      	mov	r3, r1
 80073dc:	b510      	push	{r4, lr}
 80073de:	2100      	movs	r1, #0
 80073e0:	4604      	mov	r4, r0
 80073e2:	2258      	movs	r2, #88	; 0x58
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fc ffdd 	bl	80043a4 <memset>
 80073ea:	4601      	mov	r1, r0
 80073ec:	4620      	mov	r0, r4
 80073ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f2:	f7ff bfd1 	b.w	8007398 <_swistat>

080073f6 <_stat>:
 80073f6:	b538      	push	{r3, r4, r5, lr}
 80073f8:	460d      	mov	r5, r1
 80073fa:	4604      	mov	r4, r0
 80073fc:	2258      	movs	r2, #88	; 0x58
 80073fe:	2100      	movs	r1, #0
 8007400:	4628      	mov	r0, r5
 8007402:	f7fc ffcf 	bl	80043a4 <memset>
 8007406:	4620      	mov	r0, r4
 8007408:	2100      	movs	r1, #0
 800740a:	f000 f811 	bl	8007430 <_swiopen>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	4604      	mov	r4, r0
 8007412:	d00b      	beq.n	800742c <_stat+0x36>
 8007414:	686b      	ldr	r3, [r5, #4]
 8007416:	4629      	mov	r1, r5
 8007418:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800741c:	606b      	str	r3, [r5, #4]
 800741e:	f7ff ffbb 	bl	8007398 <_swistat>
 8007422:	4605      	mov	r5, r0
 8007424:	4620      	mov	r0, r4
 8007426:	f7ff ff8f 	bl	8007348 <_close>
 800742a:	462c      	mov	r4, r5
 800742c:	4620      	mov	r0, r4
 800742e:	bd38      	pop	{r3, r4, r5, pc}

08007430 <_swiopen>:
 8007430:	4b2b      	ldr	r3, [pc, #172]	; (80074e0 <_swiopen+0xb0>)
 8007432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007436:	4681      	mov	r9, r0
 8007438:	460f      	mov	r7, r1
 800743a:	2500      	movs	r5, #0
 800743c:	461e      	mov	r6, r3
 800743e:	b097      	sub	sp, #92	; 0x5c
 8007440:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8007444:	1c61      	adds	r1, r4, #1
 8007446:	d037      	beq.n	80074b8 <_swiopen+0x88>
 8007448:	3501      	adds	r5, #1
 800744a:	2d14      	cmp	r5, #20
 800744c:	d1f8      	bne.n	8007440 <_swiopen+0x10>
 800744e:	f7fc ff7f 	bl	8004350 <__errno>
 8007452:	2318      	movs	r3, #24
 8007454:	f04f 34ff 	mov.w	r4, #4294967295
 8007458:	6003      	str	r3, [r0, #0]
 800745a:	e03d      	b.n	80074d8 <_swiopen+0xa8>
 800745c:	f240 6301 	movw	r3, #1537	; 0x601
 8007460:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8007464:	07ba      	lsls	r2, r7, #30
 8007466:	bf48      	it	mi
 8007468:	f044 0402 	orrmi.w	r4, r4, #2
 800746c:	421f      	tst	r7, r3
 800746e:	bf18      	it	ne
 8007470:	f044 0404 	orrne.w	r4, r4, #4
 8007474:	073b      	lsls	r3, r7, #28
 8007476:	bf48      	it	mi
 8007478:	f024 0404 	bicmi.w	r4, r4, #4
 800747c:	4648      	mov	r0, r9
 800747e:	bf48      	it	mi
 8007480:	f044 0408 	orrmi.w	r4, r4, #8
 8007484:	f8cd 9000 	str.w	r9, [sp]
 8007488:	f7f8 fe62 	bl	8000150 <strlen>
 800748c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007490:	2401      	movs	r4, #1
 8007492:	4620      	mov	r0, r4
 8007494:	4641      	mov	r1, r8
 8007496:	beab      	bkpt	0x00ab
 8007498:	4604      	mov	r4, r0
 800749a:	2c00      	cmp	r4, #0
 800749c:	db07      	blt.n	80074ae <_swiopen+0x7e>
 800749e:	2300      	movs	r3, #0
 80074a0:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 80074a4:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80074a8:	462c      	mov	r4, r5
 80074aa:	6073      	str	r3, [r6, #4]
 80074ac:	e014      	b.n	80074d8 <_swiopen+0xa8>
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7ff fe96 	bl	80071e0 <error>
 80074b4:	4604      	mov	r4, r0
 80074b6:	e00f      	b.n	80074d8 <_swiopen+0xa8>
 80074b8:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 80074bc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80074c0:	46e8      	mov	r8, sp
 80074c2:	d1cb      	bne.n	800745c <_swiopen+0x2c>
 80074c4:	4641      	mov	r1, r8
 80074c6:	4648      	mov	r0, r9
 80074c8:	f7ff ff95 	bl	80073f6 <_stat>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d0c5      	beq.n	800745c <_swiopen+0x2c>
 80074d0:	f7fc ff3e 	bl	8004350 <__errno>
 80074d4:	2311      	movs	r3, #17
 80074d6:	6003      	str	r3, [r0, #0]
 80074d8:	4620      	mov	r0, r4
 80074da:	b017      	add	sp, #92	; 0x5c
 80074dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e0:	20000238 	.word	0x20000238

080074e4 <_get_semihosting_exts>:
 80074e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	4606      	mov	r6, r0
 80074ea:	460f      	mov	r7, r1
 80074ec:	482a      	ldr	r0, [pc, #168]	; (8007598 <_get_semihosting_exts+0xb4>)
 80074ee:	2100      	movs	r1, #0
 80074f0:	4615      	mov	r5, r2
 80074f2:	f7ff ff9d 	bl	8007430 <_swiopen>
 80074f6:	4604      	mov	r4, r0
 80074f8:	462a      	mov	r2, r5
 80074fa:	2100      	movs	r1, #0
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7fc ff51 	bl	80043a4 <memset>
 8007502:	1c63      	adds	r3, r4, #1
 8007504:	d016      	beq.n	8007534 <_get_semihosting_exts+0x50>
 8007506:	4620      	mov	r0, r4
 8007508:	f7ff fe40 	bl	800718c <findslot>
 800750c:	f04f 080c 	mov.w	r8, #12
 8007510:	4681      	mov	r9, r0
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	beab      	bkpt	0x00ab
 8007518:	4680      	mov	r8, r0
 800751a:	4640      	mov	r0, r8
 800751c:	f7ff fe50 	bl	80071c0 <checkerror>
 8007520:	2803      	cmp	r0, #3
 8007522:	dd02      	ble.n	800752a <_get_semihosting_exts+0x46>
 8007524:	1ec3      	subs	r3, r0, #3
 8007526:	42ab      	cmp	r3, r5
 8007528:	dc08      	bgt.n	800753c <_get_semihosting_exts+0x58>
 800752a:	4620      	mov	r0, r4
 800752c:	f7ff ff0c 	bl	8007348 <_close>
 8007530:	f04f 34ff 	mov.w	r4, #4294967295
 8007534:	4620      	mov	r0, r4
 8007536:	b003      	add	sp, #12
 8007538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800753c:	2204      	movs	r2, #4
 800753e:	4620      	mov	r0, r4
 8007540:	eb0d 0102 	add.w	r1, sp, r2
 8007544:	f7ff fe6a 	bl	800721c <_read>
 8007548:	2803      	cmp	r0, #3
 800754a:	ddee      	ble.n	800752a <_get_semihosting_exts+0x46>
 800754c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007550:	2b53      	cmp	r3, #83	; 0x53
 8007552:	d1ea      	bne.n	800752a <_get_semihosting_exts+0x46>
 8007554:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007558:	2b48      	cmp	r3, #72	; 0x48
 800755a:	d1e6      	bne.n	800752a <_get_semihosting_exts+0x46>
 800755c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007560:	2b46      	cmp	r3, #70	; 0x46
 8007562:	d1e2      	bne.n	800752a <_get_semihosting_exts+0x46>
 8007564:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007568:	2b42      	cmp	r3, #66	; 0x42
 800756a:	d1de      	bne.n	800752a <_get_semihosting_exts+0x46>
 800756c:	2201      	movs	r2, #1
 800756e:	4639      	mov	r1, r7
 8007570:	4620      	mov	r0, r4
 8007572:	f7ff fe6d 	bl	8007250 <_swilseek>
 8007576:	2800      	cmp	r0, #0
 8007578:	dbd7      	blt.n	800752a <_get_semihosting_exts+0x46>
 800757a:	462a      	mov	r2, r5
 800757c:	4631      	mov	r1, r6
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff fe4c 	bl	800721c <_read>
 8007584:	4605      	mov	r5, r0
 8007586:	4620      	mov	r0, r4
 8007588:	f7ff fede 	bl	8007348 <_close>
 800758c:	4628      	mov	r0, r5
 800758e:	f7ff fe17 	bl	80071c0 <checkerror>
 8007592:	4604      	mov	r4, r0
 8007594:	e7ce      	b.n	8007534 <_get_semihosting_exts+0x50>
 8007596:	bf00      	nop
 8007598:	08007b9c 	.word	0x08007b9c

0800759c <initialise_semihosting_exts>:
 800759c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800759e:	2100      	movs	r1, #0
 80075a0:	2201      	movs	r2, #1
 80075a2:	4d09      	ldr	r5, [pc, #36]	; (80075c8 <initialise_semihosting_exts+0x2c>)
 80075a4:	4c09      	ldr	r4, [pc, #36]	; (80075cc <initialise_semihosting_exts+0x30>)
 80075a6:	a801      	add	r0, sp, #4
 80075a8:	6029      	str	r1, [r5, #0]
 80075aa:	6022      	str	r2, [r4, #0]
 80075ac:	f7ff ff9a 	bl	80074e4 <_get_semihosting_exts>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	dd07      	ble.n	80075c4 <initialise_semihosting_exts+0x28>
 80075b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80075b8:	f003 0201 	and.w	r2, r3, #1
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	602a      	str	r2, [r5, #0]
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	b003      	add	sp, #12
 80075c6:	bd30      	pop	{r4, r5, pc}
 80075c8:	200001dc 	.word	0x200001dc
 80075cc:	200001e0 	.word	0x200001e0

080075d0 <_has_ext_exit_extended>:
 80075d0:	b510      	push	{r4, lr}
 80075d2:	4c04      	ldr	r4, [pc, #16]	; (80075e4 <_has_ext_exit_extended+0x14>)
 80075d4:	6822      	ldr	r2, [r4, #0]
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	da01      	bge.n	80075de <_has_ext_exit_extended+0xe>
 80075da:	f7ff ffdf 	bl	800759c <initialise_semihosting_exts>
 80075de:	6820      	ldr	r0, [r4, #0]
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	bf00      	nop
 80075e4:	200001dc 	.word	0x200001dc

080075e8 <_has_ext_stdout_stderr>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4c04      	ldr	r4, [pc, #16]	; (80075fc <_has_ext_stdout_stderr+0x14>)
 80075ec:	6822      	ldr	r2, [r4, #0]
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	da01      	bge.n	80075f6 <_has_ext_stdout_stderr+0xe>
 80075f2:	f7ff ffd3 	bl	800759c <initialise_semihosting_exts>
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	200001e0 	.word	0x200001e0

08007600 <initialise_monitor_handles>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	2303      	movs	r3, #3
 8007606:	2400      	movs	r4, #0
 8007608:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80076b8 <initialise_monitor_handles+0xb8>
 800760c:	b085      	sub	sp, #20
 800760e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007612:	f10d 0804 	add.w	r8, sp, #4
 8007616:	9303      	str	r3, [sp, #12]
 8007618:	2501      	movs	r5, #1
 800761a:	9402      	str	r4, [sp, #8]
 800761c:	4628      	mov	r0, r5
 800761e:	4641      	mov	r1, r8
 8007620:	beab      	bkpt	0x00ab
 8007622:	4605      	mov	r5, r0
 8007624:	4a20      	ldr	r2, [pc, #128]	; (80076a8 <initialise_monitor_handles+0xa8>)
 8007626:	4623      	mov	r3, r4
 8007628:	f04f 31ff 	mov.w	r1, #4294967295
 800762c:	4614      	mov	r4, r2
 800762e:	4e1f      	ldr	r6, [pc, #124]	; (80076ac <initialise_monitor_handles+0xac>)
 8007630:	6035      	str	r5, [r6, #0]
 8007632:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007636:	3301      	adds	r3, #1
 8007638:	2b14      	cmp	r3, #20
 800763a:	d1fa      	bne.n	8007632 <initialise_monitor_handles+0x32>
 800763c:	f7ff ffd4 	bl	80075e8 <_has_ext_stdout_stderr>
 8007640:	4d1b      	ldr	r5, [pc, #108]	; (80076b0 <initialise_monitor_handles+0xb0>)
 8007642:	b1d0      	cbz	r0, 800767a <initialise_monitor_handles+0x7a>
 8007644:	f04f 0a03 	mov.w	sl, #3
 8007648:	2304      	movs	r3, #4
 800764a:	f8cd 9004 	str.w	r9, [sp, #4]
 800764e:	2701      	movs	r7, #1
 8007650:	f8cd a00c 	str.w	sl, [sp, #12]
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	4638      	mov	r0, r7
 8007658:	4641      	mov	r1, r8
 800765a:	beab      	bkpt	0x00ab
 800765c:	4683      	mov	fp, r0
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <initialise_monitor_handles+0xb4>)
 8007660:	f8cd 9004 	str.w	r9, [sp, #4]
 8007664:	f8c3 b000 	str.w	fp, [r3]
 8007668:	2308      	movs	r3, #8
 800766a:	f8cd a00c 	str.w	sl, [sp, #12]
 800766e:	9302      	str	r3, [sp, #8]
 8007670:	4638      	mov	r0, r7
 8007672:	4641      	mov	r1, r8
 8007674:	beab      	bkpt	0x00ab
 8007676:	4607      	mov	r7, r0
 8007678:	602f      	str	r7, [r5, #0]
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	bf02      	ittt	eq
 8007680:	4b0c      	ldreq	r3, [pc, #48]	; (80076b4 <initialise_monitor_handles+0xb4>)
 8007682:	681b      	ldreq	r3, [r3, #0]
 8007684:	602b      	streq	r3, [r5, #0]
 8007686:	6833      	ldr	r3, [r6, #0]
 8007688:	2600      	movs	r6, #0
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	6066      	str	r6, [r4, #4]
 800768e:	f7ff ffab 	bl	80075e8 <_has_ext_stdout_stderr>
 8007692:	b130      	cbz	r0, 80076a2 <initialise_monitor_handles+0xa2>
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <initialise_monitor_handles+0xb4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80076a2:	b005      	add	sp, #20
 80076a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a8:	20000238 	.word	0x20000238
 80076ac:	20000230 	.word	0x20000230
 80076b0:	2000022c 	.word	0x2000022c
 80076b4:	20000234 	.word	0x20000234
 80076b8:	08007bb2 	.word	0x08007bb2

080076bc <_isatty>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	f7ff fd65 	bl	800718c <findslot>
 80076c2:	2509      	movs	r5, #9
 80076c4:	4604      	mov	r4, r0
 80076c6:	b920      	cbnz	r0, 80076d2 <_isatty+0x16>
 80076c8:	f7fc fe42 	bl	8004350 <__errno>
 80076cc:	6005      	str	r5, [r0, #0]
 80076ce:	4620      	mov	r0, r4
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
 80076d2:	4628      	mov	r0, r5
 80076d4:	4621      	mov	r1, r4
 80076d6:	beab      	bkpt	0x00ab
 80076d8:	4604      	mov	r4, r0
 80076da:	2c01      	cmp	r4, #1
 80076dc:	d0f7      	beq.n	80076ce <_isatty+0x12>
 80076de:	f7fc fe37 	bl	8004350 <__errno>
 80076e2:	2400      	movs	r4, #0
 80076e4:	4605      	mov	r5, r0
 80076e6:	2613      	movs	r6, #19
 80076e8:	4630      	mov	r0, r6
 80076ea:	4621      	mov	r1, r4
 80076ec:	beab      	bkpt	0x00ab
 80076ee:	4606      	mov	r6, r0
 80076f0:	602e      	str	r6, [r5, #0]
 80076f2:	e7ec      	b.n	80076ce <_isatty+0x12>

080076f4 <_exit>:
 80076f4:	4601      	mov	r1, r0
 80076f6:	b508      	push	{r3, lr}
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	4a01      	ldr	r2, [pc, #4]	; (8007704 <_exit+0x10>)
 80076fe:	f000 f803 	bl	8007708 <_kill_shared>
 8007702:	bf00      	nop
 8007704:	00020026 	.word	0x00020026

08007708 <_kill_shared>:
 8007708:	b507      	push	{r0, r1, r2, lr}
 800770a:	e9cd 2100 	strd	r2, r1, [sp]
 800770e:	f7ff ff5f 	bl	80075d0 <_has_ext_exit_extended>
 8007712:	2800      	cmp	r0, #0
 8007714:	bf14      	ite	ne
 8007716:	2420      	movne	r4, #32
 8007718:	2418      	moveq	r4, #24
 800771a:	f7ff ff59 	bl	80075d0 <_has_ext_exit_extended>
 800771e:	b120      	cbz	r0, 800772a <_kill_shared+0x22>
 8007720:	466d      	mov	r5, sp
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	beab      	bkpt	0x00ab
 8007728:	4604      	mov	r4, r0
 800772a:	9d00      	ldr	r5, [sp, #0]
 800772c:	e7f9      	b.n	8007722 <_kill_shared+0x1a>
	...

08007730 <_kill>:
 8007730:	2906      	cmp	r1, #6
 8007732:	b508      	push	{r3, lr}
 8007734:	bf0c      	ite	eq
 8007736:	4a02      	ldreq	r2, [pc, #8]	; (8007740 <_kill+0x10>)
 8007738:	4a02      	ldrne	r2, [pc, #8]	; (8007744 <_kill+0x14>)
 800773a:	f7ff ffe5 	bl	8007708 <_kill_shared>
 800773e:	bf00      	nop
 8007740:	00020023 	.word	0x00020023
 8007744:	00020026 	.word	0x00020026

08007748 <_init>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr

08007754 <_fini>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr
