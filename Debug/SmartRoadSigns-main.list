
SmartRoadSigns-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008380  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08008490  08008490  00018490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c0  080088c0  000204ec  2**0
                  CONTENTS
  4 .ARM          00000000  080088c0  080088c0  000204ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088c0  080088c0  000204ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088c0  080088c0  000188c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004ec  20000000  080088c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  200004ec  08008db4  000204ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  08008db4  00021718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a689  00000000  00000000  00020515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb6  00000000  00000000  0002ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e8  00000000  00000000  0002dc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b54c  00000000  00000000  00044ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086726  00000000  00000000  00050234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d695a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000422c  00000000  00000000  000d69b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004ec 	.word	0x200004ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008478 	.word	0x08008478

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004f0 	.word	0x200004f0
 800014c:	08008478 	.word	0x08008478

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <SetLED>:

uint16_t alreadySent = 0;  // track how much leds received data
uint32_t currDataId = 0;


void SetLED (int LEDnum, int Red, int Green, int Blue) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
	// store green first as ws2821b requires this order (g,r,b)
	LedData[LEDnum][0] = LEDnum;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	b2d9      	uxtb	r1, r3
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <SetLED+0x54>)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LedData[LEDnum][1] = Green;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	b2d9      	uxtb	r1, r3
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <SetLED+0x54>)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	460a      	mov	r2, r1
 8001144:	705a      	strb	r2, [r3, #1]
	LedData[LEDnum][2] = Red;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	b2d9      	uxtb	r1, r3
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <SetLED+0x54>)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	460a      	mov	r2, r1
 8001154:	709a      	strb	r2, [r3, #2]
	LedData[LEDnum][3] = Blue;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2d9      	uxtb	r1, r3
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SetLED+0x54>)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	70da      	strb	r2, [r3, #3]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	200006c8 	.word	0x200006c8

08001174 <buildNum>:


uint8_t finalMatrix[128] ={0};

void buildNum(uint8_t num1, uint8_t num2) {
 8001174:	b4b0      	push	{r4, r5, r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]


    uint8_t currId = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
    uint8_t frstNumId = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	73bb      	strb	r3, [r7, #14]
    uint8_t secNumId = 7;
 800118c:	2307      	movs	r3, #7
 800118e:	737b      	strb	r3, [r7, #13]

    while (currId != 64) {
 8001190:	e03a      	b.n	8001208 <buildNum+0x94>
        currId+=4;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	3304      	adds	r3, #4
 8001196:	73fb      	strb	r3, [r7, #15]

        if (!num1){ // don't show zero as the first digit of numbers smaller than 10.
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d110      	bne.n	80011c0 <buildNum+0x4c>
        		for (uint8_t j = 0; j < 3; j++) {
 800119e:	2300      	movs	r3, #0
 80011a0:	733b      	strb	r3, [r7, #12]
 80011a2:	e009      	b.n	80011b8 <buildNum+0x44>
        		            finalMatrix[currId] = 0;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	4a3f      	ldr	r2, [pc, #252]	; (80012a4 <buildNum+0x130>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	54d1      	strb	r1, [r2, r3]
        		            currId++;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	3301      	adds	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
        		for (uint8_t j = 0; j < 3; j++) {
 80011b2:	7b3b      	ldrb	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	733b      	strb	r3, [r7, #12]
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d9f2      	bls.n	80011a4 <buildNum+0x30>
 80011be:	e01d      	b.n	80011fc <buildNum+0x88>
        		 }
        }else{
        	for (uint8_t j = 0; j < 3; j++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	72fb      	strb	r3, [r7, #11]
 80011c4:	e017      	b.n	80011f6 <buildNum+0x82>
        	            finalMatrix[currId] = digits[num1][frstNumId][j];
 80011c6:	79f9      	ldrb	r1, [r7, #7]
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	7afc      	ldrb	r4, [r7, #11]
 80011cc:	7bf8      	ldrb	r0, [r7, #15]
 80011ce:	4d36      	ldr	r5, [pc, #216]	; (80012a8 <buildNum+0x134>)
 80011d0:	461a      	mov	r2, r3
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	441a      	add	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	440b      	add	r3, r1
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4413      	add	r3, r2
 80011e0:	442b      	add	r3, r5
 80011e2:	4423      	add	r3, r4
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <buildNum+0x130>)
 80011e8:	541a      	strb	r2, [r3, r0]
        	            currId++;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	3301      	adds	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
        	for (uint8_t j = 0; j < 3; j++) {
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	3301      	adds	r3, #1
 80011f4:	72fb      	strb	r3, [r7, #11]
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d9e4      	bls.n	80011c6 <buildNum+0x52>
        	        }
        }
        currId++;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
        frstNumId++;
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	3301      	adds	r3, #1
 8001206:	73bb      	strb	r3, [r7, #14]
    while (currId != 64) {
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b40      	cmp	r3, #64	; 0x40
 800120c:	d1c1      	bne.n	8001192 <buildNum+0x1e>
    }

    while (currId != 128) {
 800120e:	e03f      	b.n	8001290 <buildNum+0x11c>
        currId+=4;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3304      	adds	r3, #4
 8001214:	73fb      	strb	r3, [r7, #15]
        if ((!num1) && (!num2)){ // don't show zero if it is the velocity
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d113      	bne.n	8001244 <buildNum+0xd0>
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d110      	bne.n	8001244 <buildNum+0xd0>
               for (uint8_t j = 0; j < 3; j++) {
 8001222:	2300      	movs	r3, #0
 8001224:	72bb      	strb	r3, [r7, #10]
 8001226:	e009      	b.n	800123c <buildNum+0xc8>
                finalMatrix[currId] = 0;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <buildNum+0x130>)
 800122c:	2100      	movs	r1, #0
 800122e:	54d1      	strb	r1, [r2, r3]
                currId++;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	3301      	adds	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
               for (uint8_t j = 0; j < 3; j++) {
 8001236:	7abb      	ldrb	r3, [r7, #10]
 8001238:	3301      	adds	r3, #1
 800123a:	72bb      	strb	r3, [r7, #10]
 800123c:	7abb      	ldrb	r3, [r7, #10]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d9f2      	bls.n	8001228 <buildNum+0xb4>
 8001242:	e01f      	b.n	8001284 <buildNum+0x110>
               }
        }
         else{
				for (uint8_t j = 0; j < 3; j++) {
 8001244:	2300      	movs	r3, #0
 8001246:	727b      	strb	r3, [r7, #9]
 8001248:	e019      	b.n	800127e <buildNum+0x10a>
					finalMatrix[currId] = digits[num2][secNumId][2 - j];
 800124a:	79b9      	ldrb	r1, [r7, #6]
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	7a7a      	ldrb	r2, [r7, #9]
 8001250:	f1c2 0402 	rsb	r4, r2, #2
 8001254:	7bf8      	ldrb	r0, [r7, #15]
 8001256:	4d14      	ldr	r5, [pc, #80]	; (80012a8 <buildNum+0x134>)
 8001258:	461a      	mov	r2, r3
 800125a:	0052      	lsls	r2, r2, #1
 800125c:	441a      	add	r2, r3
 800125e:	460b      	mov	r3, r1
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	440b      	add	r3, r1
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	442b      	add	r3, r5
 800126a:	4423      	add	r3, r4
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <buildNum+0x130>)
 8001270:	541a      	strb	r2, [r3, r0]
					currId++;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
				for (uint8_t j = 0; j < 3; j++) {
 8001278:	7a7b      	ldrb	r3, [r7, #9]
 800127a:	3301      	adds	r3, #1
 800127c:	727b      	strb	r3, [r7, #9]
 800127e:	7a7b      	ldrb	r3, [r7, #9]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d9e2      	bls.n	800124a <buildNum+0xd6>
				}
               }
        currId++;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	3301      	adds	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
        secNumId--;
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	3b01      	subs	r3, #1
 800128e:	737b      	strb	r3, [r7, #13]
    while (currId != 128) {
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b80      	cmp	r3, #128	; 0x80
 8001294:	d1bc      	bne.n	8001210 <buildNum+0x9c>

    }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bcb0      	pop	{r4, r5, r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000510 	.word	0x20000510
 80012a8:	20000000 	.word	0x20000000

080012ac <buildExclamationIntoNumbers>:
    }

    WS2812_Send();
}

void buildExclamationIntoNumbers() {
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
	 uint8_t currId = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
	 uint8_t exclId = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71bb      	strb	r3, [r7, #6]

	    while (currId != 64) {
 80012ba:	e01b      	b.n	80012f4 <buildExclamationIntoNumbers+0x48>
	        for (uint8_t j = 0; j < 2; j++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	717b      	strb	r3, [r7, #5]
 80012c0:	e00f      	b.n	80012e2 <buildExclamationIntoNumbers+0x36>
	            finalMatrix[currId] = exclamationPoint[exclId][j];
 80012c2:	79b9      	ldrb	r1, [r7, #6]
 80012c4:	797a      	ldrb	r2, [r7, #5]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4821      	ldr	r0, [pc, #132]	; (8001350 <buildExclamationIntoNumbers+0xa4>)
 80012ca:	0049      	lsls	r1, r1, #1
 80012cc:	4401      	add	r1, r0
 80012ce:	440a      	add	r2, r1
 80012d0:	7811      	ldrb	r1, [r2, #0]
 80012d2:	4a20      	ldr	r2, [pc, #128]	; (8001354 <buildExclamationIntoNumbers+0xa8>)
 80012d4:	54d1      	strb	r1, [r2, r3]
	            currId++;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	3301      	adds	r3, #1
 80012da:	71fb      	strb	r3, [r7, #7]
	        for (uint8_t j = 0; j < 2; j++) {
 80012dc:	797b      	ldrb	r3, [r7, #5]
 80012de:	3301      	adds	r3, #1
 80012e0:	717b      	strb	r3, [r7, #5]
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d9ec      	bls.n	80012c2 <buildExclamationIntoNumbers+0x16>
	        }
	        currId+=6;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	3306      	adds	r3, #6
 80012ec:	71fb      	strb	r3, [r7, #7]
	        exclId++;
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	3301      	adds	r3, #1
 80012f2:	71bb      	strb	r3, [r7, #6]
	    while (currId != 64) {
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b40      	cmp	r3, #64	; 0x40
 80012f8:	d1e0      	bne.n	80012bc <buildExclamationIntoNumbers+0x10>
	    }

	    exclId=7;
 80012fa:	2307      	movs	r3, #7
 80012fc:	71bb      	strb	r3, [r7, #6]
	    while (currId != 128) {
 80012fe:	e01d      	b.n	800133c <buildExclamationIntoNumbers+0x90>
	        for (uint8_t j = 0; j < 2; j++) {
 8001300:	2300      	movs	r3, #0
 8001302:	713b      	strb	r3, [r7, #4]
 8001304:	e011      	b.n	800132a <buildExclamationIntoNumbers+0x7e>
	            finalMatrix[currId] = exclamationPoint[exclId][1 - j];
 8001306:	79b9      	ldrb	r1, [r7, #6]
 8001308:	793b      	ldrb	r3, [r7, #4]
 800130a:	f1c3 0201 	rsb	r2, r3, #1
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <buildExclamationIntoNumbers+0xa4>)
 8001312:	0049      	lsls	r1, r1, #1
 8001314:	4401      	add	r1, r0
 8001316:	440a      	add	r2, r1
 8001318:	7811      	ldrb	r1, [r2, #0]
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <buildExclamationIntoNumbers+0xa8>)
 800131c:	54d1      	strb	r1, [r2, r3]
	            currId++;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	3301      	adds	r3, #1
 8001322:	71fb      	strb	r3, [r7, #7]
	        for (uint8_t j = 0; j < 2; j++) {
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	713b      	strb	r3, [r7, #4]
 800132a:	793b      	ldrb	r3, [r7, #4]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d9ea      	bls.n	8001306 <buildExclamationIntoNumbers+0x5a>
	        }
	        currId+=6;
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3306      	adds	r3, #6
 8001334:	71fb      	strb	r3, [r7, #7]
	        exclId--;
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	3b01      	subs	r3, #1
 800133a:	71bb      	strb	r3, [r7, #6]
	    while (currId != 128) {
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b80      	cmp	r3, #128	; 0x80
 8001340:	d1de      	bne.n	8001300 <buildExclamationIntoNumbers+0x54>
	    }
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200002f0 	.word	0x200002f0
 8001354:	20000510 	.word	0x20000510

08001358 <setSpeedLimit>:

int speedLimit = 10;
volatile int limitSurpassed = 0;

void setSpeedLimit(int limit) {speedLimit = limit;}
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	4a03      	ldr	r2, [pc, #12]	; (8001370 <setSpeedLimit+0x18>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000300 	.word	0x20000300

08001374 <showVelocity>:

void showVelocity(float currVelocity) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    if (currVelocity>speedLimit){
 800137c:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <showVelocity+0x13c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fc8b 	bl	8000c9c <__aeabi_i2f>
 8001386:	4603      	mov	r3, r0
 8001388:	4619      	mov	r1, r3
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fe96 	bl	80010bc <__aeabi_fcmpgt>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <showVelocity+0x2a>
       limitSurpassed=1;
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <showVelocity+0x140>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e002      	b.n	80013a4 <showVelocity+0x30>
       }else{
       limitSurpassed=0;
 800139e:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <showVelocity+0x140>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
    }
    int firstDigit = fmod((currVelocity / 10), 10);
 80013a4:	4944      	ldr	r1, [pc, #272]	; (80014b8 <showVelocity+0x144>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fd80 	bl	8000eac <__aeabi_fdiv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f83a 	bl	8000428 <__aeabi_f2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <showVelocity+0x148>)
 80013ba:	f006 ff15 	bl	80081e8 <fmod>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb37 	bl	8000a38 <__aeabi_d2iz>
 80013ca:	4603      	mov	r3, r0
 80013cc:	60fb      	str	r3, [r7, #12]
    int secondDigit = fmod(currVelocity, 10);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff f82a 	bl	8000428 <__aeabi_f2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <showVelocity+0x148>)
 80013da:	f006 ff05 	bl	80081e8 <fmod>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb27 	bl	8000a38 <__aeabi_d2iz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	60bb      	str	r3, [r7, #8]
    buildNum(firstDigit, secondDigit);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff febb 	bl	8001174 <buildNum>

    if (!limitSurpassed) {
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <showVelocity+0x140>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d120      	bne.n	8001448 <showVelocity+0xd4>
		for (int i = 0; i < 128; i++) {
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e019      	b.n	8001440 <showVelocity+0xcc>
			if (finalMatrix[i] == 1) {
 800140c:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <showVelocity+0x14c>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d108      	bne.n	800142a <showVelocity+0xb6>
				SetLED(i+128, 0, 254, 0);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800141e:	2300      	movs	r3, #0
 8001420:	22fe      	movs	r2, #254	; 0xfe
 8001422:	2100      	movs	r1, #0
 8001424:	f7ff fe7a 	bl	800111c <SetLED>
 8001428:	e007      	b.n	800143a <showVelocity+0xc6>
			} else {
				SetLED(i+128, 0, 0, 0);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001430:	2300      	movs	r3, #0
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	f7ff fe71 	bl	800111c <SetLED>
		for (int i = 0; i < 128; i++) {
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b7f      	cmp	r3, #127	; 0x7f
 8001444:	dde2      	ble.n	800140c <showVelocity+0x98>
			} else {
				SetLED(i+128, 0, 0, 0);
			}
		}
    }
}
 8001446:	e02e      	b.n	80014a6 <showVelocity+0x132>
		for (int i = 0; i < 128; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	e028      	b.n	80014a0 <showVelocity+0x12c>
			if (finalMatrix[i] == 1) {
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <showVelocity+0x14c>)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d108      	bne.n	800146c <showVelocity+0xf8>
				SetLED(i+128, 254, 0, 0);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001460:	2300      	movs	r3, #0
 8001462:	2200      	movs	r2, #0
 8001464:	21fe      	movs	r1, #254	; 0xfe
 8001466:	f7ff fe59 	bl	800111c <SetLED>
 800146a:	e016      	b.n	800149a <showVelocity+0x126>
			} else if (finalMatrix[i]==2){
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <showVelocity+0x14c>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d108      	bne.n	800148a <showVelocity+0x116>
				SetLED(i+128, 254, 254, 0);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800147e:	2300      	movs	r3, #0
 8001480:	22fe      	movs	r2, #254	; 0xfe
 8001482:	21fe      	movs	r1, #254	; 0xfe
 8001484:	f7ff fe4a 	bl	800111c <SetLED>
 8001488:	e007      	b.n	800149a <showVelocity+0x126>
				SetLED(i+128, 0, 0, 0);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001490:	2300      	movs	r3, #0
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	f7ff fe41 	bl	800111c <SetLED>
		for (int i = 0; i < 128; i++) {
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	3301      	adds	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b7f      	cmp	r3, #127	; 0x7f
 80014a4:	ddd3      	ble.n	800144e <showVelocity+0xda>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000300 	.word	0x20000300
 80014b4:	20000590 	.word	0x20000590
 80014b8:	41200000 	.word	0x41200000
 80014bc:	40240000 	.word	0x40240000
 80014c0:	20000510 	.word	0x20000510

080014c4 <WsAddNumberToSignLeft>:
		}
	}
	WS2812_Send();
}

void WsAddNumberToSignLeft(int number) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	// iterate over array with number, start from array[1]
	// for first part of the sign -> start from = 44
	// for second part of the sign -> start from = ?
	int startFrom = 44;
 80014cc:	232c      	movs	r3, #44	; 0x2c
 80014ce:	617b      	str	r3, [r7, #20]
	int pixelsToSet = 21;
 80014d0:	2315      	movs	r3, #21
 80014d2:	613b      	str	r3, [r7, #16]
	while (pixelsToSet != 0) {
 80014d4:	e031      	b.n	800153a <WsAddNumberToSignLeft+0x76>
		for (int i = 1; i <= 7; i++) {
 80014d6:	2301      	movs	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e02b      	b.n	8001534 <WsAddNumberToSignLeft+0x70>
			for (int j = 0; j < 3; j++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	e01f      	b.n	8001522 <WsAddNumberToSignLeft+0x5e>
				if (digits[number][i][j] == 1) {
 80014e2:	481a      	ldr	r0, [pc, #104]	; (800154c <WsAddNumberToSignLeft+0x88>)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	461a      	mov	r2, r3
 80014ea:	0052      	lsls	r2, r2, #1
 80014ec:	441a      	add	r2, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	18c2      	adds	r2, r0, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <WsAddNumberToSignLeft+0x4c>
					SetLED(startFrom, 100, 100, 0);
 8001504:	2300      	movs	r3, #0
 8001506:	2264      	movs	r2, #100	; 0x64
 8001508:	2164      	movs	r1, #100	; 0x64
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff fe06 	bl	800111c <SetLED>
				}
				pixelsToSet--;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	3b01      	subs	r3, #1
 8001514:	613b      	str	r3, [r7, #16]
				startFrom++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
			for (int j = 0; j < 3; j++) {
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b02      	cmp	r3, #2
 8001526:	dddc      	ble.n	80014e2 <WsAddNumberToSignLeft+0x1e>
			}
			startFrom += 5; // skip 5 pixels
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3305      	adds	r3, #5
 800152c:	617b      	str	r3, [r7, #20]
		for (int i = 1; i <= 7; i++) {
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3301      	adds	r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b07      	cmp	r3, #7
 8001538:	ddd0      	ble.n	80014dc <WsAddNumberToSignLeft+0x18>
	while (pixelsToSet != 0) {
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ca      	bne.n	80014d6 <WsAddNumberToSignLeft+0x12>
		}
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <WsAddNumberToSignRight>:

void WsAddNumberToSignRight(int number) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	int startFrom = 292;
 8001558:	f44f 7392 	mov.w	r3, #292	; 0x124
 800155c:	617b      	str	r3, [r7, #20]
	int pixelsToSet = 21;
 800155e:	2315      	movs	r3, #21
 8001560:	613b      	str	r3, [r7, #16]
	while (pixelsToSet != 0) {
 8001562:	e031      	b.n	80015c8 <WsAddNumberToSignRight+0x78>
		for (int i = 7; i >= 1; i--) {
 8001564:	2307      	movs	r3, #7
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e02b      	b.n	80015c2 <WsAddNumberToSignRight+0x72>
			for (int j = 2; j >= 0; j--) {
 800156a:	2302      	movs	r3, #2
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	e01f      	b.n	80015b0 <WsAddNumberToSignRight+0x60>
				if (digits[number][i][j] == 1) {
 8001570:	4819      	ldr	r0, [pc, #100]	; (80015d8 <WsAddNumberToSignRight+0x88>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	461a      	mov	r2, r3
 8001578:	0052      	lsls	r2, r2, #1
 800157a:	441a      	add	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	440b      	add	r3, r1
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	18c2      	adds	r2, r0, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d105      	bne.n	800159e <WsAddNumberToSignRight+0x4e>
					SetLED(startFrom, 100, 100, 0);
 8001592:	2300      	movs	r3, #0
 8001594:	2264      	movs	r2, #100	; 0x64
 8001596:	2164      	movs	r1, #100	; 0x64
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f7ff fdbf 	bl	800111c <SetLED>
				}
				pixelsToSet--;
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	613b      	str	r3, [r7, #16]
				startFrom++;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
			for (int j = 2; j >= 0; j--) {
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dadc      	bge.n	8001570 <WsAddNumberToSignRight+0x20>
			}
			startFrom += 5; // skip 5 pixels
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3305      	adds	r3, #5
 80015ba:	617b      	str	r3, [r7, #20]
		for (int i = 7; i >= 1; i--) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3b01      	subs	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dcd0      	bgt.n	800156a <WsAddNumberToSignRight+0x1a>
	while (pixelsToSet != 0) {
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ca      	bne.n	8001564 <WsAddNumberToSignRight+0x14>
		}
	}
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000

080015dc <WsSetSignPartly>:

void WsSetSignPartly(int from) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	// sets first and last two matricies
	int  currId = from;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 16; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	e024      	b.n	8001638 <WsSetSignPartly+0x5c>
		for (int j = 0; j < 8; j++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e01b      	b.n	800162c <WsSetSignPartly+0x50>
			if (sign[i][j] == 1) {
 80015f4:	4914      	ldr	r1, [pc, #80]	; (8001648 <WsSetSignPartly+0x6c>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	00da      	lsls	r2, r3, #3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d106      	bne.n	8001614 <WsSetSignPartly+0x38>
				SetLED(currId, 100, 0, 0);
 8001606:	2300      	movs	r3, #0
 8001608:	2200      	movs	r2, #0
 800160a:	2164      	movs	r1, #100	; 0x64
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	f7ff fd85 	bl	800111c <SetLED>
 8001612:	e005      	b.n	8001620 <WsSetSignPartly+0x44>
			} else {
				SetLED(currId, 0, 0, 0);
 8001614:	2300      	movs	r3, #0
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff fd7e 	bl	800111c <SetLED>
			}
			currId++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 8; j++) {
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b07      	cmp	r3, #7
 8001630:	dde0      	ble.n	80015f4 <WsSetSignPartly+0x18>
	for (int i = 0; i < 16; i++) {
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	3301      	adds	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	ddd7      	ble.n	80015ee <WsSetSignPartly+0x12>
		}
	}
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000f0 	.word	0x200000f0

0800164c <WsSetSign>:

void WsSetSign(int currVelocity) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	WsSetSignPartly(0);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff ffc1 	bl	80015dc <WsSetSignPartly>
    int firstDigitOfLimit = fmod((speedLimit / 10), 10);
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <WsSetSign+0x90>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <WsSetSign+0x94>)
 8001660:	fb82 1203 	smull	r1, r2, r2, r3
 8001664:	1092      	asrs	r2, r2, #2
 8001666:	17db      	asrs	r3, r3, #31
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe feca 	bl	8000404 <__aeabi_i2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <WsSetSign+0x98>)
 8001676:	f006 fdb7 	bl	80081e8 <fmod>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff f9d9 	bl	8000a38 <__aeabi_d2iz>
 8001686:	4603      	mov	r3, r0
 8001688:	60fb      	str	r3, [r7, #12]
    	WsAddNumberToSignLeft(1);
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff ff1a 	bl	80014c4 <WsAddNumberToSignLeft>
	// two matrices are ready
	showVelocity(currVelocity);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fb03 	bl	8000c9c <__aeabi_i2f>
 8001696:	4603      	mov	r3, r0
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe6b 	bl	8001374 <showVelocity>
	// four matrices are ready
	WsSetSignPartly(256);
 800169e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016a2:	f7ff ff9b 	bl	80015dc <WsSetSignPartly>
	int secondDigitOfLimit = fmod(speedLimit, 10);
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <WsSetSign+0x90>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe feaa 	bl	8000404 <__aeabi_i2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <WsSetSign+0x98>)
 80016b6:	f006 fd97 	bl	80081e8 <fmod>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f9b9 	bl	8000a38 <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	60bb      	str	r3, [r7, #8]
	WsAddNumberToSignRight(0);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff ff40 	bl	8001550 <WsAddNumberToSignRight>

	WS2812_Send();
 80016d0:	f000 fb06 	bl	8001ce0 <WS2812_Send>
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000300 	.word	0x20000300
 80016e0:	66666667 	.word	0x66666667
 80016e4:	40240000 	.word	0x40240000

080016e8 <HAL_TIM_PeriodElapsedCallback>:


/* Speed radar code START*/
volatile uint32_t tim1Overflows = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    if (htim -> Instance == TIM1) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d104      	bne.n	8001704 <HAL_TIM_PeriodElapsedCallback+0x1c>
        ++tim1Overflows;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001702:	6013      	str	r3, [r2, #0]
    }
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40012c00 	.word	0x40012c00
 8001714:	20000594 	.word	0x20000594

08001718 <pushVelocity>:
int periodEnds[VEL_BUFFER_SIZE];
float frequencies[VEL_BUFFER_SIZE];
volatile int periodLengths[VEL_BUFFER_SIZE];
uint32_t timOverflows[VEL_BUFFER_SIZE];

void pushVelocity(float currVelocity, int currRise, int currFall, int currperiodLength, float currFrequnecy, uint32_t currOverflows) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]

	if (currVelocity<100){  // due to the high level of noise in the HB100 radar, frequencies higher then approx. 2kHz (i.e. 100 km/h) are dismissed
 8001726:	4922      	ldr	r1, [pc, #136]	; (80017b0 <pushVelocity+0x98>)
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff fca9 	bl	8001080 <__aeabi_fcmplt>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d100      	bne.n	8001736 <pushVelocity+0x1e>
    }
		if (currVelocityIndex >VEL_BUFFER_SIZE-1){  // make the buffer(array) cyclical, replace old elements with the new ones
			currVelocityIndex = 0;
		}
  }
}
 8001734:	e038      	b.n	80017a8 <pushVelocity+0x90>
	    velocities[currVelocityIndex] = currVelocity;
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <pushVelocity+0x9c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	491f      	ldr	r1, [pc, #124]	; (80017b8 <pushVelocity+0xa0>)
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		periodStarts[currVelocityIndex] = currRise;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <pushVelocity+0x9c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	491d      	ldr	r1, [pc, #116]	; (80017bc <pushVelocity+0xa4>)
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		periodEnds[currVelocityIndex] = currFall;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <pushVelocity+0x9c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <pushVelocity+0xa8>)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		periodLengths[currVelocityIndex] = currperiodLength;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <pushVelocity+0x9c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4919      	ldr	r1, [pc, #100]	; (80017c4 <pushVelocity+0xac>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		frequencies[currVelocityIndex] = currFrequnecy;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <pushVelocity+0x9c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4917      	ldr	r1, [pc, #92]	; (80017c8 <pushVelocity+0xb0>)
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timOverflows[currVelocityIndex] = currOverflows;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <pushVelocity+0x9c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4915      	ldr	r1, [pc, #84]	; (80017cc <pushVelocity+0xb4>)
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		currVelocityIndex++;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <pushVelocity+0x9c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <pushVelocity+0x9c>)
 8001786:	6013      	str	r3, [r2, #0]
    if (velArrayOccupied<VEL_BUFFER_SIZE){  // keep track of how many elements are in the velocity buffer
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <pushVelocity+0xb8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b63      	cmp	r3, #99	; 0x63
 800178e:	dc04      	bgt.n	800179a <pushVelocity+0x82>
      velArrayOccupied++;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <pushVelocity+0xb8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <pushVelocity+0xb8>)
 8001798:	6013      	str	r3, [r2, #0]
		if (currVelocityIndex >VEL_BUFFER_SIZE-1){  // make the buffer(array) cyclical, replace old elements with the new ones
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <pushVelocity+0x9c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b63      	cmp	r3, #99	; 0x63
 80017a0:	dd02      	ble.n	80017a8 <pushVelocity+0x90>
			currVelocityIndex = 0;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <pushVelocity+0x9c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	42c80000 	.word	0x42c80000
 80017b4:	200005a8 	.word	0x200005a8
 80017b8:	200013a0 	.word	0x200013a0
 80017bc:	20001080 	.word	0x20001080
 80017c0:	20000ccc 	.word	0x20000ccc
 80017c4:	20000ea4 	.word	0x20000ea4
 80017c8:	20001574 	.word	0x20001574
 80017cc:	20001210 	.word	0x20001210
 80017d0:	200005ac 	.word	0x200005ac

080017d4 <reloadVelBuffer>:
void reloadVelBuffer() {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
	// velocity buffer is reset after every "analysis" in the while loop of the main function
	currVelocityIndex=0;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <reloadVelBuffer+0x70>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
    velArrayOccupied=0;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <reloadVelBuffer+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
	for(int i=0;i<VEL_BUFFER_SIZE;i++){
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	e022      	b.n	8001832 <reloadVelBuffer+0x5e>
		velocities[i] = 0;
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <reloadVelBuffer+0x78>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				periodStarts[i] = 0;
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <reloadVelBuffer+0x7c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2100      	movs	r1, #0
 80017fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				periodEnds[i] = 0;
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <reloadVelBuffer+0x80>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2100      	movs	r1, #0
 8001808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				periodLengths[i] = 0;
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <reloadVelBuffer+0x84>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2100      	movs	r1, #0
 8001812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				frequencies[i] = 0;
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <reloadVelBuffer+0x88>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				timOverflows[i] = 0;
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <reloadVelBuffer+0x8c>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2100      	movs	r1, #0
 8001828:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<VEL_BUFFER_SIZE;i++){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b63      	cmp	r3, #99	; 0x63
 8001836:	ddd9      	ble.n	80017ec <reloadVelBuffer+0x18>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	200005a8 	.word	0x200005a8
 8001848:	200005ac 	.word	0x200005ac
 800184c:	200013a0 	.word	0x200013a0
 8001850:	20001080 	.word	0x20001080
 8001854:	20000ccc 	.word	0x20000ccc
 8001858:	20000ea4 	.word	0x20000ea4
 800185c:	20001574 	.word	0x20001574
 8001860:	20001210 	.word	0x20001210

08001864 <insertionSort>:



void insertionSort(float arr[], int n)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  // taken from https://www.geeksforgeeks.org/c-program-for-insertion-sort/
    int i, j;
    float key;
    for (i = 1; i < n; i++) {
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e030      	b.n	80018d6 <insertionSort+0x72>
        key = arr[i];
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
        j = i - 1;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3b01      	subs	r3, #1
 8001884:	613b      	str	r3, [r7, #16]

        while (j >= 0 && arr[j] > key) {
 8001886:	e00d      	b.n	80018a4 <insertionSort+0x40>
            arr[j + 1] = arr[j];
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	441a      	add	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	3301      	adds	r3, #1
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	440b      	add	r3, r1
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	601a      	str	r2, [r3, #0]
            j = j - 1;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
        while (j >= 0 && arr[j] > key) {
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <insertionSort+0x5e>
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff fbe2 	bl	8001080 <__aeabi_fcmplt>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e2      	bne.n	8001888 <insertionSort+0x24>
        }
        arr[j + 1] = key;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	3301      	adds	r3, #1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n; i++) {
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbca      	blt.n	8001874 <insertionSort+0x10>
    }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <findAvg>:

float findAvg(float arr[VEL_BUFFER_SIZE], int arr_len) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    // find 25, 75 percentiles, and calculate the mean of the interval between those values

    if (velArrayOccupied <4){  // assume the velocity is zero if only a few velocities are measured(this signifies low frequencies -> near zero speed)
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <findAvg+0xc4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	dc02      	bgt.n	8001900 <findAvg+0x18>
        return 0.0;
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e051      	b.n	80019a4 <findAvg+0xbc>
    }

    insertionSort(arr, velArrayOccupied-1);  // sort and perform the algorithm only on non-zero values
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <findAvg+0xc4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffab 	bl	8001864 <insertionSort>

    int lowerPercentile = velArrayOccupied * 0.25;
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <findAvg+0xc4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fd76 	bl	8000404 <__aeabi_i2d>
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <findAvg+0xc8>)
 800191e:	f7fe fddb 	bl	80004d8 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f885 	bl	8000a38 <__aeabi_d2iz>
 800192e:	4603      	mov	r3, r0
 8001930:	60fb      	str	r3, [r7, #12]
    int highPercentile = velArrayOccupied * 0.75;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <findAvg+0xc4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fd64 	bl	8000404 <__aeabi_i2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <findAvg+0xcc>)
 8001942:	f7fe fdc9 	bl	80004d8 <__aeabi_dmul>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f873 	bl	8000a38 <__aeabi_d2iz>
 8001952:	4603      	mov	r3, r0
 8001954:	60bb      	str	r3, [r7, #8]

    float sum = 0;
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
    for (int i = lowerPercentile +1; i < highPercentile; i++) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e00d      	b.n	8001980 <findAvg+0x98>
        sum += arr[i];
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	6978      	ldr	r0, [r7, #20]
 8001972:	f7ff f8df 	bl	8000b34 <__addsf3>
 8001976:	4603      	mov	r3, r0
 8001978:	617b      	str	r3, [r7, #20]
    for (int i = lowerPercentile +1; i < highPercentile; i++) {
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	3301      	adds	r3, #1
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbed      	blt.n	8001964 <findAvg+0x7c>
    }

    return sum / (velArrayOccupied / 2);
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <findAvg+0xc4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0fda      	lsrs	r2, r3, #31
 800198e:	4413      	add	r3, r2
 8001990:	105b      	asrs	r3, r3, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f982 	bl	8000c9c <__aeabi_i2f>
 8001998:	4603      	mov	r3, r0
 800199a:	4619      	mov	r1, r3
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f7ff fa85 	bl	8000eac <__aeabi_fdiv>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200005ac 	.word	0x200005ac
 80019b0:	3fd00000 	.word	0x3fd00000
 80019b4:	3fe80000 	.word	0x3fe80000

080019b8 <HAL_TIM_IC_CaptureCallback>:
float frequency;
float velocity;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim) // is called whenever rising edge is captured

{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
    if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt is triggered in channel 1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7f1b      	ldrb	r3, [r3, #28]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d171      	bne.n	8001aac <HAL_TIM_IC_CaptureCallback+0xf4>
    {
        if (!periodStartCaptured)
 80019c8:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_TIM_IC_CaptureCallback+0x34>
        {
            periodStartTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80019d0:	2100      	movs	r1, #0
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f002 fed0 	bl	8004778 <HAL_TIM_ReadCapturedValue>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a3c      	ldr	r2, [pc, #240]	; (8001acc <HAL_TIM_IC_CaptureCallback+0x114>)
 80019dc:	6013      	str	r3, [r2, #0]
            periodStartCaptured = 1;
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
            // reset previous overflows which could have built up while the Capture compare interrupts were disabled during sending data to the matrix
            tim1Overflows = 0;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x118>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
            periodStartTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
            tim1Overflows = 0;  // reset the overflows as previous overflows should not be counted in the times of the future periods
            periodStartCaptured=1;
        }
    }
}
 80019ea:	e05f      	b.n	8001aac <HAL_TIM_IC_CaptureCallback+0xf4>
            periodEndTime = 65535 * tim1Overflows + HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  //
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x118>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	1a9c      	subs	r4, r3, r2
 80019f6:	2100      	movs	r1, #0
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f002 febd 	bl	8004778 <HAL_TIM_ReadCapturedValue>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4423      	add	r3, r4
 8001a02:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a04:	6013      	str	r3, [r2, #0]
            periodLength = periodEndTime - periodStartTime; // duration of period
 8001a06:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a12:	6013      	str	r3, [r2, #0]
            frequency = 1028500.0 / periodLength;
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fce3 	bl	80003e4 <__aeabi_ui2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	a125      	add	r1, pc, #148	; (adr r1, 8001ab8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a28:	f7fe fe80 	bl	800072c <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f828 	bl	8000a88 <__aeabi_d2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x124>)
 8001a3c:	6013      	str	r3, [r2, #0]
            velocity = 51308.0/periodLength;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fcce 	bl	80003e4 <__aeabi_ui2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	a11c      	add	r1, pc, #112	; (adr r1, 8001ac0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a52:	f7fe fe6b 	bl	800072c <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f813 	bl	8000a88 <__aeabi_d2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001a66:	6013      	str	r3, [r2, #0]
            pushVelocity(velocity, periodStartTime, periodEndTime,periodLength, frequency,tim1Overflows);
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461c      	mov	r4, r3
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x124>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	9201      	str	r2, [sp, #4]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	f7ff fe43 	bl	8001718 <pushVelocity>
            periodStartTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f002 fe6f 	bl	8004778 <HAL_TIM_ReadCapturedValue>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001a9e:	6013      	str	r3, [r2, #0]
            tim1Overflows = 0;  // reset the overflows as previous overflows should not be counted in the times of the future periods
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
            periodStartCaptured=1;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	412f6328 	.word	0x412f6328
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40e90d80 	.word	0x40e90d80
 8001ac8:	200005a4 	.word	0x200005a4
 8001acc:	20000598 	.word	0x20000598
 8001ad0:	20000594 	.word	0x20000594
 8001ad4:	2000059c 	.word	0x2000059c
 8001ad8:	200005a0 	.word	0x200005a0
 8001adc:	20000cc8 	.word	0x20000cc8
 8001ae0:	20001034 	.word	0x20001034

08001ae4 <HAL_TIM_PWM_PulseFinishedCallback>:

/* Speed radar code END*/

/* Matrix code START*/

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	// here we set second part of pwmData
	uint8_t indx = 24;
 8001aec:	2318      	movs	r3, #24
 8001aee:	75fb      	strb	r3, [r7, #23]
	if (alreadySent < MAX_LED + 2) {
 8001af0:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001af8:	d242      	bcs.n	8001b80 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>
		uint32_t color;
		color = ((LedData[currDataId][1]<<16) | (LedData[currDataId][2]<<8) | (LedData[currDataId][3]));
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4936      	ldr	r1, [pc, #216]	; (8001be8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	789b      	ldrb	r3, [r3, #2]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	431a      	orrs	r2, r3
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4932      	ldr	r1, [pc, #200]	; (8001be8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	78db      	ldrb	r3, [r3, #3]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
		for (int j = 23; j >= 0; j--) {
 8001b28:	2317      	movs	r3, #23
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e019      	b.n	8001b62 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
			if (color&(1<<j)) {
 8001b2e:	2201      	movs	r2, #1
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
				pwmData[indx] = 57; // if the bit is 1, the duty cycle is 64%
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001b44:	2139      	movs	r1, #57	; 0x39
 8001b46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001b4a:	e004      	b.n	8001b56 <HAL_TIM_PWM_PulseFinishedCallback+0x72>
			} else {
				pwmData[indx] = 29;  // if the bit is 0, the duty cycle is 32%
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001b50:	211d      	movs	r1, #29
 8001b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	75fb      	strb	r3, [r7, #23]
		for (int j = 23; j >= 0; j--) {
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	dae2      	bge.n	8001b2e <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
		}
		currDataId++;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001b70:	6013      	str	r3, [r2, #0]
		alreadySent++;
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001b7c:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
		// enable the Capture Compare interrupts, which were temporarily disabled in the while loop of the main function to not interfere with the matrix
        __HAL_TIM_ENABLE_IT( & htim1, TIM_IT_CC1);

	}
}
 8001b7e:	e02b      	b.n	8001bd8 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
	} else if (alreadySent < MAX_LED + 2) {
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001b88:	d214      	bcs.n	8001bb4 <HAL_TIM_PWM_PulseFinishedCallback+0xd0>
		for (int i = indx; i < 48; i++) {
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e007      	b.n	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
			pwmData[i] = 0;
 8001b90:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2100      	movs	r1, #0
 8001b96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = indx; i < 48; i++) {
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ba4:	ddf4      	ble.n	8001b90 <HAL_TIM_PWM_PulseFinishedCallback+0xac>
		alreadySent++;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001bb0:	801a      	strh	r2, [r3, #0]
}
 8001bb2:	e011      	b.n	8001bd8 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>
		alreadySent = 0;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
		currDataId = 0;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8001bc4:	f002 f89e 	bl	8003d04 <HAL_TIM_PWM_Stop_DMA>
        __HAL_TIM_ENABLE_IT( & htim1, TIM_IT_CC1);
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0202 	orr.w	r2, r2, #2
 8001bd6:	60da      	str	r2, [r3, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000508 	.word	0x20000508
 8001be4:	2000050c 	.word	0x2000050c
 8001be8:	200006c8 	.word	0x200006c8
 8001bec:	20000668 	.word	0x20000668
 8001bf0:	20000e5c 	.word	0x20000e5c
 8001bf4:	20001038 	.word	0x20001038

08001bf8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:


void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	uint8_t indx = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]
	if (alreadySent < MAX_LED) {
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001c0c:	d242      	bcs.n	8001c94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x9c>
		uint32_t color;
		color = ((LedData[currDataId][1]<<16) | (LedData[currDataId][2]<<8) | (LedData[currDataId][3]));
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xdc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a31      	ldr	r2, [pc, #196]	; (8001cd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>)
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	041a      	lsls	r2, r3, #16
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xdc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	492d      	ldr	r1, [pc, #180]	; (8001cd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>)
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	789b      	ldrb	r3, [r3, #2]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xdc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4929      	ldr	r1, [pc, #164]	; (8001cd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>)
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	78db      	ldrb	r3, [r3, #3]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]

		for (int j=23; j>=0; j--) {
 8001c3c:	2317      	movs	r3, #23
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	e019      	b.n	8001c76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x7e>
			if (color&(1<<j)) {
 8001c42:	2201      	movs	r2, #1
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
				pwmData[indx] = 57; // if the bit is 1, the duty cycle is 64%
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>)
 8001c58:	2139      	movs	r1, #57	; 0x39
 8001c5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001c5e:	e004      	b.n	8001c6a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x72>
			} else {
				pwmData[indx] = 29;  // if the bit is 0, the duty cycle is 32%
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>)
 8001c64:	211d      	movs	r1, #29
 8001c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	75fb      	strb	r3, [r7, #23]
		for (int j=23; j>=0; j--) {
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	dae2      	bge.n	8001c42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4a>
		}
		currDataId++;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xdc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xdc>)
 8001c84:	6013      	str	r3, [r2, #0]
		alreadySent++;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 8001c90:	801a      	strh	r2, [r3, #0]
		for (int i = indx; i < 24; i++) {
			pwmData[i] = 0;
		}
		alreadySent++;
	}
}
 8001c92:	e018      	b.n	8001cc6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xce>
	} else if (alreadySent < MAX_LED + 2) {
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001c9c:	d213      	bcs.n	8001cc6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xce>
		for (int i = indx; i < 24; i++) {
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e007      	b.n	8001cb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xbc>
			pwmData[i] = 0;
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = indx; i < 24; i++) {
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b17      	cmp	r3, #23
 8001cb8:	ddf4      	ble.n	8001ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xac>
		alreadySent++;
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 8001cc4:	801a      	strh	r2, [r3, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000508 	.word	0x20000508
 8001cd4:	2000050c 	.word	0x2000050c
 8001cd8:	200006c8 	.word	0x200006c8
 8001cdc:	20000668 	.word	0x20000668

08001ce0 <WS2812_Send>:


void WS2812_Send (void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
	uint32_t color;  //32 bit variable to store 24 bits of color

	for (uint16_t i = 0; i < 2; i++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	e03e      	b.n	8001d6e <WS2812_Send+0x8e>
		color = ((LedData[currDataId][1]<<16) | (LedData[currDataId][2]<<8) | (LedData[currDataId][3])); // green red blue
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <WS2812_Send+0xb8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <WS2812_Send+0xbc>)
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <WS2812_Send+0xb8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4926      	ldr	r1, [pc, #152]	; (8001d9c <WS2812_Send+0xbc>)
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	789b      	ldrb	r3, [r3, #2]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <WS2812_Send+0xb8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4922      	ldr	r1, [pc, #136]	; (8001d9c <WS2812_Send+0xbc>)
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	78db      	ldrb	r3, [r3, #3]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	603b      	str	r3, [r7, #0]

		for (int j=23; j>=0; j--) {
 8001d1e:	2317      	movs	r3, #23
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	e019      	b.n	8001d58 <WS2812_Send+0x78>
			if (color&(1<<j)) {
 8001d24:	2201      	movs	r2, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <WS2812_Send+0x62>
				pwmData[indx] = 57; // if the bit is 1, the duty cycle is 64%
 8001d36:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <WS2812_Send+0xc0>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2139      	movs	r1, #57	; 0x39
 8001d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d40:	e004      	b.n	8001d4c <WS2812_Send+0x6c>
			} else {
				pwmData[indx] = 29;  // if the bit is 0, the duty cycle is 32%
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <WS2812_Send+0xc0>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	211d      	movs	r1, #29
 8001d48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
		for (int j=23; j>=0; j--) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	dae2      	bge.n	8001d24 <WS2812_Send+0x44>
		}
		currDataId++;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <WS2812_Send+0xb8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <WS2812_Send+0xb8>)
 8001d66:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < 2; i++) {
 8001d68:	897b      	ldrh	r3, [r7, #10]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d9bd      	bls.n	8001cf0 <WS2812_Send+0x10>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <WS2812_Send+0xc0>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <WS2812_Send+0xc4>)
 8001d7e:	f001 fe27 	bl	80039d0 <HAL_TIM_PWM_Start_DMA>
	alreadySent += 2;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <WS2812_Send+0xc8>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	3302      	adds	r3, #2
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <WS2812_Send+0xc8>)
 8001d8c:	801a      	strh	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000050c 	.word	0x2000050c
 8001d9c:	200006c8 	.word	0x200006c8
 8001da0:	20000668 	.word	0x20000668
 8001da4:	20000e5c 	.word	0x20000e5c
 8001da8:	20000508 	.word	0x20000508

08001dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db2:	f000 fbbb 	bl	800252c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db6:	f000 f84d 	bl	8001e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dba:	f000 f999 	bl	80020f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dbe:	f000 f979 	bl	80020b4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001dc2:	f000 f88d 	bl	8001ee0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001dc6:	f000 f8ff 	bl	8001fc8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

    initialise_monitor_handles();  // for semihosting
 8001dca:	f006 f969 	bl	80080a0 <initialise_monitor_handles>
    HAL_TIM_Base_Start_IT( & htim1);
 8001dce:	481e      	ldr	r0, [pc, #120]	; (8001e48 <main+0x9c>)
 8001dd0:	f001 fd54 	bl	800387c <HAL_TIM_Base_Start_IT>


    /* Speed radar code START */
    HAL_TIM_IC_Start_IT( & htim1, TIM_CHANNEL_1); // start input capture in interrupt mode for timer 1
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	481c      	ldr	r0, [pc, #112]	; (8001e48 <main+0x9c>)
 8001dd8:	f002 f8aa 	bl	8003f30 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT( & htim1, TIM_IT_CC1);
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <main+0x9c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <main+0x9c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0202 	orr.w	r2, r2, #2
 8001dea:	60da      	str	r2, [r3, #12]
    uint32_t analysisNext = HAL_GetTick();
 8001dec:	f000 fbf6 	bl	80025dc <HAL_GetTick>
 8001df0:	6078      	str	r0, [r7, #4]

    /* Speed radar code END */


    buildExclamationIntoNumbers();
 8001df2:	f7ff fa5b 	bl	80012ac <buildExclamationIntoNumbers>
    setSpeedLimit(10);
 8001df6:	200a      	movs	r0, #10
 8001df8:	f7ff faae 	bl	8001358 <setSpeedLimit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

              if (HAL_GetTick() >= analysisNext) {
 8001dfc:	f000 fbee 	bl	80025dc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d8f9      	bhi.n	8001dfc <main+0x50>
                __HAL_TIM_DISABLE_IT( & htim1, TIM_IT_CC1);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <main+0x9c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <main+0x9c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0202 	bic.w	r2, r2, #2
 8001e16:	60da      	str	r2, [r3, #12]

                float avgVel = findAvg( & velocities, VEL_BUFFER_SIZE);
 8001e18:	2164      	movs	r1, #100	; 0x64
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <main+0xa0>)
 8001e1c:	f7ff fd64 	bl	80018e8 <findAvg>
 8001e20:	6038      	str	r0, [r7, #0]
                reloadVelBuffer();
 8001e22:	f7ff fcd7 	bl	80017d4 <reloadVelBuffer>
//                WsImgSet(no_stopping_or_parking);
                WsSetSign(avgVel);
 8001e26:	6838      	ldr	r0, [r7, #0]
 8001e28:	f7ff f952 	bl	80010d0 <__aeabi_f2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fc0c 	bl	800164c <WsSetSign>

                analysisNext = HAL_GetTick() + analysisEvery;
 8001e34:	f000 fbd2 	bl	80025dc <HAL_GetTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	22c8      	movs	r2, #200	; 0xc8
 8001e3c:	4413      	add	r3, r2
 8001e3e:	607b      	str	r3, [r7, #4]
                periodStartCaptured = 0;  // discard the previous unfinished period length measurements
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <main+0xa4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
              if (HAL_GetTick() >= analysisNext) {
 8001e46:	e7d9      	b.n	8001dfc <main+0x50>
 8001e48:	20001038 	.word	0x20001038
 8001e4c:	200013a0 	.word	0x200013a0
 8001e50:	200005a4 	.word	0x200005a4

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b090      	sub	sp, #64	; 0x40
 8001e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5a:	f107 0318 	add.w	r3, r7, #24
 8001e5e:	2228      	movs	r2, #40	; 0x28
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fa04 	bl	8005270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 f8b5 	bl	800300c <HAL_RCC_OscConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ea8:	f000 f97a 	bl	80021a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 fb20 	bl	800350c <HAL_RCC_ClockConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ed2:	f000 f965 	bl	80021a0 <Error_Handler>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3740      	adds	r7, #64	; 0x40
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	f107 0318 	add.w	r3, r7, #24
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001efe:	463b      	mov	r3, r7
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f0c:	4a2d      	ldr	r2, [pc, #180]	; (8001fc4 <MX_TIM1_Init+0xe4>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f12:	2247      	movs	r2, #71	; 0x47
 8001f14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f36:	4822      	ldr	r0, [pc, #136]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f38:	f001 fc50 	bl	80037dc <HAL_TIM_Base_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001f42:	f000 f92d 	bl	80021a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	4619      	mov	r1, r3
 8001f52:	481b      	ldr	r0, [pc, #108]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f54:	f002 fb4c 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f5e:	f000 f91f 	bl	80021a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f62:	4817      	ldr	r0, [pc, #92]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f64:	f001 ff8c 	bl	8003e80 <HAL_TIM_IC_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001f6e:	f000 f917 	bl	80021a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001f82:	f003 f8db 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001f8c:	f000 f908 	bl	80021a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f90:	2300      	movs	r3, #0
 8001f92:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f94:	2301      	movs	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <MX_TIM1_Init+0xe0>)
 8001fa8:	f002 f9d0 	bl	800434c <HAL_TIM_IC_ConfigChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001fb2:	f000 f8f5 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20001038 	.word	0x20001038
 8001fc4:	40012c00 	.word	0x40012c00

08001fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	; 0x38
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <MX_TIM4_Init+0xe4>)
 8001ffa:	4a2d      	ldr	r2, [pc, #180]	; (80020b0 <MX_TIM4_Init+0xe8>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <MX_TIM4_Init+0xe4>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <MX_TIM4_Init+0xe4>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90-1;
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <MX_TIM4_Init+0xe4>)
 800200c:	2259      	movs	r2, #89	; 0x59
 800200e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <MX_TIM4_Init+0xe4>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <MX_TIM4_Init+0xe4>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800201c:	4823      	ldr	r0, [pc, #140]	; (80020ac <MX_TIM4_Init+0xe4>)
 800201e:	f001 fbdd 	bl	80037dc <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002028:	f000 f8ba 	bl	80021a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002036:	4619      	mov	r1, r3
 8002038:	481c      	ldr	r0, [pc, #112]	; (80020ac <MX_TIM4_Init+0xe4>)
 800203a:	f002 fad9 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002044:	f000 f8ac 	bl	80021a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002048:	4818      	ldr	r0, [pc, #96]	; (80020ac <MX_TIM4_Init+0xe4>)
 800204a:	f001 fc69 	bl	8003920 <HAL_TIM_PWM_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002054:	f000 f8a4 	bl	80021a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4619      	mov	r1, r3
 8002066:	4811      	ldr	r0, [pc, #68]	; (80020ac <MX_TIM4_Init+0xe4>)
 8002068:	f003 f868 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002072:	f000 f895 	bl	80021a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002076:	2360      	movs	r3, #96	; 0x60
 8002078:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2200      	movs	r2, #0
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	; (80020ac <MX_TIM4_Init+0xe4>)
 800208e:	f002 f9f1 	bl	8004474 <HAL_TIM_PWM_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002098:	f000 f882 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <MX_TIM4_Init+0xe4>)
 800209e:	f000 f957 	bl	8002350 <HAL_TIM_MspPostInit>

}
 80020a2:	bf00      	nop
 80020a4:	3738      	adds	r7, #56	; 0x38
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000e5c 	.word	0x20000e5c
 80020b0:	40000800 	.word	0x40000800

080020b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_DMA_Init+0x38>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <MX_DMA_Init+0x38>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6153      	str	r3, [r2, #20]
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_DMA_Init+0x38>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	200b      	movs	r0, #11
 80020d8:	f000 fb61 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020dc:	200b      	movs	r0, #11
 80020de:	f000 fb7a 	bl	80027d6 <HAL_NVIC_EnableIRQ>

}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <MX_GPIO_Init+0xa8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a23      	ldr	r2, [pc, #140]	; (8002198 <MX_GPIO_Init+0xa8>)
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <MX_GPIO_Init+0xa8>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <MX_GPIO_Init+0xa8>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <MX_GPIO_Init+0xa8>)
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_GPIO_Init+0xa8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_GPIO_Init+0xa8>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a17      	ldr	r2, [pc, #92]	; (8002198 <MX_GPIO_Init+0xa8>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_GPIO_Init+0xa8>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_GPIO_Init+0xa8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <MX_GPIO_Init+0xa8>)
 8002152:	f043 0308 	orr.w	r3, r3, #8
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_GPIO_Init+0xa8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216a:	480c      	ldr	r0, [pc, #48]	; (800219c <MX_GPIO_Init+0xac>)
 800216c:	f000 ff36 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002176:	2301      	movs	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2302      	movs	r3, #2
 8002180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4619      	mov	r1, r3
 8002188:	4804      	ldr	r0, [pc, #16]	; (800219c <MX_GPIO_Init+0xac>)
 800218a:	f000 fda3 	bl	8002cd4 <HAL_GPIO_Init>

}
 800218e:	bf00      	nop
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	40011000 	.word	0x40011000

080021a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 80021a8:	e7fe      	b.n	80021a8 <Error_Handler+0x8>
	...

080021ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_MspInit+0x5c>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <HAL_MspInit+0x5c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6193      	str	r3, [r2, #24]
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_MspInit+0x5c>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_MspInit+0x5c>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_MspInit+0x5c>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_MspInit+0x5c>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_MspInit+0x60>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_MspInit+0x60>)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000

08002210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0318 	add.w	r3, r7, #24
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a43      	ldr	r2, [pc, #268]	; (8002338 <HAL_TIM_Base_MspInit+0x128>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d145      	bne.n	80022bc <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002230:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 8002236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FOUT_Pin;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(FOUT_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 0318 	add.w	r3, r7, #24
 8002272:	4619      	mov	r1, r3
 8002274:	4832      	ldr	r0, [pc, #200]	; (8002340 <HAL_TIM_Base_MspInit+0x130>)
 8002276:	f000 fd2d 	bl	8002cd4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2018      	movs	r0, #24
 8002280:	f000 fa8d 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002284:	2018      	movs	r0, #24
 8002286:	f000 faa6 	bl	80027d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2019      	movs	r0, #25
 8002290:	f000 fa85 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002294:	2019      	movs	r0, #25
 8002296:	f000 fa9e 	bl	80027d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	201a      	movs	r0, #26
 80022a0:	f000 fa7d 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022a4:	201a      	movs	r0, #26
 80022a6:	f000 fa96 	bl	80027d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	201b      	movs	r0, #27
 80022b0:	f000 fa75 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022b4:	201b      	movs	r0, #27
 80022b6:	f000 fa8e 	bl	80027d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022ba:	e038      	b.n	800232e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a20      	ldr	r2, [pc, #128]	; (8002344 <HAL_TIM_Base_MspInit+0x134>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d133      	bne.n	800232e <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	61d3      	str	r3, [r2, #28]
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_TIM_Base_MspInit+0x12c>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_TIM_Base_MspInit+0x13c>)
 80022e2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 80022e6:	2210      	movs	r2, #16
 80022e8:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 80022f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022fc:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 8002300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002304:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 8002308:	2220      	movs	r2, #32
 800230a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002312:	480d      	ldr	r0, [pc, #52]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 8002314:	f000 fa7a 	bl	800280c <HAL_DMA_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_TIM_Base_MspInit+0x112>
      Error_Handler();
 800231e:	f7ff ff3f 	bl	80021a0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a08      	ldr	r2, [pc, #32]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
 8002328:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_TIM_Base_MspInit+0x138>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40010800 	.word	0x40010800
 8002344:	40000800 	.word	0x40000800
 8002348:	20001530 	.word	0x20001530
 800234c:	40020008 	.word	0x40020008

08002350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_TIM_MspPostInit+0x58>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d117      	bne.n	80023a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_TIM_MspPostInit+0x5c>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_TIM_MspPostInit+0x5c>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_TIM_MspPostInit+0x5c>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002388:	2340      	movs	r3, #64	; 0x40
 800238a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2302      	movs	r3, #2
 8002392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	4619      	mov	r1, r3
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_TIM_MspPostInit+0x60>)
 800239c:	f000 fc9a 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40000800 	.word	0x40000800
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010c00 	.word	0x40010c00

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <NMI_Handler+0x4>

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>

080023c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fa:	f000 f8dd 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <DMA1_Channel1_IRQHandler+0x10>)
 800240a:	f000 fb2f 	bl	8002a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20001530 	.word	0x20001530

08002418 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <TIM1_BRK_IRQHandler+0x10>)
 800241e:	f001 fe8d 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20001038 	.word	0x20001038

0800242c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM1_UP_IRQHandler+0x10>)
 8002432:	f001 fe83 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20001038 	.word	0x20001038

08002440 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002446:	f001 fe79 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20001038 	.word	0x20001038

08002454 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM1_CC_IRQHandler+0x10>)
 800245a:	f001 fe6f 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20001038 	.word	0x20001038

08002468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002470:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <_sbrk+0x5c>)
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <_sbrk+0x60>)
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <_sbrk+0x64>)
 8002486:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <_sbrk+0x68>)
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	429a      	cmp	r2, r3
 8002496:	d207      	bcs.n	80024a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002498:	f002 fec0 	bl	800521c <__errno>
 800249c:	4603      	mov	r3, r0
 800249e:	220c      	movs	r2, #12
 80024a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	e009      	b.n	80024bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <_sbrk+0x64>)
 80024b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20005000 	.word	0x20005000
 80024c8:	00000400 	.word	0x00000400
 80024cc:	200005b0 	.word	0x200005b0
 80024d0:	20001718 	.word	0x20001718

080024d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024e2:	490d      	ldr	r1, [pc, #52]	; (8002518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e8:	e002      	b.n	80024f0 <LoopCopyDataInit>

080024ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ee:	3304      	adds	r3, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f4:	d3f9      	bcc.n	80024ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f8:	4c0a      	ldr	r4, [pc, #40]	; (8002524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024fc:	e001      	b.n	8002502 <LoopFillZerobss>

080024fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002500:	3204      	adds	r2, #4

08002502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002504:	d3fb      	bcc.n	80024fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002506:	f7ff ffe5 	bl	80024d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250a:	f002 fe8d 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800250e:	f7ff fc4d 	bl	8001dac <main>
  bx lr
 8002512:	4770      	bx	lr
  ldr r0, =_sdata
 8002514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002518:	200004ec 	.word	0x200004ec
  ldr r2, =_sidata
 800251c:	080088c8 	.word	0x080088c8
  ldr r2, =_sbss
 8002520:	200004ec 	.word	0x200004ec
  ldr r4, =_ebss
 8002524:	20001718 	.word	0x20001718

08002528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC1_2_IRQHandler>
	...

0800252c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_Init+0x28>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_Init+0x28>)
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f923 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	2000      	movs	r0, #0
 8002544:	f000 f808 	bl	8002558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff fe30 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40022000 	.word	0x40022000

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_InitTick+0x54>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x58>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f93b 	bl	80027f2 <HAL_SYSTICK_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d80a      	bhi.n	80025a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258c:	2200      	movs	r2, #0
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f000 f903 	bl	800279e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_InitTick+0x5c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000304 	.word	0x20000304
 80025b0:	2000030c 	.word	0x2000030c
 80025b4:	20000308 	.word	0x20000308

080025b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_IncTick+0x1c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_IncTick+0x20>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <HAL_IncTick+0x20>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	2000030c 	.word	0x2000030c
 80025d8:	20001704 	.word	0x20001704

080025dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b02      	ldr	r3, [pc, #8]	; (80025ec <HAL_GetTick+0x10>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20001704 	.word	0x20001704

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4906      	ldr	r1, [pc, #24]	; (8002688 <__NVIC_EnableIRQ+0x34>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f7ff ff90 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff2d 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff42 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff90 	bl	80026e0 <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5f 	bl	800268c <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff35 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffa2 	bl	8002744 <SysTick_Config>
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e043      	b.n	80028aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_DMA_Init+0xa8>)
 800282a:	4413      	add	r3, r2
 800282c:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <HAL_DMA_Init+0xac>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	009a      	lsls	r2, r3, #2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_DMA_Init+0xb0>)
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002856:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800285a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	bffdfff8 	.word	0xbffdfff8
 80028b8:	cccccccd 	.word	0xcccccccd
 80028bc:	40020000 	.word	0x40020000

080028c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Start_IT+0x20>
 80028dc:	2302      	movs	r3, #2
 80028de:	e04a      	b.n	8002976 <HAL_DMA_Start_IT+0xb6>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d13a      	bne.n	8002968 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f9ae 	bl	8002c78 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 020e 	orr.w	r2, r2, #14
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e00f      	b.n	8002956 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0204 	bic.w	r2, r2, #4
 8002944:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 020a 	orr.w	r2, r2, #10
 8002954:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e005      	b.n	8002974 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002970:	2302      	movs	r3, #2
 8002972:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002974:	7dfb      	ldrb	r3, [r7, #23]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002992:	2b02      	cmp	r3, #2
 8002994:	d005      	beq.n	80029a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e051      	b.n	8002a46 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 020e 	bic.w	r2, r2, #14
 80029b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <HAL_DMA_Abort_IT+0xd0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d029      	beq.n	8002a20 <HAL_DMA_Abort_IT+0xa0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_DMA_Abort_IT+0xd4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d022      	beq.n	8002a1c <HAL_DMA_Abort_IT+0x9c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_DMA_Abort_IT+0xd8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01a      	beq.n	8002a16 <HAL_DMA_Abort_IT+0x96>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_DMA_Abort_IT+0xdc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d012      	beq.n	8002a10 <HAL_DMA_Abort_IT+0x90>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <HAL_DMA_Abort_IT+0xe0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00a      	beq.n	8002a0a <HAL_DMA_Abort_IT+0x8a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_DMA_Abort_IT+0xe4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d102      	bne.n	8002a04 <HAL_DMA_Abort_IT+0x84>
 80029fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a02:	e00e      	b.n	8002a22 <HAL_DMA_Abort_IT+0xa2>
 8002a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a08:	e00b      	b.n	8002a22 <HAL_DMA_Abort_IT+0xa2>
 8002a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a0e:	e008      	b.n	8002a22 <HAL_DMA_Abort_IT+0xa2>
 8002a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a14:	e005      	b.n	8002a22 <HAL_DMA_Abort_IT+0xa2>
 8002a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1a:	e002      	b.n	8002a22 <HAL_DMA_Abort_IT+0xa2>
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	e000      	b.n	8002a22 <HAL_DMA_Abort_IT+0xa2>
 8002a20:	2301      	movs	r3, #1
 8002a22:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_DMA_Abort_IT+0xe8>)
 8002a24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
    } 
  }
  return status;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40020008 	.word	0x40020008
 8002a54:	4002001c 	.word	0x4002001c
 8002a58:	40020030 	.word	0x40020030
 8002a5c:	40020044 	.word	0x40020044
 8002a60:	40020058 	.word	0x40020058
 8002a64:	4002006c 	.word	0x4002006c
 8002a68:	40020000 	.word	0x40020000

08002a6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	2204      	movs	r2, #4
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d04f      	beq.n	8002b34 <HAL_DMA_IRQHandler+0xc8>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04a      	beq.n	8002b34 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a66      	ldr	r2, [pc, #408]	; (8002c5c <HAL_DMA_IRQHandler+0x1f0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d029      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xae>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_DMA_IRQHandler+0x1f4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d022      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xaa>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a63      	ldr	r2, [pc, #396]	; (8002c64 <HAL_DMA_IRQHandler+0x1f8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0xa4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a62      	ldr	r2, [pc, #392]	; (8002c68 <HAL_DMA_IRQHandler+0x1fc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d012      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x9e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a60      	ldr	r2, [pc, #384]	; (8002c6c <HAL_DMA_IRQHandler+0x200>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00a      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x98>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a5f      	ldr	r2, [pc, #380]	; (8002c70 <HAL_DMA_IRQHandler+0x204>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <HAL_DMA_IRQHandler+0x92>
 8002af8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002afc:	e00e      	b.n	8002b1c <HAL_DMA_IRQHandler+0xb0>
 8002afe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b02:	e00b      	b.n	8002b1c <HAL_DMA_IRQHandler+0xb0>
 8002b04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b08:	e008      	b.n	8002b1c <HAL_DMA_IRQHandler+0xb0>
 8002b0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b0e:	e005      	b.n	8002b1c <HAL_DMA_IRQHandler+0xb0>
 8002b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b14:	e002      	b.n	8002b1c <HAL_DMA_IRQHandler+0xb0>
 8002b16:	2340      	movs	r3, #64	; 0x40
 8002b18:	e000      	b.n	8002b1c <HAL_DMA_IRQHandler+0xb0>
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_DMA_IRQHandler+0x208>)
 8002b1e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8094 	beq.w	8002c52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b32:	e08e      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2202      	movs	r2, #2
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d056      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x186>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d051      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020a 	bic.w	r2, r2, #10
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_DMA_IRQHandler+0x1f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d029      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x166>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a37      	ldr	r2, [pc, #220]	; (8002c60 <HAL_DMA_IRQHandler+0x1f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <HAL_DMA_IRQHandler+0x162>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a35      	ldr	r2, [pc, #212]	; (8002c64 <HAL_DMA_IRQHandler+0x1f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x15c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_DMA_IRQHandler+0x1fc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d012      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x156>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a32      	ldr	r2, [pc, #200]	; (8002c6c <HAL_DMA_IRQHandler+0x200>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00a      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x150>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_DMA_IRQHandler+0x204>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x14a>
 8002bb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bb4:	e00e      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x168>
 8002bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bba:	e00b      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x168>
 8002bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc0:	e008      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x168>
 8002bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bc6:	e005      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x168>
 8002bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bcc:	e002      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x168>
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e000      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x168>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_DMA_IRQHandler+0x208>)
 8002bd6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d034      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bf0:	e02f      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d028      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x1e8>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d023      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 020e 	bic.w	r2, r2, #14
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
    }
  }
  return;
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
}
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40020008 	.word	0x40020008
 8002c60:	4002001c 	.word	0x4002001c
 8002c64:	40020030 	.word	0x40020030
 8002c68:	40020044 	.word	0x40020044
 8002c6c:	40020058 	.word	0x40020058
 8002c70:	4002006c 	.word	0x4002006c
 8002c74:	40020000 	.word	0x40020000

08002c78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	2101      	movs	r1, #1
 8002c90:	fa01 f202 	lsl.w	r2, r1, r2
 8002c94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d108      	bne.n	8002cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cb6:	e007      	b.n	8002cc8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b08b      	sub	sp, #44	; 0x2c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce6:	e169      	b.n	8002fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ce8:	2201      	movs	r2, #1
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f040 8158 	bne.w	8002fb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a9a      	ldr	r2, [pc, #616]	; (8002f74 <HAL_GPIO_Init+0x2a0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d05e      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d10:	4a98      	ldr	r2, [pc, #608]	; (8002f74 <HAL_GPIO_Init+0x2a0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d875      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d16:	4a98      	ldr	r2, [pc, #608]	; (8002f78 <HAL_GPIO_Init+0x2a4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d058      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d1c:	4a96      	ldr	r2, [pc, #600]	; (8002f78 <HAL_GPIO_Init+0x2a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d86f      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d22:	4a96      	ldr	r2, [pc, #600]	; (8002f7c <HAL_GPIO_Init+0x2a8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d052      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d28:	4a94      	ldr	r2, [pc, #592]	; (8002f7c <HAL_GPIO_Init+0x2a8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d869      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d2e:	4a94      	ldr	r2, [pc, #592]	; (8002f80 <HAL_GPIO_Init+0x2ac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d04c      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d34:	4a92      	ldr	r2, [pc, #584]	; (8002f80 <HAL_GPIO_Init+0x2ac>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d863      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d3a:	4a92      	ldr	r2, [pc, #584]	; (8002f84 <HAL_GPIO_Init+0x2b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d046      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
 8002d40:	4a90      	ldr	r2, [pc, #576]	; (8002f84 <HAL_GPIO_Init+0x2b0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d85d      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d46:	2b12      	cmp	r3, #18
 8002d48:	d82a      	bhi.n	8002da0 <HAL_GPIO_Init+0xcc>
 8002d4a:	2b12      	cmp	r3, #18
 8002d4c:	d859      	bhi.n	8002e02 <HAL_GPIO_Init+0x12e>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_GPIO_Init+0x80>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002dcf 	.word	0x08002dcf
 8002d58:	08002da9 	.word	0x08002da9
 8002d5c:	08002dbb 	.word	0x08002dbb
 8002d60:	08002dfd 	.word	0x08002dfd
 8002d64:	08002e03 	.word	0x08002e03
 8002d68:	08002e03 	.word	0x08002e03
 8002d6c:	08002e03 	.word	0x08002e03
 8002d70:	08002e03 	.word	0x08002e03
 8002d74:	08002e03 	.word	0x08002e03
 8002d78:	08002e03 	.word	0x08002e03
 8002d7c:	08002e03 	.word	0x08002e03
 8002d80:	08002e03 	.word	0x08002e03
 8002d84:	08002e03 	.word	0x08002e03
 8002d88:	08002e03 	.word	0x08002e03
 8002d8c:	08002e03 	.word	0x08002e03
 8002d90:	08002e03 	.word	0x08002e03
 8002d94:	08002e03 	.word	0x08002e03
 8002d98:	08002db1 	.word	0x08002db1
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	4a79      	ldr	r2, [pc, #484]	; (8002f88 <HAL_GPIO_Init+0x2b4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002da6:	e02c      	b.n	8002e02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	623b      	str	r3, [r7, #32]
          break;
 8002dae:	e029      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	3304      	adds	r3, #4
 8002db6:	623b      	str	r3, [r7, #32]
          break;
 8002db8:	e024      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	623b      	str	r3, [r7, #32]
          break;
 8002dc2:	e01f      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	623b      	str	r3, [r7, #32]
          break;
 8002dcc:	e01a      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e013      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de4:	2308      	movs	r3, #8
 8002de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	611a      	str	r2, [r3, #16]
          break;
 8002dee:	e009      	b.n	8002e04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df0:	2308      	movs	r3, #8
 8002df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	615a      	str	r2, [r3, #20]
          break;
 8002dfa:	e003      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	623b      	str	r3, [r7, #32]
          break;
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x130>
          break;
 8002e02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2bff      	cmp	r3, #255	; 0xff
 8002e08:	d801      	bhi.n	8002e0e <HAL_GPIO_Init+0x13a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e001      	b.n	8002e12 <HAL_GPIO_Init+0x13e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2bff      	cmp	r3, #255	; 0xff
 8002e18:	d802      	bhi.n	8002e20 <HAL_GPIO_Init+0x14c>
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	e002      	b.n	8002e26 <HAL_GPIO_Init+0x152>
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	3b08      	subs	r3, #8
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	210f      	movs	r1, #15
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80b1 	beq.w	8002fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e54:	4b4d      	ldr	r3, [pc, #308]	; (8002f8c <HAL_GPIO_Init+0x2b8>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a4c      	ldr	r2, [pc, #304]	; (8002f8c <HAL_GPIO_Init+0x2b8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_GPIO_Init+0x2b8>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e6c:	4a48      	ldr	r2, [pc, #288]	; (8002f90 <HAL_GPIO_Init+0x2bc>)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <HAL_GPIO_Init+0x2c0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_GPIO_Init+0x1ec>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3f      	ldr	r2, [pc, #252]	; (8002f98 <HAL_GPIO_Init+0x2c4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00d      	beq.n	8002ebc <HAL_GPIO_Init+0x1e8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3e      	ldr	r2, [pc, #248]	; (8002f9c <HAL_GPIO_Init+0x2c8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <HAL_GPIO_Init+0x1e4>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <HAL_GPIO_Init+0x2cc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_GPIO_Init+0x1e0>
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e006      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e004      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e002      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	f002 0203 	and.w	r2, r2, #3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ed2:	492f      	ldr	r1, [pc, #188]	; (8002f90 <HAL_GPIO_Init+0x2bc>)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	492c      	ldr	r1, [pc, #176]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	4928      	ldr	r1, [pc, #160]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4922      	ldr	r1, [pc, #136]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	491e      	ldr	r1, [pc, #120]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	4918      	ldr	r1, [pc, #96]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4914      	ldr	r1, [pc, #80]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d021      	beq.n	8002fa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e021      	b.n	8002fb6 <HAL_GPIO_Init+0x2e2>
 8002f72:	bf00      	nop
 8002f74:	10320000 	.word	0x10320000
 8002f78:	10310000 	.word	0x10310000
 8002f7c:	10220000 	.word	0x10220000
 8002f80:	10210000 	.word	0x10210000
 8002f84:	10120000 	.word	0x10120000
 8002f88:	10110000 	.word	0x10110000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40010800 	.word	0x40010800
 8002f98:	40010c00 	.word	0x40010c00
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	40011400 	.word	0x40011400
 8002fa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	4909      	ldr	r1, [pc, #36]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	3301      	adds	r3, #1
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f47f ae8e 	bne.w	8002ce8 <HAL_GPIO_Init+0x14>
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	372c      	adds	r7, #44	; 0x2c
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	611a      	str	r2, [r3, #16]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e26c      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8087 	beq.w	800313a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800302c:	4b92      	ldr	r3, [pc, #584]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b04      	cmp	r3, #4
 8003036:	d00c      	beq.n	8003052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003038:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d112      	bne.n	800306a <HAL_RCC_OscConfig+0x5e>
 8003044:	4b8c      	ldr	r3, [pc, #560]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d10b      	bne.n	800306a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003052:	4b89      	ldr	r3, [pc, #548]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d06c      	beq.n	8003138 <HAL_RCC_OscConfig+0x12c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d168      	bne.n	8003138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e246      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x76>
 8003074:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7f      	ldr	r2, [pc, #508]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	e02e      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b78      	ldr	r3, [pc, #480]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a77      	ldr	r2, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800309c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e01d      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0xbc>
 80030ae:	4b72      	ldr	r3, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a71      	ldr	r2, [pc, #452]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6e      	ldr	r2, [pc, #440]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 80030c8:	4b6b      	ldr	r3, [pc, #428]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6a      	ldr	r2, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a67      	ldr	r2, [pc, #412]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7ff fa78 	bl	80025dc <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7ff fa74 	bl	80025dc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1fa      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b5d      	ldr	r3, [pc, #372]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xe4>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7ff fa64 	bl	80025dc <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7ff fa60 	bl	80025dc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1e6      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	4b53      	ldr	r3, [pc, #332]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x10c>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003146:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003152:	4b49      	ldr	r3, [pc, #292]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11c      	bne.n	8003198 <HAL_RCC_OscConfig+0x18c>
 800315e:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d116      	bne.n	8003198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x176>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1ba      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4939      	ldr	r1, [pc, #228]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	e03a      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a0:	4b36      	ldr	r3, [pc, #216]	; (800327c <HAL_RCC_OscConfig+0x270>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7ff fa19 	bl	80025dc <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f7ff fa15 	bl	80025dc <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e19b      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4927      	ldr	r1, [pc, #156]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x270>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7ff f9f8 	bl	80025dc <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f0:	f7ff f9f4 	bl	80025dc <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e17a      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03a      	beq.n	8003290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_RCC_OscConfig+0x274>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7ff f9d8 	bl	80025dc <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003230:	f7ff f9d4 	bl	80025dc <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e15a      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800324e:	2001      	movs	r0, #1
 8003250:	f000 faa6 	bl	80037a0 <RCC_Delay>
 8003254:	e01c      	b.n	8003290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_OscConfig+0x274>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7ff f9be 	bl	80025dc <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003262:	e00f      	b.n	8003284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7ff f9ba 	bl	80025dc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d908      	bls.n	8003284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e140      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	42420000 	.word	0x42420000
 8003280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	4b9e      	ldr	r3, [pc, #632]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e9      	bne.n	8003264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a6 	beq.w	80033ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a2:	4b97      	ldr	r3, [pc, #604]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	4b94      	ldr	r3, [pc, #592]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4a93      	ldr	r2, [pc, #588]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b8:	61d3      	str	r3, [r2, #28]
 80032ba:	4b91      	ldr	r3, [pc, #580]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b8e      	ldr	r3, [pc, #568]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a8a      	ldr	r2, [pc, #552]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7ff f97b 	bl	80025dc <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7ff f977 	bl	80025dc <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	; 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0fd      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b81      	ldr	r3, [pc, #516]	; (8003504 <HAL_RCC_OscConfig+0x4f8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x312>
 8003310:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6213      	str	r3, [r2, #32]
 800331c:	e02d      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	4b73      	ldr	r3, [pc, #460]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a72      	ldr	r2, [pc, #456]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	6213      	str	r3, [r2, #32]
 800333e:	e01c      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b05      	cmp	r3, #5
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x356>
 8003348:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a6c      	ldr	r2, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4a69      	ldr	r2, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	e00b      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 8003362:	4b67      	ldr	r3, [pc, #412]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a66      	ldr	r2, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6213      	str	r3, [r2, #32]
 800336e:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a63      	ldr	r2, [pc, #396]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d015      	beq.n	80033ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7ff f92b 	bl	80025dc <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7ff f927 	bl	80025dc <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0ab      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ee      	beq.n	800338a <HAL_RCC_OscConfig+0x37e>
 80033ac:	e014      	b.n	80033d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7ff f915 	bl	80025dc <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7ff f911 	bl	80025dc <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e095      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033de:	4b48      	ldr	r3, [pc, #288]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4a47      	ldr	r2, [pc, #284]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8081 	beq.w	80034f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f4:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d061      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d146      	bne.n	8003496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_OscConfig+0x4fc>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7ff f8e5 	bl	80025dc <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003416:	f7ff f8e1 	bl	80025dc <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e067      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d108      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800343e:	4b30      	ldr	r3, [pc, #192]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	492d      	ldr	r1, [pc, #180]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a19      	ldr	r1, [r3, #32]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	430b      	orrs	r3, r1
 8003462:	4927      	ldr	r1, [pc, #156]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x4fc>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7ff f8b5 	bl	80025dc <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7ff f8b1 	bl	80025dc <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e037      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x46a>
 8003494:	e02f      	b.n	80034f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <HAL_RCC_OscConfig+0x4fc>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7ff f89e 	bl	80025dc <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7ff f89a 	bl	80025dc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e020      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x498>
 80034c2:	e018      	b.n	80034f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e013      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
 8003508:	42420060 	.word	0x42420060

0800350c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0d0      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d910      	bls.n	8003550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b67      	ldr	r3, [pc, #412]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 0207 	bic.w	r2, r3, #7
 8003536:	4965      	ldr	r1, [pc, #404]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b63      	ldr	r3, [pc, #396]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0b8      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d020      	beq.n	800359e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003568:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a58      	ldr	r2, [pc, #352]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003580:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800358a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b50      	ldr	r3, [pc, #320]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	494d      	ldr	r1, [pc, #308]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d040      	beq.n	800362c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d115      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e07f      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ca:	4b41      	ldr	r3, [pc, #260]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e073      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e06b      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4936      	ldr	r1, [pc, #216]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035fc:	f7fe ffee 	bl	80025dc <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	e00a      	b.n	800361a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003604:	f7fe ffea 	bl	80025dc <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e053      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 020c 	and.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	429a      	cmp	r2, r3
 800362a:	d1eb      	bne.n	8003604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d210      	bcs.n	800365c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 0207 	bic.w	r2, r3, #7
 8003642:	4922      	ldr	r1, [pc, #136]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e032      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4916      	ldr	r1, [pc, #88]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	490e      	ldr	r1, [pc, #56]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800369a:	f000 f821 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	490a      	ldr	r1, [pc, #40]	; (80036d4 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	5ccb      	ldrb	r3, [r1, r3]
 80036ae:	fa22 f303 	lsr.w	r3, r2, r3
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1cc>)
 80036b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1d0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe ff4c 	bl	8002558 <HAL_InitTick>

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40022000 	.word	0x40022000
 80036d0:	40021000 	.word	0x40021000
 80036d4:	080084a0 	.word	0x080084a0
 80036d8:	20000304 	.word	0x20000304
 80036dc:	20000308 	.word	0x20000308

080036e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e0:	b490      	push	{r4, r7}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036e8:	1d3c      	adds	r4, r7, #4
 80036ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036f0:	f240 2301 	movw	r3, #513	; 0x201
 80036f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <HAL_RCC_GetSysClockFreq+0xb4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b04      	cmp	r3, #4
 8003718:	d002      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x40>
 800371a:	2b08      	cmp	r3, #8
 800371c:	d003      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x46>
 800371e:	e02d      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003722:	623b      	str	r3, [r7, #32]
      break;
 8003724:	e02d      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	0c9b      	lsrs	r3, r3, #18
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003732:	4413      	add	r3, r2
 8003734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003738:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c5b      	lsrs	r3, r3, #17
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003752:	4413      	add	r3, r2
 8003754:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003758:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800375e:	fb02 f203 	mul.w	r2, r2, r3
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	e004      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	623b      	str	r3, [r7, #32]
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800377e:	623b      	str	r3, [r7, #32]
      break;
 8003780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003782:	6a3b      	ldr	r3, [r7, #32]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bc90      	pop	{r4, r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	08008490 	.word	0x08008490
 8003794:	40021000 	.word	0x40021000
 8003798:	007a1200 	.word	0x007a1200
 800379c:	003d0900 	.word	0x003d0900

080037a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <RCC_Delay+0x34>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <RCC_Delay+0x38>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0a5b      	lsrs	r3, r3, #9
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037bc:	bf00      	nop
  }
  while (Delay --);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	60fa      	str	r2, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f9      	bne.n	80037bc <RCC_Delay+0x1c>
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	20000304 	.word	0x20000304
 80037d8:	10624dd3 	.word	0x10624dd3

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e041      	b.n	8003872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe fd04 	bl	8002210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f001 f8dc 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e03a      	b.n	800390a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <HAL_TIM_Base_Start_IT+0x98>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x58>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d009      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x58>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_TIM_Base_Start_IT+0x9c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x58>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a13      	ldr	r2, [pc, #76]	; (800391c <HAL_TIM_Base_Start_IT+0xa0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d010      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	e007      	b.n	8003908 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800

08003920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e041      	b.n	80039b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f839 	bl	80039be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f001 f83a 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_TIM_PWM_Start_DMA+0x28>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e022      	b.n	8003a3e <HAL_TIM_PWM_Start_DMA+0x6e>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d109      	bne.n	8003a12 <HAL_TIM_PWM_Start_DMA+0x42>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	e015      	b.n	8003a3e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d109      	bne.n	8003a2c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e008      	b.n	8003a3e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
 8003a44:	e14e      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <HAL_TIM_PWM_Start_DMA+0x90>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e022      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d109      	bne.n	8003a7a <HAL_TIM_PWM_Start_DMA+0xaa>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e015      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d109      	bne.n	8003a94 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e008      	b.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d024      	beq.n	8003af4 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Start_DMA+0xea>
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e114      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Start_DMA+0xfa>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac8:	e016      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x128>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start_DMA+0x10a>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad8:	e00e      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x128>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start_DMA+0x11a>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae8:	e006      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x128>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af2:	e001      	b.n	8003af8 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0f5      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x314>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	f200 80ae 	bhi.w	8003c5c <HAL_TIM_PWM_Start_DMA+0x28c>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003c5d 	.word	0x08003c5d
 8003b10:	08003c5d 	.word	0x08003c5d
 8003b14:	08003c5d 	.word	0x08003c5d
 8003b18:	08003b85 	.word	0x08003b85
 8003b1c:	08003c5d 	.word	0x08003c5d
 8003b20:	08003c5d 	.word	0x08003c5d
 8003b24:	08003c5d 	.word	0x08003c5d
 8003b28:	08003bcd 	.word	0x08003bcd
 8003b2c:	08003c5d 	.word	0x08003c5d
 8003b30:	08003c5d 	.word	0x08003c5d
 8003b34:	08003c5d 	.word	0x08003c5d
 8003b38:	08003c15 	.word	0x08003c15
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	4a6a      	ldr	r2, [pc, #424]	; (8003cec <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	4a69      	ldr	r2, [pc, #420]	; (8003cf0 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	4a68      	ldr	r2, [pc, #416]	; (8003cf4 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3334      	adds	r3, #52	; 0x34
 8003b60:	461a      	mov	r2, r3
 8003b62:	887b      	ldrh	r3, [r7, #2]
 8003b64:	f7fe feac 	bl	80028c0 <HAL_DMA_Start_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0b8      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	60da      	str	r2, [r3, #12]
      break;
 8003b82:	e06c      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	4a58      	ldr	r2, [pc, #352]	; (8003cec <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	4a57      	ldr	r2, [pc, #348]	; (8003cf0 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003b92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	4a56      	ldr	r2, [pc, #344]	; (8003cf4 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3338      	adds	r3, #56	; 0x38
 8003ba8:	461a      	mov	r2, r3
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	f7fe fe88 	bl	80028c0 <HAL_DMA_Start_IT>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e094      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc8:	60da      	str	r2, [r3, #12]
      break;
 8003bca:	e048      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a44      	ldr	r2, [pc, #272]	; (8003cf4 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	333c      	adds	r3, #60	; 0x3c
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	887b      	ldrh	r3, [r7, #2]
 8003bf4:	f7fe fe64 	bl	80028c0 <HAL_DMA_Start_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e070      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c10:	60da      	str	r2, [r3, #12]
      break;
 8003c12:	e024      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	4a34      	ldr	r2, [pc, #208]	; (8003cec <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4a32      	ldr	r2, [pc, #200]	; (8003cf4 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3340      	adds	r3, #64	; 0x40
 8003c38:	461a      	mov	r2, r3
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	f7fe fe40 	bl	80028c0 <HAL_DMA_Start_IT>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e04c      	b.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c58:	60da      	str	r2, [r3, #12]
      break;
 8003c5a:	e000      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003c5c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2201      	movs	r2, #1
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fa43 	bl	80050f2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d107      	bne.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_TIM_PWM_Start_DMA+0x2de>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d009      	beq.n	8003cae <HAL_TIM_PWM_Start_DMA+0x2de>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_TIM_PWM_Start_DMA+0x2de>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d010      	beq.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd0:	e007      	b.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	080048c9 	.word	0x080048c9
 8003cf0:	08004971 	.word	0x08004971
 8003cf4:	08004837 	.word	0x08004837
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800

08003d04 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d855      	bhi.n	8003dc0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003dc1 	.word	0x08003dc1
 8003d24:	08003dc1 	.word	0x08003dc1
 8003d28:	08003dc1 	.word	0x08003dc1
 8003d2c:	08003d6d 	.word	0x08003d6d
 8003d30:	08003dc1 	.word	0x08003dc1
 8003d34:	08003dc1 	.word	0x08003dc1
 8003d38:	08003dc1 	.word	0x08003dc1
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003dc1 	.word	0x08003dc1
 8003d44:	08003dc1 	.word	0x08003dc1
 8003d48:	08003dc1 	.word	0x08003dc1
 8003d4c:	08003da5 	.word	0x08003da5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fe0b 	bl	8002980 <HAL_DMA_Abort_IT>
      break;
 8003d6a:	e02a      	b.n	8003dc2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe fdfd 	bl	8002980 <HAL_DMA_Abort_IT>
      break;
 8003d86:	e01c      	b.n	8003dc2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fdef 	bl	8002980 <HAL_DMA_Abort_IT>
      break;
 8003da2:	e00e      	b.n	8003dc2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003db2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fde1 	bl	8002980 <HAL_DMA_Abort_IT>
      break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003dc0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 f991 	bl	80050f2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d117      	bne.n	8003e0a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_TIM_PWM_Stop_DMA+0x106>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	f240 4344 	movw	r3, #1092	; 0x444
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_PWM_Stop_DMA+0x106>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_TIM_PWM_Stop_DMA+0x136>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	f240 4344 	movw	r3, #1092	; 0x444
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_PWM_Stop_DMA+0x136>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Stop_DMA+0x146>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e48:	e013      	b.n	8003e72 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Stop_DMA+0x156>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	e00b      	b.n	8003e72 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Stop_DMA+0x166>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	e003      	b.n	8003e72 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40012c00 	.word	0x40012c00

08003e80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e041      	b.n	8003f16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f839 	bl	8003f1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 fd8a 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_IC_Start_IT+0x1a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	e013      	b.n	8003f72 <HAL_TIM_IC_Start_IT+0x42>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_IC_Start_IT+0x2a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	e00b      	b.n	8003f72 <HAL_TIM_IC_Start_IT+0x42>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_IC_Start_IT+0x3a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e003      	b.n	8003f72 <HAL_TIM_IC_Start_IT+0x42>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <HAL_TIM_IC_Start_IT+0x54>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e013      	b.n	8003fac <HAL_TIM_IC_Start_IT+0x7c>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d104      	bne.n	8003f94 <HAL_TIM_IC_Start_IT+0x64>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	e00b      	b.n	8003fac <HAL_TIM_IC_Start_IT+0x7c>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d104      	bne.n	8003fa4 <HAL_TIM_IC_Start_IT+0x74>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e003      	b.n	8003fac <HAL_TIM_IC_Start_IT+0x7c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0b3      	b.n	8004126 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_IC_Start_IT+0x9e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	e013      	b.n	8003ff6 <HAL_TIM_IC_Start_IT+0xc6>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_IC_Start_IT+0xae>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	e00b      	b.n	8003ff6 <HAL_TIM_IC_Start_IT+0xc6>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_IC_Start_IT+0xbe>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	e003      	b.n	8003ff6 <HAL_TIM_IC_Start_IT+0xc6>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_IC_Start_IT+0xd6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004004:	e013      	b.n	800402e <HAL_TIM_IC_Start_IT+0xfe>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d104      	bne.n	8004016 <HAL_TIM_IC_Start_IT+0xe6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004014:	e00b      	b.n	800402e <HAL_TIM_IC_Start_IT+0xfe>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d104      	bne.n	8004026 <HAL_TIM_IC_Start_IT+0xf6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	e003      	b.n	800402e <HAL_TIM_IC_Start_IT+0xfe>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b0c      	cmp	r3, #12
 8004032:	d841      	bhi.n	80040b8 <HAL_TIM_IC_Start_IT+0x188>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_TIM_IC_Start_IT+0x10c>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004071 	.word	0x08004071
 8004040:	080040b9 	.word	0x080040b9
 8004044:	080040b9 	.word	0x080040b9
 8004048:	080040b9 	.word	0x080040b9
 800404c:	08004083 	.word	0x08004083
 8004050:	080040b9 	.word	0x080040b9
 8004054:	080040b9 	.word	0x080040b9
 8004058:	080040b9 	.word	0x080040b9
 800405c:	08004095 	.word	0x08004095
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040b9 	.word	0x080040b9
 8004068:	080040b9 	.word	0x080040b9
 800406c:	080040a7 	.word	0x080040a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0202 	orr.w	r2, r2, #2
 800407e:	60da      	str	r2, [r3, #12]
      break;
 8004080:	e01b      	b.n	80040ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0204 	orr.w	r2, r2, #4
 8004090:	60da      	str	r2, [r3, #12]
      break;
 8004092:	e012      	b.n	80040ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0208 	orr.w	r2, r2, #8
 80040a2:	60da      	str	r2, [r3, #12]
      break;
 80040a4:	e009      	b.n	80040ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0210 	orr.w	r2, r2, #16
 80040b4:	60da      	str	r2, [r3, #12]
      break;
 80040b6:	e000      	b.n	80040ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80040b8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2201      	movs	r2, #1
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 f815 	bl	80050f2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIM_IC_Start_IT+0x200>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d009      	beq.n	80040f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <HAL_TIM_IC_Start_IT+0x204>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <HAL_TIM_IC_Start_IT+0x208>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d111      	bne.n	8004114 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d010      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004112:	e007      	b.n	8004124 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800

0800413c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0202 	mvn.w	r2, #2
 8004168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fc1a 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fb3a 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fd fca9 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0204 	mvn.w	r2, #4
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd fbf0 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fb10 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7fd fc7f 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0208 	mvn.w	r2, #8
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2204      	movs	r2, #4
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fd fbc6 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fae6 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fd fc55 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b10      	cmp	r3, #16
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b10      	cmp	r3, #16
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0210 	mvn.w	r2, #16
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2208      	movs	r2, #8
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fb9c 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fabc 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fd fc2b 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fa14 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 ff8f 	bl	800520a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa7d 	bl	8004812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b20      	cmp	r3, #32
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0220 	mvn.w	r2, #32
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ff5a 	bl	80051f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004362:	2302      	movs	r3, #2
 8004364:	e082      	b.n	800446c <HAL_TIM_IC_ConfigChannel+0x120>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f000 fd12 	bl	8004dac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 020c 	bic.w	r2, r2, #12
 8004396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e05a      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d11c      	bne.n	80043ec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6819      	ldr	r1, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f000 fd7b 	bl	8004ebc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6999      	ldr	r1, [r3, #24]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	619a      	str	r2, [r3, #24]
 80043ea:	e03a      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11b      	bne.n	800442a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f000 fdc6 	bl	8004f92 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 020c 	bic.w	r2, r2, #12
 8004414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	e01b      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 fde5 	bl	8005008 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800444c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69d9      	ldr	r1, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800448a:	2302      	movs	r3, #2
 800448c:	e0ac      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	f200 809f 	bhi.w	80045dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080045dd 	.word	0x080045dd
 80044ac:	080045dd 	.word	0x080045dd
 80044b0:	080045dd 	.word	0x080045dd
 80044b4:	08004519 	.word	0x08004519
 80044b8:	080045dd 	.word	0x080045dd
 80044bc:	080045dd 	.word	0x080045dd
 80044c0:	080045dd 	.word	0x080045dd
 80044c4:	0800455b 	.word	0x0800455b
 80044c8:	080045dd 	.word	0x080045dd
 80044cc:	080045dd 	.word	0x080045dd
 80044d0:	080045dd 	.word	0x080045dd
 80044d4:	0800459b 	.word	0x0800459b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fadc 	bl	8004a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0208 	orr.w	r2, r2, #8
 80044f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0204 	bic.w	r2, r2, #4
 8004502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6999      	ldr	r1, [r3, #24]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	619a      	str	r2, [r3, #24]
      break;
 8004516:	e062      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fb22 	bl	8004b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
      break;
 8004558:	e041      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fb6b 	bl	8004c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0208 	orr.w	r2, r2, #8
 8004574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0204 	bic.w	r2, r2, #4
 8004584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69d9      	ldr	r1, [r3, #28]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
      break;
 8004598:	e021      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fbb5 	bl	8004d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	021a      	lsls	r2, r3, #8
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	61da      	str	r2, [r3, #28]
      break;
 80045da:	e000      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80045dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e0b3      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x180>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004640:	d03e      	beq.n	80046c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	f200 8087 	bhi.w	8004758 <HAL_TIM_ConfigClockSource+0x168>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464e:	f000 8085 	beq.w	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d87f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004658:	2b70      	cmp	r3, #112	; 0x70
 800465a:	d01a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0xa2>
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d87b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d050      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x116>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d877      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004668:	2b50      	cmp	r3, #80	; 0x50
 800466a:	d03c      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xf6>
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d873      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d058      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x136>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d86f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004678:	2b30      	cmp	r3, #48	; 0x30
 800467a:	d064      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d86b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d060      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d867      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d05c      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d05a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004690:	e062      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6899      	ldr	r1, [r3, #8]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f000 fd07 	bl	80050b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	609a      	str	r2, [r3, #8]
      break;
 80046be:	e04e      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f000 fcf0 	bl	80050b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e2:	609a      	str	r2, [r3, #8]
      break;
 80046e4:	e03b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f000 fbb4 	bl	8004e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2150      	movs	r1, #80	; 0x50
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fcbe 	bl	8005080 <TIM_ITRx_SetConfig>
      break;
 8004704:	e02b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	461a      	mov	r2, r3
 8004714:	f000 fc0e 	bl	8004f34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2160      	movs	r1, #96	; 0x60
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fcae 	bl	8005080 <TIM_ITRx_SetConfig>
      break;
 8004724:	e01b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 fb94 	bl	8004e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fc9e 	bl	8005080 <TIM_ITRx_SetConfig>
      break;
 8004744:	e00b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 fc95 	bl	8005080 <TIM_ITRx_SetConfig>
        break;
 8004756:	e002      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004758:	bf00      	nop
 800475a:	e000      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800475c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b0c      	cmp	r3, #12
 800478a:	d831      	bhi.n	80047f0 <HAL_TIM_ReadCapturedValue+0x78>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_TIM_ReadCapturedValue+0x1c>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047c9 	.word	0x080047c9
 8004798:	080047f1 	.word	0x080047f1
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	080047f1 	.word	0x080047f1
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	080047f1 	.word	0x080047f1
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047f1 	.word	0x080047f1
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	080047f1 	.word	0x080047f1
 80047c4:	080047e7 	.word	0x080047e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	60fb      	str	r3, [r7, #12]

      break;
 80047d0:	e00f      	b.n	80047f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	60fb      	str	r3, [r7, #12]

      break;
 80047da:	e00a      	b.n	80047f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	60fb      	str	r3, [r7, #12]

      break;
 80047e4:	e005      	b.n	80047f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	60fb      	str	r3, [r7, #12]

      break;
 80047ee:	e000      	b.n	80047f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047f0:	bf00      	nop
  }

  return tmpreg;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d107      	bne.n	800485e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	e02a      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2202      	movs	r2, #2
 800486c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004876:	e01d      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d107      	bne.n	8004892 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2204      	movs	r2, #4
 8004886:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004890:	e010      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d107      	bne.n	80048ac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2208      	movs	r2, #8
 80048a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048aa:	e003      	b.n	80048b4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff ffb5 	bl	8004824 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d10b      	bne.n	80048f8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d136      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f6:	e031      	b.n	800495c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d10b      	bne.n	800491a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d125      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004918:	e020      	b.n	800495c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d10b      	bne.n	800493c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2204      	movs	r2, #4
 8004928:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d114      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493a:	e00f      	b.n	800495c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d10a      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2208      	movs	r2, #8
 800494a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d103      	bne.n	800495c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7fd f8c1 	bl	8001ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d103      	bne.n	8004990 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	771a      	strb	r2, [r3, #28]
 800498e:	e019      	b.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d103      	bne.n	80049a2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2202      	movs	r2, #2
 800499e:	771a      	strb	r2, [r3, #28]
 80049a0:	e010      	b.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d103      	bne.n	80049b4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2204      	movs	r2, #4
 80049b0:	771a      	strb	r2, [r3, #28]
 80049b2:	e007      	b.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d102      	bne.n	80049c4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2208      	movs	r2, #8
 80049c2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7fd f917 	bl	8001bf8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <TIM_Base_SetConfig+0xb8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <TIM_Base_SetConfig+0x30>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d007      	beq.n	8004a08 <TIM_Base_SetConfig+0x30>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <TIM_Base_SetConfig+0xbc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_Base_SetConfig+0x30>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <TIM_Base_SetConfig+0xc0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	; (8004a90 <TIM_Base_SetConfig+0xb8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0x62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0x62>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <TIM_Base_SetConfig+0xbc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0x62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <TIM_Base_SetConfig+0xc0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <TIM_Base_SetConfig+0xb8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d103      	bne.n	8004a80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	615a      	str	r2, [r3, #20]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800

08004a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0302 	bic.w	r3, r3, #2
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <TIM_OC1_SetConfig+0xc8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10c      	bne.n	8004b12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0308 	bic.w	r3, r3, #8
 8004afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <TIM_OC1_SetConfig+0xc8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d111      	bne.n	8004b3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40012c00 	.word	0x40012c00

08004b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0320 	bic.w	r3, r3, #32
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <TIM_OC2_SetConfig+0xd0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10d      	bne.n	8004be4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <TIM_OC2_SetConfig+0xd0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d113      	bne.n	8004c14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	40012c00 	.word	0x40012c00

08004c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0303 	bic.w	r3, r3, #3
 8004c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <TIM_OC3_SetConfig+0xd0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d10d      	bne.n	8004cb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <TIM_OC3_SetConfig+0xd0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d113      	bne.n	8004ce6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40012c00 	.word	0x40012c00

08004d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	031b      	lsls	r3, r3, #12
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <TIM_OC4_SetConfig+0x98>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d109      	bne.n	8004d84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	40012c00 	.word	0x40012c00

08004dac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <TIM_TI1_SetConfig+0xa8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_TI1_SetConfig+0x46>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d007      	beq.n	8004df2 <TIM_TI1_SetConfig+0x46>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <TIM_TI1_SetConfig+0xac>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_TI1_SetConfig+0x46>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <TIM_TI1_SetConfig+0xb0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <TIM_TI1_SetConfig+0x4a>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <TIM_TI1_SetConfig+0x4c>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e003      	b.n	8004e16 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f023 030a 	bic.w	r3, r3, #10
 8004e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 030a 	and.w	r3, r3, #10
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800

08004e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 030a 	bic.w	r3, r3, #10
 8004e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0210 	bic.w	r2, r3, #16
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004efa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	031b      	lsls	r3, r3, #12
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 0210 	bic.w	r2, r3, #16
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	031b      	lsls	r3, r3, #12
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005046:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	031b      	lsls	r3, r3, #12
 800504c:	b29b      	uxth	r3, r3
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800505a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	031b      	lsls	r3, r3, #12
 8005060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	f043 0307 	orr.w	r3, r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	609a      	str	r2, [r3, #8]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4313      	orrs	r3, r2
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	2201      	movs	r2, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1a      	ldr	r2, [r3, #32]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	43db      	mvns	r3, r3
 8005114:	401a      	ands	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1a      	ldr	r2, [r3, #32]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	fa01 f303 	lsl.w	r3, r1, r3
 800512a:	431a      	orrs	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	621a      	str	r2, [r3, #32]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr
	...

0800513c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e046      	b.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a16      	ldr	r2, [pc, #88]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a0:	d009      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a10      	ldr	r2, [pc, #64]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10c      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800

080051f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <__errno>:
 800521c:	4b01      	ldr	r3, [pc, #4]	; (8005224 <__errno+0x8>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000310 	.word	0x20000310

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	2600      	movs	r6, #0
 800522c:	4d0c      	ldr	r5, [pc, #48]	; (8005260 <__libc_init_array+0x38>)
 800522e:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <__libc_init_array+0x3c>)
 8005230:	1b64      	subs	r4, r4, r5
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	42a6      	cmp	r6, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	f003 f91e 	bl	8008478 <_init>
 800523c:	2600      	movs	r6, #0
 800523e:	4d0a      	ldr	r5, [pc, #40]	; (8005268 <__libc_init_array+0x40>)
 8005240:	4c0a      	ldr	r4, [pc, #40]	; (800526c <__libc_init_array+0x44>)
 8005242:	1b64      	subs	r4, r4, r5
 8005244:	10a4      	asrs	r4, r4, #2
 8005246:	42a6      	cmp	r6, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005250:	4798      	blx	r3
 8005252:	3601      	adds	r6, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f855 3b04 	ldr.w	r3, [r5], #4
 800525a:	4798      	blx	r3
 800525c:	3601      	adds	r6, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	080088c0 	.word	0x080088c0
 8005264:	080088c0 	.word	0x080088c0
 8005268:	080088c0 	.word	0x080088c0
 800526c:	080088c4 	.word	0x080088c4

08005270 <memset>:
 8005270:	4603      	mov	r3, r0
 8005272:	4402      	add	r2, r0
 8005274:	4293      	cmp	r3, r2
 8005276:	d100      	bne.n	800527a <memset+0xa>
 8005278:	4770      	bx	lr
 800527a:	f803 1b01 	strb.w	r1, [r3], #1
 800527e:	e7f9      	b.n	8005274 <memset+0x4>

08005280 <__cvt>:
 8005280:	2b00      	cmp	r3, #0
 8005282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005286:	461f      	mov	r7, r3
 8005288:	bfbb      	ittet	lt
 800528a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800528e:	461f      	movlt	r7, r3
 8005290:	2300      	movge	r3, #0
 8005292:	232d      	movlt	r3, #45	; 0x2d
 8005294:	b088      	sub	sp, #32
 8005296:	4614      	mov	r4, r2
 8005298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800529a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800529c:	7013      	strb	r3, [r2, #0]
 800529e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80052a4:	f023 0820 	bic.w	r8, r3, #32
 80052a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052ac:	d005      	beq.n	80052ba <__cvt+0x3a>
 80052ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052b2:	d100      	bne.n	80052b6 <__cvt+0x36>
 80052b4:	3501      	adds	r5, #1
 80052b6:	2302      	movs	r3, #2
 80052b8:	e000      	b.n	80052bc <__cvt+0x3c>
 80052ba:	2303      	movs	r3, #3
 80052bc:	aa07      	add	r2, sp, #28
 80052be:	9204      	str	r2, [sp, #16]
 80052c0:	aa06      	add	r2, sp, #24
 80052c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80052c6:	e9cd 3500 	strd	r3, r5, [sp]
 80052ca:	4622      	mov	r2, r4
 80052cc:	463b      	mov	r3, r7
 80052ce:	f000 fcc7 	bl	8005c60 <_dtoa_r>
 80052d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052d6:	4606      	mov	r6, r0
 80052d8:	d102      	bne.n	80052e0 <__cvt+0x60>
 80052da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052dc:	07db      	lsls	r3, r3, #31
 80052de:	d522      	bpl.n	8005326 <__cvt+0xa6>
 80052e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052e4:	eb06 0905 	add.w	r9, r6, r5
 80052e8:	d110      	bne.n	800530c <__cvt+0x8c>
 80052ea:	7833      	ldrb	r3, [r6, #0]
 80052ec:	2b30      	cmp	r3, #48	; 0x30
 80052ee:	d10a      	bne.n	8005306 <__cvt+0x86>
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	4620      	mov	r0, r4
 80052f6:	4639      	mov	r1, r7
 80052f8:	f7fb fb56 	bl	80009a8 <__aeabi_dcmpeq>
 80052fc:	b918      	cbnz	r0, 8005306 <__cvt+0x86>
 80052fe:	f1c5 0501 	rsb	r5, r5, #1
 8005302:	f8ca 5000 	str.w	r5, [sl]
 8005306:	f8da 3000 	ldr.w	r3, [sl]
 800530a:	4499      	add	r9, r3
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	4620      	mov	r0, r4
 8005312:	4639      	mov	r1, r7
 8005314:	f7fb fb48 	bl	80009a8 <__aeabi_dcmpeq>
 8005318:	b108      	cbz	r0, 800531e <__cvt+0x9e>
 800531a:	f8cd 901c 	str.w	r9, [sp, #28]
 800531e:	2230      	movs	r2, #48	; 0x30
 8005320:	9b07      	ldr	r3, [sp, #28]
 8005322:	454b      	cmp	r3, r9
 8005324:	d307      	bcc.n	8005336 <__cvt+0xb6>
 8005326:	4630      	mov	r0, r6
 8005328:	9b07      	ldr	r3, [sp, #28]
 800532a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800532c:	1b9b      	subs	r3, r3, r6
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	b008      	add	sp, #32
 8005332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	9107      	str	r1, [sp, #28]
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e7f0      	b.n	8005320 <__cvt+0xa0>

0800533e <__exponent>:
 800533e:	4603      	mov	r3, r0
 8005340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005342:	2900      	cmp	r1, #0
 8005344:	f803 2b02 	strb.w	r2, [r3], #2
 8005348:	bfb6      	itet	lt
 800534a:	222d      	movlt	r2, #45	; 0x2d
 800534c:	222b      	movge	r2, #43	; 0x2b
 800534e:	4249      	neglt	r1, r1
 8005350:	2909      	cmp	r1, #9
 8005352:	7042      	strb	r2, [r0, #1]
 8005354:	dd2b      	ble.n	80053ae <__exponent+0x70>
 8005356:	f10d 0407 	add.w	r4, sp, #7
 800535a:	46a4      	mov	ip, r4
 800535c:	270a      	movs	r7, #10
 800535e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005362:	460a      	mov	r2, r1
 8005364:	46a6      	mov	lr, r4
 8005366:	fb07 1516 	mls	r5, r7, r6, r1
 800536a:	2a63      	cmp	r2, #99	; 0x63
 800536c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005370:	4631      	mov	r1, r6
 8005372:	f104 34ff 	add.w	r4, r4, #4294967295
 8005376:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800537a:	dcf0      	bgt.n	800535e <__exponent+0x20>
 800537c:	3130      	adds	r1, #48	; 0x30
 800537e:	f1ae 0502 	sub.w	r5, lr, #2
 8005382:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005386:	4629      	mov	r1, r5
 8005388:	1c44      	adds	r4, r0, #1
 800538a:	4561      	cmp	r1, ip
 800538c:	d30a      	bcc.n	80053a4 <__exponent+0x66>
 800538e:	f10d 0209 	add.w	r2, sp, #9
 8005392:	eba2 020e 	sub.w	r2, r2, lr
 8005396:	4565      	cmp	r5, ip
 8005398:	bf88      	it	hi
 800539a:	2200      	movhi	r2, #0
 800539c:	4413      	add	r3, r2
 800539e:	1a18      	subs	r0, r3, r0
 80053a0:	b003      	add	sp, #12
 80053a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053ac:	e7ed      	b.n	800538a <__exponent+0x4c>
 80053ae:	2330      	movs	r3, #48	; 0x30
 80053b0:	3130      	adds	r1, #48	; 0x30
 80053b2:	7083      	strb	r3, [r0, #2]
 80053b4:	70c1      	strb	r1, [r0, #3]
 80053b6:	1d03      	adds	r3, r0, #4
 80053b8:	e7f1      	b.n	800539e <__exponent+0x60>
	...

080053bc <_printf_float>:
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	b091      	sub	sp, #68	; 0x44
 80053c2:	460c      	mov	r4, r1
 80053c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80053c8:	4616      	mov	r6, r2
 80053ca:	461f      	mov	r7, r3
 80053cc:	4605      	mov	r5, r0
 80053ce:	f001 fa35 	bl	800683c <_localeconv_r>
 80053d2:	6803      	ldr	r3, [r0, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	9309      	str	r3, [sp, #36]	; 0x24
 80053d8:	f7fa feba 	bl	8000150 <strlen>
 80053dc:	2300      	movs	r3, #0
 80053de:	930e      	str	r3, [sp, #56]	; 0x38
 80053e0:	f8d8 3000 	ldr.w	r3, [r8]
 80053e4:	900a      	str	r0, [sp, #40]	; 0x28
 80053e6:	3307      	adds	r3, #7
 80053e8:	f023 0307 	bic.w	r3, r3, #7
 80053ec:	f103 0208 	add.w	r2, r3, #8
 80053f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80053f4:	f8d4 b000 	ldr.w	fp, [r4]
 80053f8:	f8c8 2000 	str.w	r2, [r8]
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005404:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005408:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800540c:	930b      	str	r3, [sp, #44]	; 0x2c
 800540e:	f04f 32ff 	mov.w	r2, #4294967295
 8005412:	4640      	mov	r0, r8
 8005414:	4b9c      	ldr	r3, [pc, #624]	; (8005688 <_printf_float+0x2cc>)
 8005416:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005418:	f7fb faf8 	bl	8000a0c <__aeabi_dcmpun>
 800541c:	bb70      	cbnz	r0, 800547c <_printf_float+0xc0>
 800541e:	f04f 32ff 	mov.w	r2, #4294967295
 8005422:	4640      	mov	r0, r8
 8005424:	4b98      	ldr	r3, [pc, #608]	; (8005688 <_printf_float+0x2cc>)
 8005426:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005428:	f7fb fad2 	bl	80009d0 <__aeabi_dcmple>
 800542c:	bb30      	cbnz	r0, 800547c <_printf_float+0xc0>
 800542e:	2200      	movs	r2, #0
 8005430:	2300      	movs	r3, #0
 8005432:	4640      	mov	r0, r8
 8005434:	4651      	mov	r1, sl
 8005436:	f7fb fac1 	bl	80009bc <__aeabi_dcmplt>
 800543a:	b110      	cbz	r0, 8005442 <_printf_float+0x86>
 800543c:	232d      	movs	r3, #45	; 0x2d
 800543e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005442:	4b92      	ldr	r3, [pc, #584]	; (800568c <_printf_float+0x2d0>)
 8005444:	4892      	ldr	r0, [pc, #584]	; (8005690 <_printf_float+0x2d4>)
 8005446:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800544a:	bf94      	ite	ls
 800544c:	4698      	movls	r8, r3
 800544e:	4680      	movhi	r8, r0
 8005450:	2303      	movs	r3, #3
 8005452:	f04f 0a00 	mov.w	sl, #0
 8005456:	6123      	str	r3, [r4, #16]
 8005458:	f02b 0304 	bic.w	r3, fp, #4
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	4633      	mov	r3, r6
 8005460:	4621      	mov	r1, r4
 8005462:	4628      	mov	r0, r5
 8005464:	9700      	str	r7, [sp, #0]
 8005466:	aa0f      	add	r2, sp, #60	; 0x3c
 8005468:	f000 f9d4 	bl	8005814 <_printf_common>
 800546c:	3001      	adds	r0, #1
 800546e:	f040 8090 	bne.w	8005592 <_printf_float+0x1d6>
 8005472:	f04f 30ff 	mov.w	r0, #4294967295
 8005476:	b011      	add	sp, #68	; 0x44
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	4642      	mov	r2, r8
 800547e:	4653      	mov	r3, sl
 8005480:	4640      	mov	r0, r8
 8005482:	4651      	mov	r1, sl
 8005484:	f7fb fac2 	bl	8000a0c <__aeabi_dcmpun>
 8005488:	b148      	cbz	r0, 800549e <_printf_float+0xe2>
 800548a:	f1ba 0f00 	cmp.w	sl, #0
 800548e:	bfb8      	it	lt
 8005490:	232d      	movlt	r3, #45	; 0x2d
 8005492:	4880      	ldr	r0, [pc, #512]	; (8005694 <_printf_float+0x2d8>)
 8005494:	bfb8      	it	lt
 8005496:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800549a:	4b7f      	ldr	r3, [pc, #508]	; (8005698 <_printf_float+0x2dc>)
 800549c:	e7d3      	b.n	8005446 <_printf_float+0x8a>
 800549e:	6863      	ldr	r3, [r4, #4]
 80054a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	d142      	bne.n	800552e <_printf_float+0x172>
 80054a8:	2306      	movs	r3, #6
 80054aa:	6063      	str	r3, [r4, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	9206      	str	r2, [sp, #24]
 80054b0:	aa0e      	add	r2, sp, #56	; 0x38
 80054b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80054b6:	aa0d      	add	r2, sp, #52	; 0x34
 80054b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80054bc:	9203      	str	r2, [sp, #12]
 80054be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80054c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	6863      	ldr	r3, [r4, #4]
 80054ca:	4642      	mov	r2, r8
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4628      	mov	r0, r5
 80054d0:	4653      	mov	r3, sl
 80054d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80054d4:	f7ff fed4 	bl	8005280 <__cvt>
 80054d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054da:	4680      	mov	r8, r0
 80054dc:	2947      	cmp	r1, #71	; 0x47
 80054de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054e0:	d108      	bne.n	80054f4 <_printf_float+0x138>
 80054e2:	1cc8      	adds	r0, r1, #3
 80054e4:	db02      	blt.n	80054ec <_printf_float+0x130>
 80054e6:	6863      	ldr	r3, [r4, #4]
 80054e8:	4299      	cmp	r1, r3
 80054ea:	dd40      	ble.n	800556e <_printf_float+0x1b2>
 80054ec:	f1a9 0902 	sub.w	r9, r9, #2
 80054f0:	fa5f f989 	uxtb.w	r9, r9
 80054f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054f8:	d81f      	bhi.n	800553a <_printf_float+0x17e>
 80054fa:	464a      	mov	r2, r9
 80054fc:	3901      	subs	r1, #1
 80054fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005502:	910d      	str	r1, [sp, #52]	; 0x34
 8005504:	f7ff ff1b 	bl	800533e <__exponent>
 8005508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800550a:	4682      	mov	sl, r0
 800550c:	1813      	adds	r3, r2, r0
 800550e:	2a01      	cmp	r2, #1
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	dc02      	bgt.n	800551a <_printf_float+0x15e>
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	07d2      	lsls	r2, r2, #31
 8005518:	d501      	bpl.n	800551e <_printf_float+0x162>
 800551a:	3301      	adds	r3, #1
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005522:	2b00      	cmp	r3, #0
 8005524:	d09b      	beq.n	800545e <_printf_float+0xa2>
 8005526:	232d      	movs	r3, #45	; 0x2d
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552c:	e797      	b.n	800545e <_printf_float+0xa2>
 800552e:	2947      	cmp	r1, #71	; 0x47
 8005530:	d1bc      	bne.n	80054ac <_printf_float+0xf0>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ba      	bne.n	80054ac <_printf_float+0xf0>
 8005536:	2301      	movs	r3, #1
 8005538:	e7b7      	b.n	80054aa <_printf_float+0xee>
 800553a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800553e:	d118      	bne.n	8005572 <_printf_float+0x1b6>
 8005540:	2900      	cmp	r1, #0
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	dd0b      	ble.n	800555e <_printf_float+0x1a2>
 8005546:	6121      	str	r1, [r4, #16]
 8005548:	b913      	cbnz	r3, 8005550 <_printf_float+0x194>
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	07d0      	lsls	r0, r2, #31
 800554e:	d502      	bpl.n	8005556 <_printf_float+0x19a>
 8005550:	3301      	adds	r3, #1
 8005552:	440b      	add	r3, r1
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	f04f 0a00 	mov.w	sl, #0
 800555a:	65a1      	str	r1, [r4, #88]	; 0x58
 800555c:	e7df      	b.n	800551e <_printf_float+0x162>
 800555e:	b913      	cbnz	r3, 8005566 <_printf_float+0x1aa>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	07d2      	lsls	r2, r2, #31
 8005564:	d501      	bpl.n	800556a <_printf_float+0x1ae>
 8005566:	3302      	adds	r3, #2
 8005568:	e7f4      	b.n	8005554 <_printf_float+0x198>
 800556a:	2301      	movs	r3, #1
 800556c:	e7f2      	b.n	8005554 <_printf_float+0x198>
 800556e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005574:	4299      	cmp	r1, r3
 8005576:	db05      	blt.n	8005584 <_printf_float+0x1c8>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	6121      	str	r1, [r4, #16]
 800557c:	07d8      	lsls	r0, r3, #31
 800557e:	d5ea      	bpl.n	8005556 <_printf_float+0x19a>
 8005580:	1c4b      	adds	r3, r1, #1
 8005582:	e7e7      	b.n	8005554 <_printf_float+0x198>
 8005584:	2900      	cmp	r1, #0
 8005586:	bfcc      	ite	gt
 8005588:	2201      	movgt	r2, #1
 800558a:	f1c1 0202 	rsble	r2, r1, #2
 800558e:	4413      	add	r3, r2
 8005590:	e7e0      	b.n	8005554 <_printf_float+0x198>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	055a      	lsls	r2, r3, #21
 8005596:	d407      	bmi.n	80055a8 <_printf_float+0x1ec>
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	4642      	mov	r2, r8
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	d12b      	bne.n	80055fe <_printf_float+0x242>
 80055a6:	e764      	b.n	8005472 <_printf_float+0xb6>
 80055a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055ac:	f240 80dd 	bls.w	800576a <_printf_float+0x3ae>
 80055b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055b4:	2200      	movs	r2, #0
 80055b6:	2300      	movs	r3, #0
 80055b8:	f7fb f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d033      	beq.n	8005628 <_printf_float+0x26c>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	4a35      	ldr	r2, [pc, #212]	; (800569c <_printf_float+0x2e0>)
 80055c8:	47b8      	blx	r7
 80055ca:	3001      	adds	r0, #1
 80055cc:	f43f af51 	beq.w	8005472 <_printf_float+0xb6>
 80055d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055d4:	429a      	cmp	r2, r3
 80055d6:	db02      	blt.n	80055de <_printf_float+0x222>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	07d8      	lsls	r0, r3, #31
 80055dc:	d50f      	bpl.n	80055fe <_printf_float+0x242>
 80055de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f af42 	beq.w	8005472 <_printf_float+0xb6>
 80055ee:	f04f 0800 	mov.w	r8, #0
 80055f2:	f104 091a 	add.w	r9, r4, #26
 80055f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055f8:	3b01      	subs	r3, #1
 80055fa:	4543      	cmp	r3, r8
 80055fc:	dc09      	bgt.n	8005612 <_printf_float+0x256>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	079b      	lsls	r3, r3, #30
 8005602:	f100 8102 	bmi.w	800580a <_printf_float+0x44e>
 8005606:	68e0      	ldr	r0, [r4, #12]
 8005608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800560a:	4298      	cmp	r0, r3
 800560c:	bfb8      	it	lt
 800560e:	4618      	movlt	r0, r3
 8005610:	e731      	b.n	8005476 <_printf_float+0xba>
 8005612:	2301      	movs	r3, #1
 8005614:	464a      	mov	r2, r9
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	f43f af28 	beq.w	8005472 <_printf_float+0xb6>
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	e7e6      	b.n	80055f6 <_printf_float+0x23a>
 8005628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800562a:	2b00      	cmp	r3, #0
 800562c:	dc38      	bgt.n	80056a0 <_printf_float+0x2e4>
 800562e:	2301      	movs	r3, #1
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	4a19      	ldr	r2, [pc, #100]	; (800569c <_printf_float+0x2e0>)
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	f43f af1a 	beq.w	8005472 <_printf_float+0xb6>
 800563e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005642:	4313      	orrs	r3, r2
 8005644:	d102      	bne.n	800564c <_printf_float+0x290>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	07d9      	lsls	r1, r3, #31
 800564a:	d5d8      	bpl.n	80055fe <_printf_float+0x242>
 800564c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f af0b 	beq.w	8005472 <_printf_float+0xb6>
 800565c:	f04f 0900 	mov.w	r9, #0
 8005660:	f104 0a1a 	add.w	sl, r4, #26
 8005664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005666:	425b      	negs	r3, r3
 8005668:	454b      	cmp	r3, r9
 800566a:	dc01      	bgt.n	8005670 <_printf_float+0x2b4>
 800566c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800566e:	e794      	b.n	800559a <_printf_float+0x1de>
 8005670:	2301      	movs	r3, #1
 8005672:	4652      	mov	r2, sl
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f aef9 	beq.w	8005472 <_printf_float+0xb6>
 8005680:	f109 0901 	add.w	r9, r9, #1
 8005684:	e7ee      	b.n	8005664 <_printf_float+0x2a8>
 8005686:	bf00      	nop
 8005688:	7fefffff 	.word	0x7fefffff
 800568c:	080084b4 	.word	0x080084b4
 8005690:	080084b8 	.word	0x080084b8
 8005694:	080084c0 	.word	0x080084c0
 8005698:	080084bc 	.word	0x080084bc
 800569c:	080084c4 	.word	0x080084c4
 80056a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056a4:	429a      	cmp	r2, r3
 80056a6:	bfa8      	it	ge
 80056a8:	461a      	movge	r2, r3
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	4691      	mov	r9, r2
 80056ae:	dc37      	bgt.n	8005720 <_printf_float+0x364>
 80056b0:	f04f 0b00 	mov.w	fp, #0
 80056b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056b8:	f104 021a 	add.w	r2, r4, #26
 80056bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80056c0:	ebaa 0309 	sub.w	r3, sl, r9
 80056c4:	455b      	cmp	r3, fp
 80056c6:	dc33      	bgt.n	8005730 <_printf_float+0x374>
 80056c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056cc:	429a      	cmp	r2, r3
 80056ce:	db3b      	blt.n	8005748 <_printf_float+0x38c>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	07da      	lsls	r2, r3, #31
 80056d4:	d438      	bmi.n	8005748 <_printf_float+0x38c>
 80056d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056da:	eba2 030a 	sub.w	r3, r2, sl
 80056de:	eba2 0901 	sub.w	r9, r2, r1
 80056e2:	4599      	cmp	r9, r3
 80056e4:	bfa8      	it	ge
 80056e6:	4699      	movge	r9, r3
 80056e8:	f1b9 0f00 	cmp.w	r9, #0
 80056ec:	dc34      	bgt.n	8005758 <_printf_float+0x39c>
 80056ee:	f04f 0800 	mov.w	r8, #0
 80056f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056f6:	f104 0a1a 	add.w	sl, r4, #26
 80056fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	eba3 0309 	sub.w	r3, r3, r9
 8005704:	4543      	cmp	r3, r8
 8005706:	f77f af7a 	ble.w	80055fe <_printf_float+0x242>
 800570a:	2301      	movs	r3, #1
 800570c:	4652      	mov	r2, sl
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	47b8      	blx	r7
 8005714:	3001      	adds	r0, #1
 8005716:	f43f aeac 	beq.w	8005472 <_printf_float+0xb6>
 800571a:	f108 0801 	add.w	r8, r8, #1
 800571e:	e7ec      	b.n	80056fa <_printf_float+0x33e>
 8005720:	4613      	mov	r3, r2
 8005722:	4631      	mov	r1, r6
 8005724:	4642      	mov	r2, r8
 8005726:	4628      	mov	r0, r5
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	d1c0      	bne.n	80056b0 <_printf_float+0x2f4>
 800572e:	e6a0      	b.n	8005472 <_printf_float+0xb6>
 8005730:	2301      	movs	r3, #1
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	920b      	str	r2, [sp, #44]	; 0x2c
 8005738:	47b8      	blx	r7
 800573a:	3001      	adds	r0, #1
 800573c:	f43f ae99 	beq.w	8005472 <_printf_float+0xb6>
 8005740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005742:	f10b 0b01 	add.w	fp, fp, #1
 8005746:	e7b9      	b.n	80056bc <_printf_float+0x300>
 8005748:	4631      	mov	r1, r6
 800574a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	d1bf      	bne.n	80056d6 <_printf_float+0x31a>
 8005756:	e68c      	b.n	8005472 <_printf_float+0xb6>
 8005758:	464b      	mov	r3, r9
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	eb08 020a 	add.w	r2, r8, sl
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	d1c2      	bne.n	80056ee <_printf_float+0x332>
 8005768:	e683      	b.n	8005472 <_printf_float+0xb6>
 800576a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800576c:	2a01      	cmp	r2, #1
 800576e:	dc01      	bgt.n	8005774 <_printf_float+0x3b8>
 8005770:	07db      	lsls	r3, r3, #31
 8005772:	d537      	bpl.n	80057e4 <_printf_float+0x428>
 8005774:	2301      	movs	r3, #1
 8005776:	4642      	mov	r2, r8
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f ae77 	beq.w	8005472 <_printf_float+0xb6>
 8005784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f ae6f 	beq.w	8005472 <_printf_float+0xb6>
 8005794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	f7fb f904 	bl	80009a8 <__aeabi_dcmpeq>
 80057a0:	b9d8      	cbnz	r0, 80057da <_printf_float+0x41e>
 80057a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a4:	f108 0201 	add.w	r2, r8, #1
 80057a8:	3b01      	subs	r3, #1
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	d10e      	bne.n	80057d2 <_printf_float+0x416>
 80057b4:	e65d      	b.n	8005472 <_printf_float+0xb6>
 80057b6:	2301      	movs	r3, #1
 80057b8:	464a      	mov	r2, r9
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f ae56 	beq.w	8005472 <_printf_float+0xb6>
 80057c6:	f108 0801 	add.w	r8, r8, #1
 80057ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057cc:	3b01      	subs	r3, #1
 80057ce:	4543      	cmp	r3, r8
 80057d0:	dcf1      	bgt.n	80057b6 <_printf_float+0x3fa>
 80057d2:	4653      	mov	r3, sl
 80057d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057d8:	e6e0      	b.n	800559c <_printf_float+0x1e0>
 80057da:	f04f 0800 	mov.w	r8, #0
 80057de:	f104 091a 	add.w	r9, r4, #26
 80057e2:	e7f2      	b.n	80057ca <_printf_float+0x40e>
 80057e4:	2301      	movs	r3, #1
 80057e6:	4642      	mov	r2, r8
 80057e8:	e7df      	b.n	80057aa <_printf_float+0x3ee>
 80057ea:	2301      	movs	r3, #1
 80057ec:	464a      	mov	r2, r9
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b8      	blx	r7
 80057f4:	3001      	adds	r0, #1
 80057f6:	f43f ae3c 	beq.w	8005472 <_printf_float+0xb6>
 80057fa:	f108 0801 	add.w	r8, r8, #1
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005802:	1a5b      	subs	r3, r3, r1
 8005804:	4543      	cmp	r3, r8
 8005806:	dcf0      	bgt.n	80057ea <_printf_float+0x42e>
 8005808:	e6fd      	b.n	8005606 <_printf_float+0x24a>
 800580a:	f04f 0800 	mov.w	r8, #0
 800580e:	f104 0919 	add.w	r9, r4, #25
 8005812:	e7f4      	b.n	80057fe <_printf_float+0x442>

08005814 <_printf_common>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	4616      	mov	r6, r2
 800581a:	4699      	mov	r9, r3
 800581c:	688a      	ldr	r2, [r1, #8]
 800581e:	690b      	ldr	r3, [r1, #16]
 8005820:	4607      	mov	r7, r0
 8005822:	4293      	cmp	r3, r2
 8005824:	bfb8      	it	lt
 8005826:	4613      	movlt	r3, r2
 8005828:	6033      	str	r3, [r6, #0]
 800582a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800582e:	460c      	mov	r4, r1
 8005830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005834:	b10a      	cbz	r2, 800583a <_printf_common+0x26>
 8005836:	3301      	adds	r3, #1
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	0699      	lsls	r1, r3, #26
 800583e:	bf42      	ittt	mi
 8005840:	6833      	ldrmi	r3, [r6, #0]
 8005842:	3302      	addmi	r3, #2
 8005844:	6033      	strmi	r3, [r6, #0]
 8005846:	6825      	ldr	r5, [r4, #0]
 8005848:	f015 0506 	ands.w	r5, r5, #6
 800584c:	d106      	bne.n	800585c <_printf_common+0x48>
 800584e:	f104 0a19 	add.w	sl, r4, #25
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	6832      	ldr	r2, [r6, #0]
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	42ab      	cmp	r3, r5
 800585a:	dc28      	bgt.n	80058ae <_printf_common+0x9a>
 800585c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005860:	1e13      	subs	r3, r2, #0
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	bf18      	it	ne
 8005866:	2301      	movne	r3, #1
 8005868:	0692      	lsls	r2, r2, #26
 800586a:	d42d      	bmi.n	80058c8 <_printf_common+0xb4>
 800586c:	4649      	mov	r1, r9
 800586e:	4638      	mov	r0, r7
 8005870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005874:	47c0      	blx	r8
 8005876:	3001      	adds	r0, #1
 8005878:	d020      	beq.n	80058bc <_printf_common+0xa8>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	68e5      	ldr	r5, [r4, #12]
 800587e:	f003 0306 	and.w	r3, r3, #6
 8005882:	2b04      	cmp	r3, #4
 8005884:	bf18      	it	ne
 8005886:	2500      	movne	r5, #0
 8005888:	6832      	ldr	r2, [r6, #0]
 800588a:	f04f 0600 	mov.w	r6, #0
 800588e:	68a3      	ldr	r3, [r4, #8]
 8005890:	bf08      	it	eq
 8005892:	1aad      	subeq	r5, r5, r2
 8005894:	6922      	ldr	r2, [r4, #16]
 8005896:	bf08      	it	eq
 8005898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800589c:	4293      	cmp	r3, r2
 800589e:	bfc4      	itt	gt
 80058a0:	1a9b      	subgt	r3, r3, r2
 80058a2:	18ed      	addgt	r5, r5, r3
 80058a4:	341a      	adds	r4, #26
 80058a6:	42b5      	cmp	r5, r6
 80058a8:	d11a      	bne.n	80058e0 <_printf_common+0xcc>
 80058aa:	2000      	movs	r0, #0
 80058ac:	e008      	b.n	80058c0 <_printf_common+0xac>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4652      	mov	r2, sl
 80058b2:	4649      	mov	r1, r9
 80058b4:	4638      	mov	r0, r7
 80058b6:	47c0      	blx	r8
 80058b8:	3001      	adds	r0, #1
 80058ba:	d103      	bne.n	80058c4 <_printf_common+0xb0>
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c4:	3501      	adds	r5, #1
 80058c6:	e7c4      	b.n	8005852 <_printf_common+0x3e>
 80058c8:	2030      	movs	r0, #48	; 0x30
 80058ca:	18e1      	adds	r1, r4, r3
 80058cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d6:	4422      	add	r2, r4
 80058d8:	3302      	adds	r3, #2
 80058da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058de:	e7c5      	b.n	800586c <_printf_common+0x58>
 80058e0:	2301      	movs	r3, #1
 80058e2:	4622      	mov	r2, r4
 80058e4:	4649      	mov	r1, r9
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c0      	blx	r8
 80058ea:	3001      	adds	r0, #1
 80058ec:	d0e6      	beq.n	80058bc <_printf_common+0xa8>
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7d9      	b.n	80058a6 <_printf_common+0x92>
	...

080058f4 <_printf_i>:
 80058f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	460c      	mov	r4, r1
 80058fa:	7e27      	ldrb	r7, [r4, #24]
 80058fc:	4691      	mov	r9, r2
 80058fe:	2f78      	cmp	r7, #120	; 0x78
 8005900:	4680      	mov	r8, r0
 8005902:	469a      	mov	sl, r3
 8005904:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590a:	d807      	bhi.n	800591c <_printf_i+0x28>
 800590c:	2f62      	cmp	r7, #98	; 0x62
 800590e:	d80a      	bhi.n	8005926 <_printf_i+0x32>
 8005910:	2f00      	cmp	r7, #0
 8005912:	f000 80d9 	beq.w	8005ac8 <_printf_i+0x1d4>
 8005916:	2f58      	cmp	r7, #88	; 0x58
 8005918:	f000 80a4 	beq.w	8005a64 <_printf_i+0x170>
 800591c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005924:	e03a      	b.n	800599c <_printf_i+0xa8>
 8005926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800592a:	2b15      	cmp	r3, #21
 800592c:	d8f6      	bhi.n	800591c <_printf_i+0x28>
 800592e:	a001      	add	r0, pc, #4	; (adr r0, 8005934 <_printf_i+0x40>)
 8005930:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005934:	0800598d 	.word	0x0800598d
 8005938:	080059a1 	.word	0x080059a1
 800593c:	0800591d 	.word	0x0800591d
 8005940:	0800591d 	.word	0x0800591d
 8005944:	0800591d 	.word	0x0800591d
 8005948:	0800591d 	.word	0x0800591d
 800594c:	080059a1 	.word	0x080059a1
 8005950:	0800591d 	.word	0x0800591d
 8005954:	0800591d 	.word	0x0800591d
 8005958:	0800591d 	.word	0x0800591d
 800595c:	0800591d 	.word	0x0800591d
 8005960:	08005aaf 	.word	0x08005aaf
 8005964:	080059d1 	.word	0x080059d1
 8005968:	08005a91 	.word	0x08005a91
 800596c:	0800591d 	.word	0x0800591d
 8005970:	0800591d 	.word	0x0800591d
 8005974:	08005ad1 	.word	0x08005ad1
 8005978:	0800591d 	.word	0x0800591d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800591d 	.word	0x0800591d
 8005984:	0800591d 	.word	0x0800591d
 8005988:	08005a99 	.word	0x08005a99
 800598c:	680b      	ldr	r3, [r1, #0]
 800598e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	600a      	str	r2, [r1, #0]
 8005998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800599c:	2301      	movs	r3, #1
 800599e:	e0a4      	b.n	8005aea <_printf_i+0x1f6>
 80059a0:	6825      	ldr	r5, [r4, #0]
 80059a2:	6808      	ldr	r0, [r1, #0]
 80059a4:	062e      	lsls	r6, r5, #24
 80059a6:	f100 0304 	add.w	r3, r0, #4
 80059aa:	d50a      	bpl.n	80059c2 <_printf_i+0xce>
 80059ac:	6805      	ldr	r5, [r0, #0]
 80059ae:	600b      	str	r3, [r1, #0]
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	da03      	bge.n	80059bc <_printf_i+0xc8>
 80059b4:	232d      	movs	r3, #45	; 0x2d
 80059b6:	426d      	negs	r5, r5
 80059b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059bc:	230a      	movs	r3, #10
 80059be:	485e      	ldr	r0, [pc, #376]	; (8005b38 <_printf_i+0x244>)
 80059c0:	e019      	b.n	80059f6 <_printf_i+0x102>
 80059c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059c6:	6805      	ldr	r5, [r0, #0]
 80059c8:	600b      	str	r3, [r1, #0]
 80059ca:	bf18      	it	ne
 80059cc:	b22d      	sxthne	r5, r5
 80059ce:	e7ef      	b.n	80059b0 <_printf_i+0xbc>
 80059d0:	680b      	ldr	r3, [r1, #0]
 80059d2:	6825      	ldr	r5, [r4, #0]
 80059d4:	1d18      	adds	r0, r3, #4
 80059d6:	6008      	str	r0, [r1, #0]
 80059d8:	0628      	lsls	r0, r5, #24
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0xec>
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	e002      	b.n	80059e6 <_printf_i+0xf2>
 80059e0:	0669      	lsls	r1, r5, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0xe8>
 80059e4:	881d      	ldrh	r5, [r3, #0]
 80059e6:	2f6f      	cmp	r7, #111	; 0x6f
 80059e8:	bf0c      	ite	eq
 80059ea:	2308      	moveq	r3, #8
 80059ec:	230a      	movne	r3, #10
 80059ee:	4852      	ldr	r0, [pc, #328]	; (8005b38 <_printf_i+0x244>)
 80059f0:	2100      	movs	r1, #0
 80059f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059f6:	6866      	ldr	r6, [r4, #4]
 80059f8:	2e00      	cmp	r6, #0
 80059fa:	bfa8      	it	ge
 80059fc:	6821      	ldrge	r1, [r4, #0]
 80059fe:	60a6      	str	r6, [r4, #8]
 8005a00:	bfa4      	itt	ge
 8005a02:	f021 0104 	bicge.w	r1, r1, #4
 8005a06:	6021      	strge	r1, [r4, #0]
 8005a08:	b90d      	cbnz	r5, 8005a0e <_printf_i+0x11a>
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	d04d      	beq.n	8005aaa <_printf_i+0x1b6>
 8005a0e:	4616      	mov	r6, r2
 8005a10:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a14:	fb03 5711 	mls	r7, r3, r1, r5
 8005a18:	5dc7      	ldrb	r7, [r0, r7]
 8005a1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a1e:	462f      	mov	r7, r5
 8005a20:	42bb      	cmp	r3, r7
 8005a22:	460d      	mov	r5, r1
 8005a24:	d9f4      	bls.n	8005a10 <_printf_i+0x11c>
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d10b      	bne.n	8005a42 <_printf_i+0x14e>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	07df      	lsls	r7, r3, #31
 8005a2e:	d508      	bpl.n	8005a42 <_printf_i+0x14e>
 8005a30:	6923      	ldr	r3, [r4, #16]
 8005a32:	6861      	ldr	r1, [r4, #4]
 8005a34:	4299      	cmp	r1, r3
 8005a36:	bfde      	ittt	le
 8005a38:	2330      	movle	r3, #48	; 0x30
 8005a3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a42:	1b92      	subs	r2, r2, r6
 8005a44:	6122      	str	r2, [r4, #16]
 8005a46:	464b      	mov	r3, r9
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f8cd a000 	str.w	sl, [sp]
 8005a50:	aa03      	add	r2, sp, #12
 8005a52:	f7ff fedf 	bl	8005814 <_printf_common>
 8005a56:	3001      	adds	r0, #1
 8005a58:	d14c      	bne.n	8005af4 <_printf_i+0x200>
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	b004      	add	sp, #16
 8005a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a64:	4834      	ldr	r0, [pc, #208]	; (8005b38 <_printf_i+0x244>)
 8005a66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a6a:	680e      	ldr	r6, [r1, #0]
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a72:	061f      	lsls	r7, r3, #24
 8005a74:	600e      	str	r6, [r1, #0]
 8005a76:	d514      	bpl.n	8005aa2 <_printf_i+0x1ae>
 8005a78:	07d9      	lsls	r1, r3, #31
 8005a7a:	bf44      	itt	mi
 8005a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a80:	6023      	strmi	r3, [r4, #0]
 8005a82:	b91d      	cbnz	r5, 8005a8c <_printf_i+0x198>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	f023 0320 	bic.w	r3, r3, #32
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	e7af      	b.n	80059f0 <_printf_i+0xfc>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	f043 0320 	orr.w	r3, r3, #32
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	2378      	movs	r3, #120	; 0x78
 8005a9a:	4828      	ldr	r0, [pc, #160]	; (8005b3c <_printf_i+0x248>)
 8005a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aa0:	e7e3      	b.n	8005a6a <_printf_i+0x176>
 8005aa2:	065e      	lsls	r6, r3, #25
 8005aa4:	bf48      	it	mi
 8005aa6:	b2ad      	uxthmi	r5, r5
 8005aa8:	e7e6      	b.n	8005a78 <_printf_i+0x184>
 8005aaa:	4616      	mov	r6, r2
 8005aac:	e7bb      	b.n	8005a26 <_printf_i+0x132>
 8005aae:	680b      	ldr	r3, [r1, #0]
 8005ab0:	6826      	ldr	r6, [r4, #0]
 8005ab2:	1d1d      	adds	r5, r3, #4
 8005ab4:	6960      	ldr	r0, [r4, #20]
 8005ab6:	600d      	str	r5, [r1, #0]
 8005ab8:	0635      	lsls	r5, r6, #24
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	d501      	bpl.n	8005ac2 <_printf_i+0x1ce>
 8005abe:	6018      	str	r0, [r3, #0]
 8005ac0:	e002      	b.n	8005ac8 <_printf_i+0x1d4>
 8005ac2:	0671      	lsls	r1, r6, #25
 8005ac4:	d5fb      	bpl.n	8005abe <_printf_i+0x1ca>
 8005ac6:	8018      	strh	r0, [r3, #0]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4616      	mov	r6, r2
 8005acc:	6123      	str	r3, [r4, #16]
 8005ace:	e7ba      	b.n	8005a46 <_printf_i+0x152>
 8005ad0:	680b      	ldr	r3, [r1, #0]
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	600a      	str	r2, [r1, #0]
 8005ad6:	681e      	ldr	r6, [r3, #0]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4630      	mov	r0, r6
 8005adc:	6862      	ldr	r2, [r4, #4]
 8005ade:	f000 feb9 	bl	8006854 <memchr>
 8005ae2:	b108      	cbz	r0, 8005ae8 <_printf_i+0x1f4>
 8005ae4:	1b80      	subs	r0, r0, r6
 8005ae6:	6060      	str	r0, [r4, #4]
 8005ae8:	6863      	ldr	r3, [r4, #4]
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	2300      	movs	r3, #0
 8005aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af2:	e7a8      	b.n	8005a46 <_printf_i+0x152>
 8005af4:	4632      	mov	r2, r6
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	47d0      	blx	sl
 8005afe:	3001      	adds	r0, #1
 8005b00:	d0ab      	beq.n	8005a5a <_printf_i+0x166>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	079b      	lsls	r3, r3, #30
 8005b06:	d413      	bmi.n	8005b30 <_printf_i+0x23c>
 8005b08:	68e0      	ldr	r0, [r4, #12]
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	4298      	cmp	r0, r3
 8005b0e:	bfb8      	it	lt
 8005b10:	4618      	movlt	r0, r3
 8005b12:	e7a4      	b.n	8005a5e <_printf_i+0x16a>
 8005b14:	2301      	movs	r3, #1
 8005b16:	4632      	mov	r2, r6
 8005b18:	4649      	mov	r1, r9
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	47d0      	blx	sl
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d09b      	beq.n	8005a5a <_printf_i+0x166>
 8005b22:	3501      	adds	r5, #1
 8005b24:	68e3      	ldr	r3, [r4, #12]
 8005b26:	9903      	ldr	r1, [sp, #12]
 8005b28:	1a5b      	subs	r3, r3, r1
 8005b2a:	42ab      	cmp	r3, r5
 8005b2c:	dcf2      	bgt.n	8005b14 <_printf_i+0x220>
 8005b2e:	e7eb      	b.n	8005b08 <_printf_i+0x214>
 8005b30:	2500      	movs	r5, #0
 8005b32:	f104 0619 	add.w	r6, r4, #25
 8005b36:	e7f5      	b.n	8005b24 <_printf_i+0x230>
 8005b38:	080084c6 	.word	0x080084c6
 8005b3c:	080084d7 	.word	0x080084d7

08005b40 <quorem>:
 8005b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	6903      	ldr	r3, [r0, #16]
 8005b46:	690c      	ldr	r4, [r1, #16]
 8005b48:	4607      	mov	r7, r0
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	f2c0 8083 	blt.w	8005c56 <quorem+0x116>
 8005b50:	3c01      	subs	r4, #1
 8005b52:	f100 0514 	add.w	r5, r0, #20
 8005b56:	f101 0814 	add.w	r8, r1, #20
 8005b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b78:	d332      	bcc.n	8005be0 <quorem+0xa0>
 8005b7a:	f04f 0e00 	mov.w	lr, #0
 8005b7e:	4640      	mov	r0, r8
 8005b80:	46ac      	mov	ip, r5
 8005b82:	46f2      	mov	sl, lr
 8005b84:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b88:	b293      	uxth	r3, r2
 8005b8a:	fb06 e303 	mla	r3, r6, r3, lr
 8005b8e:	0c12      	lsrs	r2, r2, #16
 8005b90:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b94:	fb06 e202 	mla	r2, r6, r2, lr
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b9e:	f8dc a000 	ldr.w	sl, [ip]
 8005ba2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ba6:	fa1f fa8a 	uxth.w	sl, sl
 8005baa:	4453      	add	r3, sl
 8005bac:	fa1f fa82 	uxth.w	sl, r2
 8005bb0:	f8dc 2000 	ldr.w	r2, [ip]
 8005bb4:	4581      	cmp	r9, r0
 8005bb6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005bba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bc4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bc8:	f84c 3b04 	str.w	r3, [ip], #4
 8005bcc:	d2da      	bcs.n	8005b84 <quorem+0x44>
 8005bce:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bd2:	b92b      	cbnz	r3, 8005be0 <quorem+0xa0>
 8005bd4:	9b01      	ldr	r3, [sp, #4]
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	429d      	cmp	r5, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	d32f      	bcc.n	8005c3e <quorem+0xfe>
 8005bde:	613c      	str	r4, [r7, #16]
 8005be0:	4638      	mov	r0, r7
 8005be2:	f001 f8cd 	bl	8006d80 <__mcmp>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	db25      	blt.n	8005c36 <quorem+0xf6>
 8005bea:	4628      	mov	r0, r5
 8005bec:	f04f 0c00 	mov.w	ip, #0
 8005bf0:	3601      	adds	r6, #1
 8005bf2:	f858 1b04 	ldr.w	r1, [r8], #4
 8005bf6:	f8d0 e000 	ldr.w	lr, [r0]
 8005bfa:	b28b      	uxth	r3, r1
 8005bfc:	ebac 0303 	sub.w	r3, ip, r3
 8005c00:	fa1f f28e 	uxth.w	r2, lr
 8005c04:	4413      	add	r3, r2
 8005c06:	0c0a      	lsrs	r2, r1, #16
 8005c08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c16:	45c1      	cmp	r9, r8
 8005c18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c1c:	f840 3b04 	str.w	r3, [r0], #4
 8005c20:	d2e7      	bcs.n	8005bf2 <quorem+0xb2>
 8005c22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c2a:	b922      	cbnz	r2, 8005c36 <quorem+0xf6>
 8005c2c:	3b04      	subs	r3, #4
 8005c2e:	429d      	cmp	r5, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	d30a      	bcc.n	8005c4a <quorem+0x10a>
 8005c34:	613c      	str	r4, [r7, #16]
 8005c36:	4630      	mov	r0, r6
 8005c38:	b003      	add	sp, #12
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	3b04      	subs	r3, #4
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	d1cb      	bne.n	8005bde <quorem+0x9e>
 8005c46:	3c01      	subs	r4, #1
 8005c48:	e7c6      	b.n	8005bd8 <quorem+0x98>
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	3b04      	subs	r3, #4
 8005c4e:	2a00      	cmp	r2, #0
 8005c50:	d1f0      	bne.n	8005c34 <quorem+0xf4>
 8005c52:	3c01      	subs	r4, #1
 8005c54:	e7eb      	b.n	8005c2e <quorem+0xee>
 8005c56:	2000      	movs	r0, #0
 8005c58:	e7ee      	b.n	8005c38 <quorem+0xf8>
 8005c5a:	0000      	movs	r0, r0
 8005c5c:	0000      	movs	r0, r0
	...

08005c60 <_dtoa_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	4616      	mov	r6, r2
 8005c66:	461f      	mov	r7, r3
 8005c68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005c6a:	b099      	sub	sp, #100	; 0x64
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005c72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005c76:	b974      	cbnz	r4, 8005c96 <_dtoa_r+0x36>
 8005c78:	2010      	movs	r0, #16
 8005c7a:	f000 fde3 	bl	8006844 <malloc>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	6268      	str	r0, [r5, #36]	; 0x24
 8005c82:	b920      	cbnz	r0, 8005c8e <_dtoa_r+0x2e>
 8005c84:	21ea      	movs	r1, #234	; 0xea
 8005c86:	4bae      	ldr	r3, [pc, #696]	; (8005f40 <_dtoa_r+0x2e0>)
 8005c88:	48ae      	ldr	r0, [pc, #696]	; (8005f44 <_dtoa_r+0x2e4>)
 8005c8a:	f001 fa45 	bl	8007118 <__assert_func>
 8005c8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c92:	6004      	str	r4, [r0, #0]
 8005c94:	60c4      	str	r4, [r0, #12]
 8005c96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c98:	6819      	ldr	r1, [r3, #0]
 8005c9a:	b151      	cbz	r1, 8005cb2 <_dtoa_r+0x52>
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4093      	lsls	r3, r2
 8005ca2:	604a      	str	r2, [r1, #4]
 8005ca4:	608b      	str	r3, [r1, #8]
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fe30 	bl	800690c <_Bfree>
 8005cac:	2200      	movs	r2, #0
 8005cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	1e3b      	subs	r3, r7, #0
 8005cb4:	bfaf      	iteee	ge
 8005cb6:	2300      	movge	r3, #0
 8005cb8:	2201      	movlt	r2, #1
 8005cba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cbe:	9305      	strlt	r3, [sp, #20]
 8005cc0:	bfa8      	it	ge
 8005cc2:	f8c8 3000 	strge.w	r3, [r8]
 8005cc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005cca:	4b9f      	ldr	r3, [pc, #636]	; (8005f48 <_dtoa_r+0x2e8>)
 8005ccc:	bfb8      	it	lt
 8005cce:	f8c8 2000 	strlt.w	r2, [r8]
 8005cd2:	ea33 0309 	bics.w	r3, r3, r9
 8005cd6:	d119      	bne.n	8005d0c <_dtoa_r+0xac>
 8005cd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ce4:	4333      	orrs	r3, r6
 8005ce6:	f000 8580 	beq.w	80067ea <_dtoa_r+0xb8a>
 8005cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cec:	b953      	cbnz	r3, 8005d04 <_dtoa_r+0xa4>
 8005cee:	4b97      	ldr	r3, [pc, #604]	; (8005f4c <_dtoa_r+0x2ec>)
 8005cf0:	e022      	b.n	8005d38 <_dtoa_r+0xd8>
 8005cf2:	4b97      	ldr	r3, [pc, #604]	; (8005f50 <_dtoa_r+0x2f0>)
 8005cf4:	9308      	str	r3, [sp, #32]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	9808      	ldr	r0, [sp, #32]
 8005cfe:	b019      	add	sp, #100	; 0x64
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	4b91      	ldr	r3, [pc, #580]	; (8005f4c <_dtoa_r+0x2ec>)
 8005d06:	9308      	str	r3, [sp, #32]
 8005d08:	3303      	adds	r3, #3
 8005d0a:	e7f5      	b.n	8005cf8 <_dtoa_r+0x98>
 8005d0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f7fa fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8005d20:	4680      	mov	r8, r0
 8005d22:	b158      	cbz	r0, 8005d3c <_dtoa_r+0xdc>
 8005d24:	2301      	movs	r3, #1
 8005d26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8559 	beq.w	80067e4 <_dtoa_r+0xb84>
 8005d32:	4888      	ldr	r0, [pc, #544]	; (8005f54 <_dtoa_r+0x2f4>)
 8005d34:	6018      	str	r0, [r3, #0]
 8005d36:	1e43      	subs	r3, r0, #1
 8005d38:	9308      	str	r3, [sp, #32]
 8005d3a:	e7df      	b.n	8005cfc <_dtoa_r+0x9c>
 8005d3c:	ab16      	add	r3, sp, #88	; 0x58
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	ab17      	add	r3, sp, #92	; 0x5c
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	4628      	mov	r0, r5
 8005d46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d4a:	f001 f8c5 	bl	8006ed8 <__d2b>
 8005d4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d52:	4682      	mov	sl, r0
 8005d54:	2c00      	cmp	r4, #0
 8005d56:	d07e      	beq.n	8005e56 <_dtoa_r+0x1f6>
 8005d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005d6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005d6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005d72:	2200      	movs	r2, #0
 8005d74:	4b78      	ldr	r3, [pc, #480]	; (8005f58 <_dtoa_r+0x2f8>)
 8005d76:	f7fa f9f7 	bl	8000168 <__aeabi_dsub>
 8005d7a:	a36b      	add	r3, pc, #428	; (adr r3, 8005f28 <_dtoa_r+0x2c8>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa fbaa 	bl	80004d8 <__aeabi_dmul>
 8005d84:	a36a      	add	r3, pc, #424	; (adr r3, 8005f30 <_dtoa_r+0x2d0>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa f9ef 	bl	800016c <__adddf3>
 8005d8e:	4606      	mov	r6, r0
 8005d90:	4620      	mov	r0, r4
 8005d92:	460f      	mov	r7, r1
 8005d94:	f7fa fb36 	bl	8000404 <__aeabi_i2d>
 8005d98:	a367      	add	r3, pc, #412	; (adr r3, 8005f38 <_dtoa_r+0x2d8>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fb9b 	bl	80004d8 <__aeabi_dmul>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4630      	mov	r0, r6
 8005da8:	4639      	mov	r1, r7
 8005daa:	f7fa f9df 	bl	800016c <__adddf3>
 8005dae:	4606      	mov	r6, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	f7fa fe41 	bl	8000a38 <__aeabi_d2iz>
 8005db6:	2200      	movs	r2, #0
 8005db8:	4681      	mov	r9, r0
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	f7fa fdfc 	bl	80009bc <__aeabi_dcmplt>
 8005dc4:	b148      	cbz	r0, 8005dda <_dtoa_r+0x17a>
 8005dc6:	4648      	mov	r0, r9
 8005dc8:	f7fa fb1c 	bl	8000404 <__aeabi_i2d>
 8005dcc:	4632      	mov	r2, r6
 8005dce:	463b      	mov	r3, r7
 8005dd0:	f7fa fdea 	bl	80009a8 <__aeabi_dcmpeq>
 8005dd4:	b908      	cbnz	r0, 8005dda <_dtoa_r+0x17a>
 8005dd6:	f109 39ff 	add.w	r9, r9, #4294967295
 8005dda:	f1b9 0f16 	cmp.w	r9, #22
 8005dde:	d857      	bhi.n	8005e90 <_dtoa_r+0x230>
 8005de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005de4:	4b5d      	ldr	r3, [pc, #372]	; (8005f5c <_dtoa_r+0x2fc>)
 8005de6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa fde5 	bl	80009bc <__aeabi_dcmplt>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d04e      	beq.n	8005e94 <_dtoa_r+0x234>
 8005df6:	2300      	movs	r3, #0
 8005df8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e00:	1b1c      	subs	r4, r3, r4
 8005e02:	1e63      	subs	r3, r4, #1
 8005e04:	9309      	str	r3, [sp, #36]	; 0x24
 8005e06:	bf49      	itett	mi
 8005e08:	f1c4 0301 	rsbmi	r3, r4, #1
 8005e0c:	2300      	movpl	r3, #0
 8005e0e:	9306      	strmi	r3, [sp, #24]
 8005e10:	2300      	movmi	r3, #0
 8005e12:	bf54      	ite	pl
 8005e14:	9306      	strpl	r3, [sp, #24]
 8005e16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e18:	f1b9 0f00 	cmp.w	r9, #0
 8005e1c:	db3c      	blt.n	8005e98 <_dtoa_r+0x238>
 8005e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e20:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005e24:	444b      	add	r3, r9
 8005e26:	9309      	str	r3, [sp, #36]	; 0x24
 8005e28:	2300      	movs	r3, #0
 8005e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e2e:	2b09      	cmp	r3, #9
 8005e30:	d86c      	bhi.n	8005f0c <_dtoa_r+0x2ac>
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	bfc4      	itt	gt
 8005e36:	3b04      	subgt	r3, #4
 8005e38:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005e3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e3c:	bfc8      	it	gt
 8005e3e:	2400      	movgt	r4, #0
 8005e40:	f1a3 0302 	sub.w	r3, r3, #2
 8005e44:	bfd8      	it	le
 8005e46:	2401      	movle	r4, #1
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	f200 808b 	bhi.w	8005f64 <_dtoa_r+0x304>
 8005e4e:	e8df f003 	tbb	[pc, r3]
 8005e52:	4f2d      	.short	0x4f2d
 8005e54:	5b4d      	.short	0x5b4d
 8005e56:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005e5a:	441c      	add	r4, r3
 8005e5c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	bfc3      	ittte	gt
 8005e64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e68:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005e6c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005e70:	f1c3 0320 	rsble	r3, r3, #32
 8005e74:	bfc6      	itte	gt
 8005e76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e7a:	4318      	orrgt	r0, r3
 8005e7c:	fa06 f003 	lslle.w	r0, r6, r3
 8005e80:	f7fa fab0 	bl	80003e4 <__aeabi_ui2d>
 8005e84:	2301      	movs	r3, #1
 8005e86:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005e8a:	3c01      	subs	r4, #1
 8005e8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e8e:	e770      	b.n	8005d72 <_dtoa_r+0x112>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e7b3      	b.n	8005dfc <_dtoa_r+0x19c>
 8005e94:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e96:	e7b2      	b.n	8005dfe <_dtoa_r+0x19e>
 8005e98:	9b06      	ldr	r3, [sp, #24]
 8005e9a:	eba3 0309 	sub.w	r3, r3, r9
 8005e9e:	9306      	str	r3, [sp, #24]
 8005ea0:	f1c9 0300 	rsb	r3, r9, #0
 8005ea4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8005eaa:	e7bf      	b.n	8005e2c <_dtoa_r+0x1cc>
 8005eac:	2300      	movs	r3, #0
 8005eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dc59      	bgt.n	8005f6a <_dtoa_r+0x30a>
 8005eb6:	f04f 0b01 	mov.w	fp, #1
 8005eba:	465b      	mov	r3, fp
 8005ebc:	f8cd b008 	str.w	fp, [sp, #8]
 8005ec0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005ec8:	6042      	str	r2, [r0, #4]
 8005eca:	2204      	movs	r2, #4
 8005ecc:	f102 0614 	add.w	r6, r2, #20
 8005ed0:	429e      	cmp	r6, r3
 8005ed2:	6841      	ldr	r1, [r0, #4]
 8005ed4:	d94f      	bls.n	8005f76 <_dtoa_r+0x316>
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fcd8 	bl	800688c <_Balloc>
 8005edc:	9008      	str	r0, [sp, #32]
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d14d      	bne.n	8005f7e <_dtoa_r+0x31e>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <_dtoa_r+0x300>)
 8005eea:	e6cd      	b.n	8005c88 <_dtoa_r+0x28>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e7de      	b.n	8005eae <_dtoa_r+0x24e>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ef6:	eb09 0b03 	add.w	fp, r9, r3
 8005efa:	f10b 0301 	add.w	r3, fp, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	bfb8      	it	lt
 8005f04:	2301      	movlt	r3, #1
 8005f06:	e7dd      	b.n	8005ec4 <_dtoa_r+0x264>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e7f2      	b.n	8005ef2 <_dtoa_r+0x292>
 8005f0c:	2401      	movs	r4, #1
 8005f0e:	2300      	movs	r3, #0
 8005f10:	940b      	str	r4, [sp, #44]	; 0x2c
 8005f12:	9322      	str	r3, [sp, #136]	; 0x88
 8005f14:	f04f 3bff 	mov.w	fp, #4294967295
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2312      	movs	r3, #18
 8005f1c:	f8cd b008 	str.w	fp, [sp, #8]
 8005f20:	9223      	str	r2, [sp, #140]	; 0x8c
 8005f22:	e7cf      	b.n	8005ec4 <_dtoa_r+0x264>
 8005f24:	f3af 8000 	nop.w
 8005f28:	636f4361 	.word	0x636f4361
 8005f2c:	3fd287a7 	.word	0x3fd287a7
 8005f30:	8b60c8b3 	.word	0x8b60c8b3
 8005f34:	3fc68a28 	.word	0x3fc68a28
 8005f38:	509f79fb 	.word	0x509f79fb
 8005f3c:	3fd34413 	.word	0x3fd34413
 8005f40:	080084f5 	.word	0x080084f5
 8005f44:	0800850c 	.word	0x0800850c
 8005f48:	7ff00000 	.word	0x7ff00000
 8005f4c:	080084f1 	.word	0x080084f1
 8005f50:	080084e8 	.word	0x080084e8
 8005f54:	080084c5 	.word	0x080084c5
 8005f58:	3ff80000 	.word	0x3ff80000
 8005f5c:	08008608 	.word	0x08008608
 8005f60:	0800856b 	.word	0x0800856b
 8005f64:	2301      	movs	r3, #1
 8005f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f68:	e7d4      	b.n	8005f14 <_dtoa_r+0x2b4>
 8005f6a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005f6e:	465b      	mov	r3, fp
 8005f70:	f8cd b008 	str.w	fp, [sp, #8]
 8005f74:	e7a6      	b.n	8005ec4 <_dtoa_r+0x264>
 8005f76:	3101      	adds	r1, #1
 8005f78:	6041      	str	r1, [r0, #4]
 8005f7a:	0052      	lsls	r2, r2, #1
 8005f7c:	e7a6      	b.n	8005ecc <_dtoa_r+0x26c>
 8005f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f80:	9a08      	ldr	r2, [sp, #32]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	9b02      	ldr	r3, [sp, #8]
 8005f86:	2b0e      	cmp	r3, #14
 8005f88:	f200 80a8 	bhi.w	80060dc <_dtoa_r+0x47c>
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	f000 80a5 	beq.w	80060dc <_dtoa_r+0x47c>
 8005f92:	f1b9 0f00 	cmp.w	r9, #0
 8005f96:	dd34      	ble.n	8006002 <_dtoa_r+0x3a2>
 8005f98:	4a9a      	ldr	r2, [pc, #616]	; (8006204 <_dtoa_r+0x5a4>)
 8005f9a:	f009 030f 	and.w	r3, r9, #15
 8005f9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fa2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005fa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005faa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005fae:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005fb2:	d016      	beq.n	8005fe2 <_dtoa_r+0x382>
 8005fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fb8:	4b93      	ldr	r3, [pc, #588]	; (8006208 <_dtoa_r+0x5a8>)
 8005fba:	2703      	movs	r7, #3
 8005fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fc0:	f7fa fbb4 	bl	800072c <__aeabi_ddiv>
 8005fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fc8:	f004 040f 	and.w	r4, r4, #15
 8005fcc:	4e8e      	ldr	r6, [pc, #568]	; (8006208 <_dtoa_r+0x5a8>)
 8005fce:	b954      	cbnz	r4, 8005fe6 <_dtoa_r+0x386>
 8005fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd8:	f7fa fba8 	bl	800072c <__aeabi_ddiv>
 8005fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fe0:	e029      	b.n	8006036 <_dtoa_r+0x3d6>
 8005fe2:	2702      	movs	r7, #2
 8005fe4:	e7f2      	b.n	8005fcc <_dtoa_r+0x36c>
 8005fe6:	07e1      	lsls	r1, r4, #31
 8005fe8:	d508      	bpl.n	8005ffc <_dtoa_r+0x39c>
 8005fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ff2:	f7fa fa71 	bl	80004d8 <__aeabi_dmul>
 8005ff6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ffa:	3701      	adds	r7, #1
 8005ffc:	1064      	asrs	r4, r4, #1
 8005ffe:	3608      	adds	r6, #8
 8006000:	e7e5      	b.n	8005fce <_dtoa_r+0x36e>
 8006002:	f000 80a5 	beq.w	8006150 <_dtoa_r+0x4f0>
 8006006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800600a:	f1c9 0400 	rsb	r4, r9, #0
 800600e:	4b7d      	ldr	r3, [pc, #500]	; (8006204 <_dtoa_r+0x5a4>)
 8006010:	f004 020f 	and.w	r2, r4, #15
 8006014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f7fa fa5c 	bl	80004d8 <__aeabi_dmul>
 8006020:	2702      	movs	r7, #2
 8006022:	2300      	movs	r3, #0
 8006024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006028:	4e77      	ldr	r6, [pc, #476]	; (8006208 <_dtoa_r+0x5a8>)
 800602a:	1124      	asrs	r4, r4, #4
 800602c:	2c00      	cmp	r4, #0
 800602e:	f040 8084 	bne.w	800613a <_dtoa_r+0x4da>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1d2      	bne.n	8005fdc <_dtoa_r+0x37c>
 8006036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 808b 	beq.w	8006154 <_dtoa_r+0x4f4>
 800603e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006042:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006046:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800604a:	2200      	movs	r2, #0
 800604c:	4b6f      	ldr	r3, [pc, #444]	; (800620c <_dtoa_r+0x5ac>)
 800604e:	f7fa fcb5 	bl	80009bc <__aeabi_dcmplt>
 8006052:	2800      	cmp	r0, #0
 8006054:	d07e      	beq.n	8006154 <_dtoa_r+0x4f4>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d07b      	beq.n	8006154 <_dtoa_r+0x4f4>
 800605c:	f1bb 0f00 	cmp.w	fp, #0
 8006060:	dd38      	ble.n	80060d4 <_dtoa_r+0x474>
 8006062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006066:	2200      	movs	r2, #0
 8006068:	4b69      	ldr	r3, [pc, #420]	; (8006210 <_dtoa_r+0x5b0>)
 800606a:	f7fa fa35 	bl	80004d8 <__aeabi_dmul>
 800606e:	465c      	mov	r4, fp
 8006070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006074:	f109 38ff 	add.w	r8, r9, #4294967295
 8006078:	3701      	adds	r7, #1
 800607a:	4638      	mov	r0, r7
 800607c:	f7fa f9c2 	bl	8000404 <__aeabi_i2d>
 8006080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006084:	f7fa fa28 	bl	80004d8 <__aeabi_dmul>
 8006088:	2200      	movs	r2, #0
 800608a:	4b62      	ldr	r3, [pc, #392]	; (8006214 <_dtoa_r+0x5b4>)
 800608c:	f7fa f86e 	bl	800016c <__adddf3>
 8006090:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006094:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006098:	9611      	str	r6, [sp, #68]	; 0x44
 800609a:	2c00      	cmp	r4, #0
 800609c:	d15d      	bne.n	800615a <_dtoa_r+0x4fa>
 800609e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060a2:	2200      	movs	r2, #0
 80060a4:	4b5c      	ldr	r3, [pc, #368]	; (8006218 <_dtoa_r+0x5b8>)
 80060a6:	f7fa f85f 	bl	8000168 <__aeabi_dsub>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060b2:	4633      	mov	r3, r6
 80060b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060b6:	f7fa fc9f 	bl	80009f8 <__aeabi_dcmpgt>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f040 829e 	bne.w	80065fc <_dtoa_r+0x99c>
 80060c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80060ca:	f7fa fc77 	bl	80009bc <__aeabi_dcmplt>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	f040 8292 	bne.w	80065f8 <_dtoa_r+0x998>
 80060d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80060d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f2c0 8153 	blt.w	800638a <_dtoa_r+0x72a>
 80060e4:	f1b9 0f0e 	cmp.w	r9, #14
 80060e8:	f300 814f 	bgt.w	800638a <_dtoa_r+0x72a>
 80060ec:	4b45      	ldr	r3, [pc, #276]	; (8006204 <_dtoa_r+0x5a4>)
 80060ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80060f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80060fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f280 80db 	bge.w	80062b8 <_dtoa_r+0x658>
 8006102:	9b02      	ldr	r3, [sp, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f300 80d7 	bgt.w	80062b8 <_dtoa_r+0x658>
 800610a:	f040 8274 	bne.w	80065f6 <_dtoa_r+0x996>
 800610e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006112:	2200      	movs	r2, #0
 8006114:	4b40      	ldr	r3, [pc, #256]	; (8006218 <_dtoa_r+0x5b8>)
 8006116:	f7fa f9df 	bl	80004d8 <__aeabi_dmul>
 800611a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800611e:	f7fa fc61 	bl	80009e4 <__aeabi_dcmpge>
 8006122:	9c02      	ldr	r4, [sp, #8]
 8006124:	4626      	mov	r6, r4
 8006126:	2800      	cmp	r0, #0
 8006128:	f040 824a 	bne.w	80065c0 <_dtoa_r+0x960>
 800612c:	2331      	movs	r3, #49	; 0x31
 800612e:	9f08      	ldr	r7, [sp, #32]
 8006130:	f109 0901 	add.w	r9, r9, #1
 8006134:	f807 3b01 	strb.w	r3, [r7], #1
 8006138:	e246      	b.n	80065c8 <_dtoa_r+0x968>
 800613a:	07e2      	lsls	r2, r4, #31
 800613c:	d505      	bpl.n	800614a <_dtoa_r+0x4ea>
 800613e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006142:	f7fa f9c9 	bl	80004d8 <__aeabi_dmul>
 8006146:	2301      	movs	r3, #1
 8006148:	3701      	adds	r7, #1
 800614a:	1064      	asrs	r4, r4, #1
 800614c:	3608      	adds	r6, #8
 800614e:	e76d      	b.n	800602c <_dtoa_r+0x3cc>
 8006150:	2702      	movs	r7, #2
 8006152:	e770      	b.n	8006036 <_dtoa_r+0x3d6>
 8006154:	46c8      	mov	r8, r9
 8006156:	9c02      	ldr	r4, [sp, #8]
 8006158:	e78f      	b.n	800607a <_dtoa_r+0x41a>
 800615a:	9908      	ldr	r1, [sp, #32]
 800615c:	4b29      	ldr	r3, [pc, #164]	; (8006204 <_dtoa_r+0x5a4>)
 800615e:	4421      	add	r1, r4
 8006160:	9112      	str	r1, [sp, #72]	; 0x48
 8006162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006164:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006168:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800616c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006170:	2900      	cmp	r1, #0
 8006172:	d055      	beq.n	8006220 <_dtoa_r+0x5c0>
 8006174:	2000      	movs	r0, #0
 8006176:	4929      	ldr	r1, [pc, #164]	; (800621c <_dtoa_r+0x5bc>)
 8006178:	f7fa fad8 	bl	800072c <__aeabi_ddiv>
 800617c:	463b      	mov	r3, r7
 800617e:	4632      	mov	r2, r6
 8006180:	f7f9 fff2 	bl	8000168 <__aeabi_dsub>
 8006184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006188:	9f08      	ldr	r7, [sp, #32]
 800618a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800618e:	f7fa fc53 	bl	8000a38 <__aeabi_d2iz>
 8006192:	4604      	mov	r4, r0
 8006194:	f7fa f936 	bl	8000404 <__aeabi_i2d>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a0:	f7f9 ffe2 	bl	8000168 <__aeabi_dsub>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	3430      	adds	r4, #48	; 0x30
 80061aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061b2:	f807 4b01 	strb.w	r4, [r7], #1
 80061b6:	f7fa fc01 	bl	80009bc <__aeabi_dcmplt>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d174      	bne.n	80062a8 <_dtoa_r+0x648>
 80061be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c2:	2000      	movs	r0, #0
 80061c4:	4911      	ldr	r1, [pc, #68]	; (800620c <_dtoa_r+0x5ac>)
 80061c6:	f7f9 ffcf 	bl	8000168 <__aeabi_dsub>
 80061ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061ce:	f7fa fbf5 	bl	80009bc <__aeabi_dcmplt>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f040 80b6 	bne.w	8006344 <_dtoa_r+0x6e4>
 80061d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061da:	429f      	cmp	r7, r3
 80061dc:	f43f af7a 	beq.w	80060d4 <_dtoa_r+0x474>
 80061e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061e4:	2200      	movs	r2, #0
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <_dtoa_r+0x5b0>)
 80061e8:	f7fa f976 	bl	80004d8 <__aeabi_dmul>
 80061ec:	2200      	movs	r2, #0
 80061ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f6:	4b06      	ldr	r3, [pc, #24]	; (8006210 <_dtoa_r+0x5b0>)
 80061f8:	f7fa f96e 	bl	80004d8 <__aeabi_dmul>
 80061fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006200:	e7c3      	b.n	800618a <_dtoa_r+0x52a>
 8006202:	bf00      	nop
 8006204:	08008608 	.word	0x08008608
 8006208:	080085e0 	.word	0x080085e0
 800620c:	3ff00000 	.word	0x3ff00000
 8006210:	40240000 	.word	0x40240000
 8006214:	401c0000 	.word	0x401c0000
 8006218:	40140000 	.word	0x40140000
 800621c:	3fe00000 	.word	0x3fe00000
 8006220:	4630      	mov	r0, r6
 8006222:	4639      	mov	r1, r7
 8006224:	f7fa f958 	bl	80004d8 <__aeabi_dmul>
 8006228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800622a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800622e:	9c08      	ldr	r4, [sp, #32]
 8006230:	9314      	str	r3, [sp, #80]	; 0x50
 8006232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006236:	f7fa fbff 	bl	8000a38 <__aeabi_d2iz>
 800623a:	9015      	str	r0, [sp, #84]	; 0x54
 800623c:	f7fa f8e2 	bl	8000404 <__aeabi_i2d>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006248:	f7f9 ff8e 	bl	8000168 <__aeabi_dsub>
 800624c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800624e:	4606      	mov	r6, r0
 8006250:	3330      	adds	r3, #48	; 0x30
 8006252:	f804 3b01 	strb.w	r3, [r4], #1
 8006256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006258:	460f      	mov	r7, r1
 800625a:	429c      	cmp	r4, r3
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	d124      	bne.n	80062ac <_dtoa_r+0x64c>
 8006262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006266:	4bb3      	ldr	r3, [pc, #716]	; (8006534 <_dtoa_r+0x8d4>)
 8006268:	f7f9 ff80 	bl	800016c <__adddf3>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7fa fbc0 	bl	80009f8 <__aeabi_dcmpgt>
 8006278:	2800      	cmp	r0, #0
 800627a:	d162      	bne.n	8006342 <_dtoa_r+0x6e2>
 800627c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006280:	2000      	movs	r0, #0
 8006282:	49ac      	ldr	r1, [pc, #688]	; (8006534 <_dtoa_r+0x8d4>)
 8006284:	f7f9 ff70 	bl	8000168 <__aeabi_dsub>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4630      	mov	r0, r6
 800628e:	4639      	mov	r1, r7
 8006290:	f7fa fb94 	bl	80009bc <__aeabi_dcmplt>
 8006294:	2800      	cmp	r0, #0
 8006296:	f43f af1d 	beq.w	80060d4 <_dtoa_r+0x474>
 800629a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800629c:	1e7b      	subs	r3, r7, #1
 800629e:	9314      	str	r3, [sp, #80]	; 0x50
 80062a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80062a4:	2b30      	cmp	r3, #48	; 0x30
 80062a6:	d0f8      	beq.n	800629a <_dtoa_r+0x63a>
 80062a8:	46c1      	mov	r9, r8
 80062aa:	e03a      	b.n	8006322 <_dtoa_r+0x6c2>
 80062ac:	4ba2      	ldr	r3, [pc, #648]	; (8006538 <_dtoa_r+0x8d8>)
 80062ae:	f7fa f913 	bl	80004d8 <__aeabi_dmul>
 80062b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062b6:	e7bc      	b.n	8006232 <_dtoa_r+0x5d2>
 80062b8:	9f08      	ldr	r7, [sp, #32]
 80062ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c2:	f7fa fa33 	bl	800072c <__aeabi_ddiv>
 80062c6:	f7fa fbb7 	bl	8000a38 <__aeabi_d2iz>
 80062ca:	4604      	mov	r4, r0
 80062cc:	f7fa f89a 	bl	8000404 <__aeabi_i2d>
 80062d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062d4:	f7fa f900 	bl	80004d8 <__aeabi_dmul>
 80062d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80062dc:	460b      	mov	r3, r1
 80062de:	4602      	mov	r2, r0
 80062e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e4:	f7f9 ff40 	bl	8000168 <__aeabi_dsub>
 80062e8:	f807 6b01 	strb.w	r6, [r7], #1
 80062ec:	9e08      	ldr	r6, [sp, #32]
 80062ee:	9b02      	ldr	r3, [sp, #8]
 80062f0:	1bbe      	subs	r6, r7, r6
 80062f2:	42b3      	cmp	r3, r6
 80062f4:	d13a      	bne.n	800636c <_dtoa_r+0x70c>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	f7f9 ff37 	bl	800016c <__adddf3>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800630a:	f7fa fb75 	bl	80009f8 <__aeabi_dcmpgt>
 800630e:	bb58      	cbnz	r0, 8006368 <_dtoa_r+0x708>
 8006310:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006318:	f7fa fb46 	bl	80009a8 <__aeabi_dcmpeq>
 800631c:	b108      	cbz	r0, 8006322 <_dtoa_r+0x6c2>
 800631e:	07e1      	lsls	r1, r4, #31
 8006320:	d422      	bmi.n	8006368 <_dtoa_r+0x708>
 8006322:	4628      	mov	r0, r5
 8006324:	4651      	mov	r1, sl
 8006326:	f000 faf1 	bl	800690c <_Bfree>
 800632a:	2300      	movs	r3, #0
 800632c:	703b      	strb	r3, [r7, #0]
 800632e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006330:	f109 0001 	add.w	r0, r9, #1
 8006334:	6018      	str	r0, [r3, #0]
 8006336:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006338:	2b00      	cmp	r3, #0
 800633a:	f43f acdf 	beq.w	8005cfc <_dtoa_r+0x9c>
 800633e:	601f      	str	r7, [r3, #0]
 8006340:	e4dc      	b.n	8005cfc <_dtoa_r+0x9c>
 8006342:	4627      	mov	r7, r4
 8006344:	463b      	mov	r3, r7
 8006346:	461f      	mov	r7, r3
 8006348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800634c:	2a39      	cmp	r2, #57	; 0x39
 800634e:	d107      	bne.n	8006360 <_dtoa_r+0x700>
 8006350:	9a08      	ldr	r2, [sp, #32]
 8006352:	429a      	cmp	r2, r3
 8006354:	d1f7      	bne.n	8006346 <_dtoa_r+0x6e6>
 8006356:	2230      	movs	r2, #48	; 0x30
 8006358:	9908      	ldr	r1, [sp, #32]
 800635a:	f108 0801 	add.w	r8, r8, #1
 800635e:	700a      	strb	r2, [r1, #0]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	3201      	adds	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e79f      	b.n	80062a8 <_dtoa_r+0x648>
 8006368:	46c8      	mov	r8, r9
 800636a:	e7eb      	b.n	8006344 <_dtoa_r+0x6e4>
 800636c:	2200      	movs	r2, #0
 800636e:	4b72      	ldr	r3, [pc, #456]	; (8006538 <_dtoa_r+0x8d8>)
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800637c:	2200      	movs	r2, #0
 800637e:	2300      	movs	r3, #0
 8006380:	f7fa fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8006384:	2800      	cmp	r0, #0
 8006386:	d098      	beq.n	80062ba <_dtoa_r+0x65a>
 8006388:	e7cb      	b.n	8006322 <_dtoa_r+0x6c2>
 800638a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800638c:	2a00      	cmp	r2, #0
 800638e:	f000 80cd 	beq.w	800652c <_dtoa_r+0x8cc>
 8006392:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006394:	2a01      	cmp	r2, #1
 8006396:	f300 80af 	bgt.w	80064f8 <_dtoa_r+0x898>
 800639a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800639c:	2a00      	cmp	r2, #0
 800639e:	f000 80a7 	beq.w	80064f0 <_dtoa_r+0x890>
 80063a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063a8:	9f06      	ldr	r7, [sp, #24]
 80063aa:	9a06      	ldr	r2, [sp, #24]
 80063ac:	2101      	movs	r1, #1
 80063ae:	441a      	add	r2, r3
 80063b0:	9206      	str	r2, [sp, #24]
 80063b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b4:	4628      	mov	r0, r5
 80063b6:	441a      	add	r2, r3
 80063b8:	9209      	str	r2, [sp, #36]	; 0x24
 80063ba:	f000 fb61 	bl	8006a80 <__i2b>
 80063be:	4606      	mov	r6, r0
 80063c0:	2f00      	cmp	r7, #0
 80063c2:	dd0c      	ble.n	80063de <_dtoa_r+0x77e>
 80063c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dd09      	ble.n	80063de <_dtoa_r+0x77e>
 80063ca:	42bb      	cmp	r3, r7
 80063cc:	bfa8      	it	ge
 80063ce:	463b      	movge	r3, r7
 80063d0:	9a06      	ldr	r2, [sp, #24]
 80063d2:	1aff      	subs	r7, r7, r3
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	9206      	str	r2, [sp, #24]
 80063d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	9309      	str	r3, [sp, #36]	; 0x24
 80063de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e0:	b1f3      	cbz	r3, 8006420 <_dtoa_r+0x7c0>
 80063e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80a9 	beq.w	800653c <_dtoa_r+0x8dc>
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	dd10      	ble.n	8006410 <_dtoa_r+0x7b0>
 80063ee:	4631      	mov	r1, r6
 80063f0:	4622      	mov	r2, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 fbfe 	bl	8006bf4 <__pow5mult>
 80063f8:	4652      	mov	r2, sl
 80063fa:	4601      	mov	r1, r0
 80063fc:	4606      	mov	r6, r0
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 fb54 	bl	8006aac <__multiply>
 8006404:	4680      	mov	r8, r0
 8006406:	4651      	mov	r1, sl
 8006408:	4628      	mov	r0, r5
 800640a:	f000 fa7f 	bl	800690c <_Bfree>
 800640e:	46c2      	mov	sl, r8
 8006410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006412:	1b1a      	subs	r2, r3, r4
 8006414:	d004      	beq.n	8006420 <_dtoa_r+0x7c0>
 8006416:	4651      	mov	r1, sl
 8006418:	4628      	mov	r0, r5
 800641a:	f000 fbeb 	bl	8006bf4 <__pow5mult>
 800641e:	4682      	mov	sl, r0
 8006420:	2101      	movs	r1, #1
 8006422:	4628      	mov	r0, r5
 8006424:	f000 fb2c 	bl	8006a80 <__i2b>
 8006428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800642a:	4604      	mov	r4, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	f340 8087 	ble.w	8006540 <_dtoa_r+0x8e0>
 8006432:	461a      	mov	r2, r3
 8006434:	4601      	mov	r1, r0
 8006436:	4628      	mov	r0, r5
 8006438:	f000 fbdc 	bl	8006bf4 <__pow5mult>
 800643c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800643e:	4604      	mov	r4, r0
 8006440:	2b01      	cmp	r3, #1
 8006442:	f340 8080 	ble.w	8006546 <_dtoa_r+0x8e6>
 8006446:	f04f 0800 	mov.w	r8, #0
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006450:	6918      	ldr	r0, [r3, #16]
 8006452:	f000 fac7 	bl	80069e4 <__hi0bits>
 8006456:	f1c0 0020 	rsb	r0, r0, #32
 800645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645c:	4418      	add	r0, r3
 800645e:	f010 001f 	ands.w	r0, r0, #31
 8006462:	f000 8092 	beq.w	800658a <_dtoa_r+0x92a>
 8006466:	f1c0 0320 	rsb	r3, r0, #32
 800646a:	2b04      	cmp	r3, #4
 800646c:	f340 808a 	ble.w	8006584 <_dtoa_r+0x924>
 8006470:	f1c0 001c 	rsb	r0, r0, #28
 8006474:	9b06      	ldr	r3, [sp, #24]
 8006476:	4407      	add	r7, r0
 8006478:	4403      	add	r3, r0
 800647a:	9306      	str	r3, [sp, #24]
 800647c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647e:	4403      	add	r3, r0
 8006480:	9309      	str	r3, [sp, #36]	; 0x24
 8006482:	9b06      	ldr	r3, [sp, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd05      	ble.n	8006494 <_dtoa_r+0x834>
 8006488:	4651      	mov	r1, sl
 800648a:	461a      	mov	r2, r3
 800648c:	4628      	mov	r0, r5
 800648e:	f000 fc0b 	bl	8006ca8 <__lshift>
 8006492:	4682      	mov	sl, r0
 8006494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd05      	ble.n	80064a6 <_dtoa_r+0x846>
 800649a:	4621      	mov	r1, r4
 800649c:	461a      	mov	r2, r3
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 fc02 	bl	8006ca8 <__lshift>
 80064a4:	4604      	mov	r4, r0
 80064a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d070      	beq.n	800658e <_dtoa_r+0x92e>
 80064ac:	4621      	mov	r1, r4
 80064ae:	4650      	mov	r0, sl
 80064b0:	f000 fc66 	bl	8006d80 <__mcmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	da6a      	bge.n	800658e <_dtoa_r+0x92e>
 80064b8:	2300      	movs	r3, #0
 80064ba:	4651      	mov	r1, sl
 80064bc:	220a      	movs	r2, #10
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 fa46 	bl	8006950 <__multadd>
 80064c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c6:	4682      	mov	sl, r0
 80064c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8193 	beq.w	80067f8 <_dtoa_r+0xb98>
 80064d2:	4631      	mov	r1, r6
 80064d4:	2300      	movs	r3, #0
 80064d6:	220a      	movs	r2, #10
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 fa39 	bl	8006950 <__multadd>
 80064de:	f1bb 0f00 	cmp.w	fp, #0
 80064e2:	4606      	mov	r6, r0
 80064e4:	f300 8093 	bgt.w	800660e <_dtoa_r+0x9ae>
 80064e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	dc57      	bgt.n	800659e <_dtoa_r+0x93e>
 80064ee:	e08e      	b.n	800660e <_dtoa_r+0x9ae>
 80064f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064f6:	e756      	b.n	80063a6 <_dtoa_r+0x746>
 80064f8:	9b02      	ldr	r3, [sp, #8]
 80064fa:	1e5c      	subs	r4, r3, #1
 80064fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fe:	42a3      	cmp	r3, r4
 8006500:	bfb7      	itett	lt
 8006502:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006504:	1b1c      	subge	r4, r3, r4
 8006506:	1ae2      	sublt	r2, r4, r3
 8006508:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800650a:	bfbe      	ittt	lt
 800650c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800650e:	189b      	addlt	r3, r3, r2
 8006510:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006512:	9b02      	ldr	r3, [sp, #8]
 8006514:	bfb8      	it	lt
 8006516:	2400      	movlt	r4, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	bfbb      	ittet	lt
 800651c:	9b06      	ldrlt	r3, [sp, #24]
 800651e:	9a02      	ldrlt	r2, [sp, #8]
 8006520:	9f06      	ldrge	r7, [sp, #24]
 8006522:	1a9f      	sublt	r7, r3, r2
 8006524:	bfac      	ite	ge
 8006526:	9b02      	ldrge	r3, [sp, #8]
 8006528:	2300      	movlt	r3, #0
 800652a:	e73e      	b.n	80063aa <_dtoa_r+0x74a>
 800652c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800652e:	9f06      	ldr	r7, [sp, #24]
 8006530:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006532:	e745      	b.n	80063c0 <_dtoa_r+0x760>
 8006534:	3fe00000 	.word	0x3fe00000
 8006538:	40240000 	.word	0x40240000
 800653c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800653e:	e76a      	b.n	8006416 <_dtoa_r+0x7b6>
 8006540:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006542:	2b01      	cmp	r3, #1
 8006544:	dc19      	bgt.n	800657a <_dtoa_r+0x91a>
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	b9bb      	cbnz	r3, 800657a <_dtoa_r+0x91a>
 800654a:	9b05      	ldr	r3, [sp, #20]
 800654c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006550:	b99b      	cbnz	r3, 800657a <_dtoa_r+0x91a>
 8006552:	9b05      	ldr	r3, [sp, #20]
 8006554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006558:	0d1b      	lsrs	r3, r3, #20
 800655a:	051b      	lsls	r3, r3, #20
 800655c:	b183      	cbz	r3, 8006580 <_dtoa_r+0x920>
 800655e:	f04f 0801 	mov.w	r8, #1
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	3301      	adds	r3, #1
 8006566:	9306      	str	r3, [sp, #24]
 8006568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656a:	3301      	adds	r3, #1
 800656c:	9309      	str	r3, [sp, #36]	; 0x24
 800656e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	f47f af6a 	bne.w	800644a <_dtoa_r+0x7ea>
 8006576:	2001      	movs	r0, #1
 8006578:	e76f      	b.n	800645a <_dtoa_r+0x7fa>
 800657a:	f04f 0800 	mov.w	r8, #0
 800657e:	e7f6      	b.n	800656e <_dtoa_r+0x90e>
 8006580:	4698      	mov	r8, r3
 8006582:	e7f4      	b.n	800656e <_dtoa_r+0x90e>
 8006584:	f43f af7d 	beq.w	8006482 <_dtoa_r+0x822>
 8006588:	4618      	mov	r0, r3
 800658a:	301c      	adds	r0, #28
 800658c:	e772      	b.n	8006474 <_dtoa_r+0x814>
 800658e:	9b02      	ldr	r3, [sp, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	dc36      	bgt.n	8006602 <_dtoa_r+0x9a2>
 8006594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006596:	2b02      	cmp	r3, #2
 8006598:	dd33      	ble.n	8006602 <_dtoa_r+0x9a2>
 800659a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800659e:	f1bb 0f00 	cmp.w	fp, #0
 80065a2:	d10d      	bne.n	80065c0 <_dtoa_r+0x960>
 80065a4:	4621      	mov	r1, r4
 80065a6:	465b      	mov	r3, fp
 80065a8:	2205      	movs	r2, #5
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 f9d0 	bl	8006950 <__multadd>
 80065b0:	4601      	mov	r1, r0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4650      	mov	r0, sl
 80065b6:	f000 fbe3 	bl	8006d80 <__mcmp>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	f73f adb6 	bgt.w	800612c <_dtoa_r+0x4cc>
 80065c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065c2:	9f08      	ldr	r7, [sp, #32]
 80065c4:	ea6f 0903 	mvn.w	r9, r3
 80065c8:	f04f 0800 	mov.w	r8, #0
 80065cc:	4621      	mov	r1, r4
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f99c 	bl	800690c <_Bfree>
 80065d4:	2e00      	cmp	r6, #0
 80065d6:	f43f aea4 	beq.w	8006322 <_dtoa_r+0x6c2>
 80065da:	f1b8 0f00 	cmp.w	r8, #0
 80065de:	d005      	beq.n	80065ec <_dtoa_r+0x98c>
 80065e0:	45b0      	cmp	r8, r6
 80065e2:	d003      	beq.n	80065ec <_dtoa_r+0x98c>
 80065e4:	4641      	mov	r1, r8
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 f990 	bl	800690c <_Bfree>
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 f98c 	bl	800690c <_Bfree>
 80065f4:	e695      	b.n	8006322 <_dtoa_r+0x6c2>
 80065f6:	2400      	movs	r4, #0
 80065f8:	4626      	mov	r6, r4
 80065fa:	e7e1      	b.n	80065c0 <_dtoa_r+0x960>
 80065fc:	46c1      	mov	r9, r8
 80065fe:	4626      	mov	r6, r4
 8006600:	e594      	b.n	800612c <_dtoa_r+0x4cc>
 8006602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006604:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80fc 	beq.w	8006806 <_dtoa_r+0xba6>
 800660e:	2f00      	cmp	r7, #0
 8006610:	dd05      	ble.n	800661e <_dtoa_r+0x9be>
 8006612:	4631      	mov	r1, r6
 8006614:	463a      	mov	r2, r7
 8006616:	4628      	mov	r0, r5
 8006618:	f000 fb46 	bl	8006ca8 <__lshift>
 800661c:	4606      	mov	r6, r0
 800661e:	f1b8 0f00 	cmp.w	r8, #0
 8006622:	d05c      	beq.n	80066de <_dtoa_r+0xa7e>
 8006624:	4628      	mov	r0, r5
 8006626:	6871      	ldr	r1, [r6, #4]
 8006628:	f000 f930 	bl	800688c <_Balloc>
 800662c:	4607      	mov	r7, r0
 800662e:	b928      	cbnz	r0, 800663c <_dtoa_r+0x9dc>
 8006630:	4602      	mov	r2, r0
 8006632:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006636:	4b7e      	ldr	r3, [pc, #504]	; (8006830 <_dtoa_r+0xbd0>)
 8006638:	f7ff bb26 	b.w	8005c88 <_dtoa_r+0x28>
 800663c:	6932      	ldr	r2, [r6, #16]
 800663e:	f106 010c 	add.w	r1, r6, #12
 8006642:	3202      	adds	r2, #2
 8006644:	0092      	lsls	r2, r2, #2
 8006646:	300c      	adds	r0, #12
 8006648:	f000 f912 	bl	8006870 <memcpy>
 800664c:	2201      	movs	r2, #1
 800664e:	4639      	mov	r1, r7
 8006650:	4628      	mov	r0, r5
 8006652:	f000 fb29 	bl	8006ca8 <__lshift>
 8006656:	46b0      	mov	r8, r6
 8006658:	4606      	mov	r6, r0
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	3301      	adds	r3, #1
 800665e:	9302      	str	r3, [sp, #8]
 8006660:	9b08      	ldr	r3, [sp, #32]
 8006662:	445b      	add	r3, fp
 8006664:	930a      	str	r3, [sp, #40]	; 0x28
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	9309      	str	r3, [sp, #36]	; 0x24
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	4621      	mov	r1, r4
 8006672:	4650      	mov	r0, sl
 8006674:	f103 3bff 	add.w	fp, r3, #4294967295
 8006678:	f7ff fa62 	bl	8005b40 <quorem>
 800667c:	4603      	mov	r3, r0
 800667e:	4641      	mov	r1, r8
 8006680:	3330      	adds	r3, #48	; 0x30
 8006682:	9004      	str	r0, [sp, #16]
 8006684:	4650      	mov	r0, sl
 8006686:	930b      	str	r3, [sp, #44]	; 0x2c
 8006688:	f000 fb7a 	bl	8006d80 <__mcmp>
 800668c:	4632      	mov	r2, r6
 800668e:	9006      	str	r0, [sp, #24]
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 fb90 	bl	8006db8 <__mdiff>
 8006698:	68c2      	ldr	r2, [r0, #12]
 800669a:	4607      	mov	r7, r0
 800669c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800669e:	bb02      	cbnz	r2, 80066e2 <_dtoa_r+0xa82>
 80066a0:	4601      	mov	r1, r0
 80066a2:	4650      	mov	r0, sl
 80066a4:	f000 fb6c 	bl	8006d80 <__mcmp>
 80066a8:	4602      	mov	r2, r0
 80066aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ac:	4639      	mov	r1, r7
 80066ae:	4628      	mov	r0, r5
 80066b0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80066b4:	f000 f92a 	bl	800690c <_Bfree>
 80066b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066bc:	9f02      	ldr	r7, [sp, #8]
 80066be:	ea43 0102 	orr.w	r1, r3, r2
 80066c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c4:	430b      	orrs	r3, r1
 80066c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c8:	d10d      	bne.n	80066e6 <_dtoa_r+0xa86>
 80066ca:	2b39      	cmp	r3, #57	; 0x39
 80066cc:	d027      	beq.n	800671e <_dtoa_r+0xabe>
 80066ce:	9a06      	ldr	r2, [sp, #24]
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	dd01      	ble.n	80066d8 <_dtoa_r+0xa78>
 80066d4:	9b04      	ldr	r3, [sp, #16]
 80066d6:	3331      	adds	r3, #49	; 0x31
 80066d8:	f88b 3000 	strb.w	r3, [fp]
 80066dc:	e776      	b.n	80065cc <_dtoa_r+0x96c>
 80066de:	4630      	mov	r0, r6
 80066e0:	e7b9      	b.n	8006656 <_dtoa_r+0x9f6>
 80066e2:	2201      	movs	r2, #1
 80066e4:	e7e2      	b.n	80066ac <_dtoa_r+0xa4c>
 80066e6:	9906      	ldr	r1, [sp, #24]
 80066e8:	2900      	cmp	r1, #0
 80066ea:	db04      	blt.n	80066f6 <_dtoa_r+0xa96>
 80066ec:	9822      	ldr	r0, [sp, #136]	; 0x88
 80066ee:	4301      	orrs	r1, r0
 80066f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066f2:	4301      	orrs	r1, r0
 80066f4:	d120      	bne.n	8006738 <_dtoa_r+0xad8>
 80066f6:	2a00      	cmp	r2, #0
 80066f8:	ddee      	ble.n	80066d8 <_dtoa_r+0xa78>
 80066fa:	4651      	mov	r1, sl
 80066fc:	2201      	movs	r2, #1
 80066fe:	4628      	mov	r0, r5
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	f000 fad1 	bl	8006ca8 <__lshift>
 8006706:	4621      	mov	r1, r4
 8006708:	4682      	mov	sl, r0
 800670a:	f000 fb39 	bl	8006d80 <__mcmp>
 800670e:	2800      	cmp	r0, #0
 8006710:	9b02      	ldr	r3, [sp, #8]
 8006712:	dc02      	bgt.n	800671a <_dtoa_r+0xaba>
 8006714:	d1e0      	bne.n	80066d8 <_dtoa_r+0xa78>
 8006716:	07da      	lsls	r2, r3, #31
 8006718:	d5de      	bpl.n	80066d8 <_dtoa_r+0xa78>
 800671a:	2b39      	cmp	r3, #57	; 0x39
 800671c:	d1da      	bne.n	80066d4 <_dtoa_r+0xa74>
 800671e:	2339      	movs	r3, #57	; 0x39
 8006720:	f88b 3000 	strb.w	r3, [fp]
 8006724:	463b      	mov	r3, r7
 8006726:	461f      	mov	r7, r3
 8006728:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800672c:	3b01      	subs	r3, #1
 800672e:	2a39      	cmp	r2, #57	; 0x39
 8006730:	d050      	beq.n	80067d4 <_dtoa_r+0xb74>
 8006732:	3201      	adds	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	e749      	b.n	80065cc <_dtoa_r+0x96c>
 8006738:	2a00      	cmp	r2, #0
 800673a:	dd03      	ble.n	8006744 <_dtoa_r+0xae4>
 800673c:	2b39      	cmp	r3, #57	; 0x39
 800673e:	d0ee      	beq.n	800671e <_dtoa_r+0xabe>
 8006740:	3301      	adds	r3, #1
 8006742:	e7c9      	b.n	80066d8 <_dtoa_r+0xa78>
 8006744:	9a02      	ldr	r2, [sp, #8]
 8006746:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006748:	f802 3c01 	strb.w	r3, [r2, #-1]
 800674c:	428a      	cmp	r2, r1
 800674e:	d02a      	beq.n	80067a6 <_dtoa_r+0xb46>
 8006750:	4651      	mov	r1, sl
 8006752:	2300      	movs	r3, #0
 8006754:	220a      	movs	r2, #10
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f8fa 	bl	8006950 <__multadd>
 800675c:	45b0      	cmp	r8, r6
 800675e:	4682      	mov	sl, r0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	f04f 020a 	mov.w	r2, #10
 8006768:	4641      	mov	r1, r8
 800676a:	4628      	mov	r0, r5
 800676c:	d107      	bne.n	800677e <_dtoa_r+0xb1e>
 800676e:	f000 f8ef 	bl	8006950 <__multadd>
 8006772:	4680      	mov	r8, r0
 8006774:	4606      	mov	r6, r0
 8006776:	9b02      	ldr	r3, [sp, #8]
 8006778:	3301      	adds	r3, #1
 800677a:	9302      	str	r3, [sp, #8]
 800677c:	e777      	b.n	800666e <_dtoa_r+0xa0e>
 800677e:	f000 f8e7 	bl	8006950 <__multadd>
 8006782:	4631      	mov	r1, r6
 8006784:	4680      	mov	r8, r0
 8006786:	2300      	movs	r3, #0
 8006788:	220a      	movs	r2, #10
 800678a:	4628      	mov	r0, r5
 800678c:	f000 f8e0 	bl	8006950 <__multadd>
 8006790:	4606      	mov	r6, r0
 8006792:	e7f0      	b.n	8006776 <_dtoa_r+0xb16>
 8006794:	f1bb 0f00 	cmp.w	fp, #0
 8006798:	bfcc      	ite	gt
 800679a:	465f      	movgt	r7, fp
 800679c:	2701      	movle	r7, #1
 800679e:	f04f 0800 	mov.w	r8, #0
 80067a2:	9a08      	ldr	r2, [sp, #32]
 80067a4:	4417      	add	r7, r2
 80067a6:	4651      	mov	r1, sl
 80067a8:	2201      	movs	r2, #1
 80067aa:	4628      	mov	r0, r5
 80067ac:	9302      	str	r3, [sp, #8]
 80067ae:	f000 fa7b 	bl	8006ca8 <__lshift>
 80067b2:	4621      	mov	r1, r4
 80067b4:	4682      	mov	sl, r0
 80067b6:	f000 fae3 	bl	8006d80 <__mcmp>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	dcb2      	bgt.n	8006724 <_dtoa_r+0xac4>
 80067be:	d102      	bne.n	80067c6 <_dtoa_r+0xb66>
 80067c0:	9b02      	ldr	r3, [sp, #8]
 80067c2:	07db      	lsls	r3, r3, #31
 80067c4:	d4ae      	bmi.n	8006724 <_dtoa_r+0xac4>
 80067c6:	463b      	mov	r3, r7
 80067c8:	461f      	mov	r7, r3
 80067ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ce:	2a30      	cmp	r2, #48	; 0x30
 80067d0:	d0fa      	beq.n	80067c8 <_dtoa_r+0xb68>
 80067d2:	e6fb      	b.n	80065cc <_dtoa_r+0x96c>
 80067d4:	9a08      	ldr	r2, [sp, #32]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d1a5      	bne.n	8006726 <_dtoa_r+0xac6>
 80067da:	2331      	movs	r3, #49	; 0x31
 80067dc:	f109 0901 	add.w	r9, r9, #1
 80067e0:	7013      	strb	r3, [r2, #0]
 80067e2:	e6f3      	b.n	80065cc <_dtoa_r+0x96c>
 80067e4:	4b13      	ldr	r3, [pc, #76]	; (8006834 <_dtoa_r+0xbd4>)
 80067e6:	f7ff baa7 	b.w	8005d38 <_dtoa_r+0xd8>
 80067ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f aa80 	bne.w	8005cf2 <_dtoa_r+0x92>
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <_dtoa_r+0xbd8>)
 80067f4:	f7ff baa0 	b.w	8005d38 <_dtoa_r+0xd8>
 80067f8:	f1bb 0f00 	cmp.w	fp, #0
 80067fc:	dc03      	bgt.n	8006806 <_dtoa_r+0xba6>
 80067fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006800:	2b02      	cmp	r3, #2
 8006802:	f73f aecc 	bgt.w	800659e <_dtoa_r+0x93e>
 8006806:	9f08      	ldr	r7, [sp, #32]
 8006808:	4621      	mov	r1, r4
 800680a:	4650      	mov	r0, sl
 800680c:	f7ff f998 	bl	8005b40 <quorem>
 8006810:	9a08      	ldr	r2, [sp, #32]
 8006812:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006816:	f807 3b01 	strb.w	r3, [r7], #1
 800681a:	1aba      	subs	r2, r7, r2
 800681c:	4593      	cmp	fp, r2
 800681e:	ddb9      	ble.n	8006794 <_dtoa_r+0xb34>
 8006820:	4651      	mov	r1, sl
 8006822:	2300      	movs	r3, #0
 8006824:	220a      	movs	r2, #10
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f892 	bl	8006950 <__multadd>
 800682c:	4682      	mov	sl, r0
 800682e:	e7eb      	b.n	8006808 <_dtoa_r+0xba8>
 8006830:	0800856b 	.word	0x0800856b
 8006834:	080084c4 	.word	0x080084c4
 8006838:	080084e8 	.word	0x080084e8

0800683c <_localeconv_r>:
 800683c:	4800      	ldr	r0, [pc, #0]	; (8006840 <_localeconv_r+0x4>)
 800683e:	4770      	bx	lr
 8006840:	20000464 	.word	0x20000464

08006844 <malloc>:
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <malloc+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f000 bbfb 	b.w	8007044 <_malloc_r>
 800684e:	bf00      	nop
 8006850:	20000310 	.word	0x20000310

08006854 <memchr>:
 8006854:	4603      	mov	r3, r0
 8006856:	b510      	push	{r4, lr}
 8006858:	b2c9      	uxtb	r1, r1
 800685a:	4402      	add	r2, r0
 800685c:	4293      	cmp	r3, r2
 800685e:	4618      	mov	r0, r3
 8006860:	d101      	bne.n	8006866 <memchr+0x12>
 8006862:	2000      	movs	r0, #0
 8006864:	e003      	b.n	800686e <memchr+0x1a>
 8006866:	7804      	ldrb	r4, [r0, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	428c      	cmp	r4, r1
 800686c:	d1f6      	bne.n	800685c <memchr+0x8>
 800686e:	bd10      	pop	{r4, pc}

08006870 <memcpy>:
 8006870:	440a      	add	r2, r1
 8006872:	4291      	cmp	r1, r2
 8006874:	f100 33ff 	add.w	r3, r0, #4294967295
 8006878:	d100      	bne.n	800687c <memcpy+0xc>
 800687a:	4770      	bx	lr
 800687c:	b510      	push	{r4, lr}
 800687e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006882:	4291      	cmp	r1, r2
 8006884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006888:	d1f9      	bne.n	800687e <memcpy+0xe>
 800688a:	bd10      	pop	{r4, pc}

0800688c <_Balloc>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006890:	4604      	mov	r4, r0
 8006892:	460d      	mov	r5, r1
 8006894:	b976      	cbnz	r6, 80068b4 <_Balloc+0x28>
 8006896:	2010      	movs	r0, #16
 8006898:	f7ff ffd4 	bl	8006844 <malloc>
 800689c:	4602      	mov	r2, r0
 800689e:	6260      	str	r0, [r4, #36]	; 0x24
 80068a0:	b920      	cbnz	r0, 80068ac <_Balloc+0x20>
 80068a2:	2166      	movs	r1, #102	; 0x66
 80068a4:	4b17      	ldr	r3, [pc, #92]	; (8006904 <_Balloc+0x78>)
 80068a6:	4818      	ldr	r0, [pc, #96]	; (8006908 <_Balloc+0x7c>)
 80068a8:	f000 fc36 	bl	8007118 <__assert_func>
 80068ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068b0:	6006      	str	r6, [r0, #0]
 80068b2:	60c6      	str	r6, [r0, #12]
 80068b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068b6:	68f3      	ldr	r3, [r6, #12]
 80068b8:	b183      	cbz	r3, 80068dc <_Balloc+0x50>
 80068ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068c2:	b9b8      	cbnz	r0, 80068f4 <_Balloc+0x68>
 80068c4:	2101      	movs	r1, #1
 80068c6:	fa01 f605 	lsl.w	r6, r1, r5
 80068ca:	1d72      	adds	r2, r6, #5
 80068cc:	4620      	mov	r0, r4
 80068ce:	0092      	lsls	r2, r2, #2
 80068d0:	f000 fb5e 	bl	8006f90 <_calloc_r>
 80068d4:	b160      	cbz	r0, 80068f0 <_Balloc+0x64>
 80068d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068da:	e00e      	b.n	80068fa <_Balloc+0x6e>
 80068dc:	2221      	movs	r2, #33	; 0x21
 80068de:	2104      	movs	r1, #4
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fb55 	bl	8006f90 <_calloc_r>
 80068e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e8:	60f0      	str	r0, [r6, #12]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e4      	bne.n	80068ba <_Balloc+0x2e>
 80068f0:	2000      	movs	r0, #0
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
 80068f4:	6802      	ldr	r2, [r0, #0]
 80068f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068fa:	2300      	movs	r3, #0
 80068fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006900:	e7f7      	b.n	80068f2 <_Balloc+0x66>
 8006902:	bf00      	nop
 8006904:	080084f5 	.word	0x080084f5
 8006908:	0800857c 	.word	0x0800857c

0800690c <_Bfree>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006910:	4605      	mov	r5, r0
 8006912:	460c      	mov	r4, r1
 8006914:	b976      	cbnz	r6, 8006934 <_Bfree+0x28>
 8006916:	2010      	movs	r0, #16
 8006918:	f7ff ff94 	bl	8006844 <malloc>
 800691c:	4602      	mov	r2, r0
 800691e:	6268      	str	r0, [r5, #36]	; 0x24
 8006920:	b920      	cbnz	r0, 800692c <_Bfree+0x20>
 8006922:	218a      	movs	r1, #138	; 0x8a
 8006924:	4b08      	ldr	r3, [pc, #32]	; (8006948 <_Bfree+0x3c>)
 8006926:	4809      	ldr	r0, [pc, #36]	; (800694c <_Bfree+0x40>)
 8006928:	f000 fbf6 	bl	8007118 <__assert_func>
 800692c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006930:	6006      	str	r6, [r0, #0]
 8006932:	60c6      	str	r6, [r0, #12]
 8006934:	b13c      	cbz	r4, 8006946 <_Bfree+0x3a>
 8006936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006938:	6862      	ldr	r2, [r4, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006940:	6021      	str	r1, [r4, #0]
 8006942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	080084f5 	.word	0x080084f5
 800694c:	0800857c 	.word	0x0800857c

08006950 <__multadd>:
 8006950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006954:	4698      	mov	r8, r3
 8006956:	460c      	mov	r4, r1
 8006958:	2300      	movs	r3, #0
 800695a:	690e      	ldr	r6, [r1, #16]
 800695c:	4607      	mov	r7, r0
 800695e:	f101 0014 	add.w	r0, r1, #20
 8006962:	6805      	ldr	r5, [r0, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	b2a9      	uxth	r1, r5
 8006968:	fb02 8101 	mla	r1, r2, r1, r8
 800696c:	0c2d      	lsrs	r5, r5, #16
 800696e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006972:	fb02 c505 	mla	r5, r2, r5, ip
 8006976:	b289      	uxth	r1, r1
 8006978:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800697c:	429e      	cmp	r6, r3
 800697e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006982:	f840 1b04 	str.w	r1, [r0], #4
 8006986:	dcec      	bgt.n	8006962 <__multadd+0x12>
 8006988:	f1b8 0f00 	cmp.w	r8, #0
 800698c:	d022      	beq.n	80069d4 <__multadd+0x84>
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	42b3      	cmp	r3, r6
 8006992:	dc19      	bgt.n	80069c8 <__multadd+0x78>
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	4638      	mov	r0, r7
 8006998:	3101      	adds	r1, #1
 800699a:	f7ff ff77 	bl	800688c <_Balloc>
 800699e:	4605      	mov	r5, r0
 80069a0:	b928      	cbnz	r0, 80069ae <__multadd+0x5e>
 80069a2:	4602      	mov	r2, r0
 80069a4:	21b5      	movs	r1, #181	; 0xb5
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <__multadd+0x8c>)
 80069a8:	480d      	ldr	r0, [pc, #52]	; (80069e0 <__multadd+0x90>)
 80069aa:	f000 fbb5 	bl	8007118 <__assert_func>
 80069ae:	6922      	ldr	r2, [r4, #16]
 80069b0:	f104 010c 	add.w	r1, r4, #12
 80069b4:	3202      	adds	r2, #2
 80069b6:	0092      	lsls	r2, r2, #2
 80069b8:	300c      	adds	r0, #12
 80069ba:	f7ff ff59 	bl	8006870 <memcpy>
 80069be:	4621      	mov	r1, r4
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7ff ffa3 	bl	800690c <_Bfree>
 80069c6:	462c      	mov	r4, r5
 80069c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80069cc:	3601      	adds	r6, #1
 80069ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80069d2:	6126      	str	r6, [r4, #16]
 80069d4:	4620      	mov	r0, r4
 80069d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069da:	bf00      	nop
 80069dc:	0800856b 	.word	0x0800856b
 80069e0:	0800857c 	.word	0x0800857c

080069e4 <__hi0bits>:
 80069e4:	0c02      	lsrs	r2, r0, #16
 80069e6:	0412      	lsls	r2, r2, #16
 80069e8:	4603      	mov	r3, r0
 80069ea:	b9ca      	cbnz	r2, 8006a20 <__hi0bits+0x3c>
 80069ec:	0403      	lsls	r3, r0, #16
 80069ee:	2010      	movs	r0, #16
 80069f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069f4:	bf04      	itt	eq
 80069f6:	021b      	lsleq	r3, r3, #8
 80069f8:	3008      	addeq	r0, #8
 80069fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80069fe:	bf04      	itt	eq
 8006a00:	011b      	lsleq	r3, r3, #4
 8006a02:	3004      	addeq	r0, #4
 8006a04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a08:	bf04      	itt	eq
 8006a0a:	009b      	lsleq	r3, r3, #2
 8006a0c:	3002      	addeq	r0, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db05      	blt.n	8006a1e <__hi0bits+0x3a>
 8006a12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006a16:	f100 0001 	add.w	r0, r0, #1
 8006a1a:	bf08      	it	eq
 8006a1c:	2020      	moveq	r0, #32
 8006a1e:	4770      	bx	lr
 8006a20:	2000      	movs	r0, #0
 8006a22:	e7e5      	b.n	80069f0 <__hi0bits+0xc>

08006a24 <__lo0bits>:
 8006a24:	6803      	ldr	r3, [r0, #0]
 8006a26:	4602      	mov	r2, r0
 8006a28:	f013 0007 	ands.w	r0, r3, #7
 8006a2c:	d00b      	beq.n	8006a46 <__lo0bits+0x22>
 8006a2e:	07d9      	lsls	r1, r3, #31
 8006a30:	d422      	bmi.n	8006a78 <__lo0bits+0x54>
 8006a32:	0798      	lsls	r0, r3, #30
 8006a34:	bf49      	itett	mi
 8006a36:	085b      	lsrmi	r3, r3, #1
 8006a38:	089b      	lsrpl	r3, r3, #2
 8006a3a:	2001      	movmi	r0, #1
 8006a3c:	6013      	strmi	r3, [r2, #0]
 8006a3e:	bf5c      	itt	pl
 8006a40:	2002      	movpl	r0, #2
 8006a42:	6013      	strpl	r3, [r2, #0]
 8006a44:	4770      	bx	lr
 8006a46:	b299      	uxth	r1, r3
 8006a48:	b909      	cbnz	r1, 8006a4e <__lo0bits+0x2a>
 8006a4a:	2010      	movs	r0, #16
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a52:	bf04      	itt	eq
 8006a54:	0a1b      	lsreq	r3, r3, #8
 8006a56:	3008      	addeq	r0, #8
 8006a58:	0719      	lsls	r1, r3, #28
 8006a5a:	bf04      	itt	eq
 8006a5c:	091b      	lsreq	r3, r3, #4
 8006a5e:	3004      	addeq	r0, #4
 8006a60:	0799      	lsls	r1, r3, #30
 8006a62:	bf04      	itt	eq
 8006a64:	089b      	lsreq	r3, r3, #2
 8006a66:	3002      	addeq	r0, #2
 8006a68:	07d9      	lsls	r1, r3, #31
 8006a6a:	d403      	bmi.n	8006a74 <__lo0bits+0x50>
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	f100 0001 	add.w	r0, r0, #1
 8006a72:	d003      	beq.n	8006a7c <__lo0bits+0x58>
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	4770      	bx	lr
 8006a78:	2000      	movs	r0, #0
 8006a7a:	4770      	bx	lr
 8006a7c:	2020      	movs	r0, #32
 8006a7e:	4770      	bx	lr

08006a80 <__i2b>:
 8006a80:	b510      	push	{r4, lr}
 8006a82:	460c      	mov	r4, r1
 8006a84:	2101      	movs	r1, #1
 8006a86:	f7ff ff01 	bl	800688c <_Balloc>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	b928      	cbnz	r0, 8006a9a <__i2b+0x1a>
 8006a8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a92:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <__i2b+0x24>)
 8006a94:	4804      	ldr	r0, [pc, #16]	; (8006aa8 <__i2b+0x28>)
 8006a96:	f000 fb3f 	bl	8007118 <__assert_func>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	6144      	str	r4, [r0, #20]
 8006a9e:	6103      	str	r3, [r0, #16]
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	bf00      	nop
 8006aa4:	0800856b 	.word	0x0800856b
 8006aa8:	0800857c 	.word	0x0800857c

08006aac <__multiply>:
 8006aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	690a      	ldr	r2, [r1, #16]
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	bfbe      	ittt	lt
 8006abc:	460b      	movlt	r3, r1
 8006abe:	4625      	movlt	r5, r4
 8006ac0:	461c      	movlt	r4, r3
 8006ac2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ac6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006aca:	68ab      	ldr	r3, [r5, #8]
 8006acc:	6869      	ldr	r1, [r5, #4]
 8006ace:	eb0a 0709 	add.w	r7, sl, r9
 8006ad2:	42bb      	cmp	r3, r7
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	bfb8      	it	lt
 8006ad8:	3101      	addlt	r1, #1
 8006ada:	f7ff fed7 	bl	800688c <_Balloc>
 8006ade:	b930      	cbnz	r0, 8006aee <__multiply+0x42>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	f240 115d 	movw	r1, #349	; 0x15d
 8006ae6:	4b41      	ldr	r3, [pc, #260]	; (8006bec <__multiply+0x140>)
 8006ae8:	4841      	ldr	r0, [pc, #260]	; (8006bf0 <__multiply+0x144>)
 8006aea:	f000 fb15 	bl	8007118 <__assert_func>
 8006aee:	f100 0614 	add.w	r6, r0, #20
 8006af2:	4633      	mov	r3, r6
 8006af4:	2200      	movs	r2, #0
 8006af6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006afa:	4543      	cmp	r3, r8
 8006afc:	d31e      	bcc.n	8006b3c <__multiply+0x90>
 8006afe:	f105 0c14 	add.w	ip, r5, #20
 8006b02:	f104 0314 	add.w	r3, r4, #20
 8006b06:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b0a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b0e:	9202      	str	r2, [sp, #8]
 8006b10:	ebac 0205 	sub.w	r2, ip, r5
 8006b14:	3a15      	subs	r2, #21
 8006b16:	f022 0203 	bic.w	r2, r2, #3
 8006b1a:	3204      	adds	r2, #4
 8006b1c:	f105 0115 	add.w	r1, r5, #21
 8006b20:	458c      	cmp	ip, r1
 8006b22:	bf38      	it	cc
 8006b24:	2204      	movcc	r2, #4
 8006b26:	9201      	str	r2, [sp, #4]
 8006b28:	9a02      	ldr	r2, [sp, #8]
 8006b2a:	9303      	str	r3, [sp, #12]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d808      	bhi.n	8006b42 <__multiply+0x96>
 8006b30:	2f00      	cmp	r7, #0
 8006b32:	dc55      	bgt.n	8006be0 <__multiply+0x134>
 8006b34:	6107      	str	r7, [r0, #16]
 8006b36:	b005      	add	sp, #20
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	f843 2b04 	str.w	r2, [r3], #4
 8006b40:	e7db      	b.n	8006afa <__multiply+0x4e>
 8006b42:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b46:	f1ba 0f00 	cmp.w	sl, #0
 8006b4a:	d020      	beq.n	8006b8e <__multiply+0xe2>
 8006b4c:	46b1      	mov	r9, r6
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f105 0e14 	add.w	lr, r5, #20
 8006b54:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b58:	f8d9 b000 	ldr.w	fp, [r9]
 8006b5c:	b2a1      	uxth	r1, r4
 8006b5e:	fa1f fb8b 	uxth.w	fp, fp
 8006b62:	fb0a b101 	mla	r1, sl, r1, fp
 8006b66:	4411      	add	r1, r2
 8006b68:	f8d9 2000 	ldr.w	r2, [r9]
 8006b6c:	0c24      	lsrs	r4, r4, #16
 8006b6e:	0c12      	lsrs	r2, r2, #16
 8006b70:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b74:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b78:	b289      	uxth	r1, r1
 8006b7a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b7e:	45f4      	cmp	ip, lr
 8006b80:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b84:	f849 1b04 	str.w	r1, [r9], #4
 8006b88:	d8e4      	bhi.n	8006b54 <__multiply+0xa8>
 8006b8a:	9901      	ldr	r1, [sp, #4]
 8006b8c:	5072      	str	r2, [r6, r1]
 8006b8e:	9a03      	ldr	r2, [sp, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b96:	f1b9 0f00 	cmp.w	r9, #0
 8006b9a:	d01f      	beq.n	8006bdc <__multiply+0x130>
 8006b9c:	46b6      	mov	lr, r6
 8006b9e:	f04f 0a00 	mov.w	sl, #0
 8006ba2:	6834      	ldr	r4, [r6, #0]
 8006ba4:	f105 0114 	add.w	r1, r5, #20
 8006ba8:	880a      	ldrh	r2, [r1, #0]
 8006baa:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006bae:	b2a4      	uxth	r4, r4
 8006bb0:	fb09 b202 	mla	r2, r9, r2, fp
 8006bb4:	4492      	add	sl, r2
 8006bb6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006bba:	f84e 4b04 	str.w	r4, [lr], #4
 8006bbe:	f851 4b04 	ldr.w	r4, [r1], #4
 8006bc2:	f8be 2000 	ldrh.w	r2, [lr]
 8006bc6:	0c24      	lsrs	r4, r4, #16
 8006bc8:	fb09 2404 	mla	r4, r9, r4, r2
 8006bcc:	458c      	cmp	ip, r1
 8006bce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006bd2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bd6:	d8e7      	bhi.n	8006ba8 <__multiply+0xfc>
 8006bd8:	9a01      	ldr	r2, [sp, #4]
 8006bda:	50b4      	str	r4, [r6, r2]
 8006bdc:	3604      	adds	r6, #4
 8006bde:	e7a3      	b.n	8006b28 <__multiply+0x7c>
 8006be0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1a5      	bne.n	8006b34 <__multiply+0x88>
 8006be8:	3f01      	subs	r7, #1
 8006bea:	e7a1      	b.n	8006b30 <__multiply+0x84>
 8006bec:	0800856b 	.word	0x0800856b
 8006bf0:	0800857c 	.word	0x0800857c

08006bf4 <__pow5mult>:
 8006bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf8:	4615      	mov	r5, r2
 8006bfa:	f012 0203 	ands.w	r2, r2, #3
 8006bfe:	4606      	mov	r6, r0
 8006c00:	460f      	mov	r7, r1
 8006c02:	d007      	beq.n	8006c14 <__pow5mult+0x20>
 8006c04:	4c25      	ldr	r4, [pc, #148]	; (8006c9c <__pow5mult+0xa8>)
 8006c06:	3a01      	subs	r2, #1
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c0e:	f7ff fe9f 	bl	8006950 <__multadd>
 8006c12:	4607      	mov	r7, r0
 8006c14:	10ad      	asrs	r5, r5, #2
 8006c16:	d03d      	beq.n	8006c94 <__pow5mult+0xa0>
 8006c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c1a:	b97c      	cbnz	r4, 8006c3c <__pow5mult+0x48>
 8006c1c:	2010      	movs	r0, #16
 8006c1e:	f7ff fe11 	bl	8006844 <malloc>
 8006c22:	4602      	mov	r2, r0
 8006c24:	6270      	str	r0, [r6, #36]	; 0x24
 8006c26:	b928      	cbnz	r0, 8006c34 <__pow5mult+0x40>
 8006c28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c2c:	4b1c      	ldr	r3, [pc, #112]	; (8006ca0 <__pow5mult+0xac>)
 8006c2e:	481d      	ldr	r0, [pc, #116]	; (8006ca4 <__pow5mult+0xb0>)
 8006c30:	f000 fa72 	bl	8007118 <__assert_func>
 8006c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c38:	6004      	str	r4, [r0, #0]
 8006c3a:	60c4      	str	r4, [r0, #12]
 8006c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c44:	b94c      	cbnz	r4, 8006c5a <__pow5mult+0x66>
 8006c46:	f240 2171 	movw	r1, #625	; 0x271
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7ff ff18 	bl	8006a80 <__i2b>
 8006c50:	2300      	movs	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c58:	6003      	str	r3, [r0, #0]
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	07eb      	lsls	r3, r5, #31
 8006c60:	d50a      	bpl.n	8006c78 <__pow5mult+0x84>
 8006c62:	4639      	mov	r1, r7
 8006c64:	4622      	mov	r2, r4
 8006c66:	4630      	mov	r0, r6
 8006c68:	f7ff ff20 	bl	8006aac <__multiply>
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	4639      	mov	r1, r7
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff fe4b 	bl	800690c <_Bfree>
 8006c76:	4647      	mov	r7, r8
 8006c78:	106d      	asrs	r5, r5, #1
 8006c7a:	d00b      	beq.n	8006c94 <__pow5mult+0xa0>
 8006c7c:	6820      	ldr	r0, [r4, #0]
 8006c7e:	b938      	cbnz	r0, 8006c90 <__pow5mult+0x9c>
 8006c80:	4622      	mov	r2, r4
 8006c82:	4621      	mov	r1, r4
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7ff ff11 	bl	8006aac <__multiply>
 8006c8a:	6020      	str	r0, [r4, #0]
 8006c8c:	f8c0 9000 	str.w	r9, [r0]
 8006c90:	4604      	mov	r4, r0
 8006c92:	e7e4      	b.n	8006c5e <__pow5mult+0x6a>
 8006c94:	4638      	mov	r0, r7
 8006c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9a:	bf00      	nop
 8006c9c:	080086d0 	.word	0x080086d0
 8006ca0:	080084f5 	.word	0x080084f5
 8006ca4:	0800857c 	.word	0x0800857c

08006ca8 <__lshift>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	460c      	mov	r4, r1
 8006cae:	4607      	mov	r7, r0
 8006cb0:	4691      	mov	r9, r2
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	6849      	ldr	r1, [r1, #4]
 8006cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cc0:	f108 0601 	add.w	r6, r8, #1
 8006cc4:	42b3      	cmp	r3, r6
 8006cc6:	db0b      	blt.n	8006ce0 <__lshift+0x38>
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff fddf 	bl	800688c <_Balloc>
 8006cce:	4605      	mov	r5, r0
 8006cd0:	b948      	cbnz	r0, 8006ce6 <__lshift+0x3e>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cd8:	4b27      	ldr	r3, [pc, #156]	; (8006d78 <__lshift+0xd0>)
 8006cda:	4828      	ldr	r0, [pc, #160]	; (8006d7c <__lshift+0xd4>)
 8006cdc:	f000 fa1c 	bl	8007118 <__assert_func>
 8006ce0:	3101      	adds	r1, #1
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__lshift+0x1c>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f100 0114 	add.w	r1, r0, #20
 8006cec:	f100 0210 	add.w	r2, r0, #16
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	4553      	cmp	r3, sl
 8006cf4:	db33      	blt.n	8006d5e <__lshift+0xb6>
 8006cf6:	6920      	ldr	r0, [r4, #16]
 8006cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cfc:	f104 0314 	add.w	r3, r4, #20
 8006d00:	f019 091f 	ands.w	r9, r9, #31
 8006d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d0c:	d02b      	beq.n	8006d66 <__lshift+0xbe>
 8006d0e:	468a      	mov	sl, r1
 8006d10:	2200      	movs	r2, #0
 8006d12:	f1c9 0e20 	rsb	lr, r9, #32
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	fa00 f009 	lsl.w	r0, r0, r9
 8006d1c:	4302      	orrs	r2, r0
 8006d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8006d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d26:	459c      	cmp	ip, r3
 8006d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d2c:	d8f3      	bhi.n	8006d16 <__lshift+0x6e>
 8006d2e:	ebac 0304 	sub.w	r3, ip, r4
 8006d32:	3b15      	subs	r3, #21
 8006d34:	f023 0303 	bic.w	r3, r3, #3
 8006d38:	3304      	adds	r3, #4
 8006d3a:	f104 0015 	add.w	r0, r4, #21
 8006d3e:	4584      	cmp	ip, r0
 8006d40:	bf38      	it	cc
 8006d42:	2304      	movcc	r3, #4
 8006d44:	50ca      	str	r2, [r1, r3]
 8006d46:	b10a      	cbz	r2, 8006d4c <__lshift+0xa4>
 8006d48:	f108 0602 	add.w	r6, r8, #2
 8006d4c:	3e01      	subs	r6, #1
 8006d4e:	4638      	mov	r0, r7
 8006d50:	4621      	mov	r1, r4
 8006d52:	612e      	str	r6, [r5, #16]
 8006d54:	f7ff fdda 	bl	800690c <_Bfree>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d62:	3301      	adds	r3, #1
 8006d64:	e7c5      	b.n	8006cf2 <__lshift+0x4a>
 8006d66:	3904      	subs	r1, #4
 8006d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6c:	459c      	cmp	ip, r3
 8006d6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d72:	d8f9      	bhi.n	8006d68 <__lshift+0xc0>
 8006d74:	e7ea      	b.n	8006d4c <__lshift+0xa4>
 8006d76:	bf00      	nop
 8006d78:	0800856b 	.word	0x0800856b
 8006d7c:	0800857c 	.word	0x0800857c

08006d80 <__mcmp>:
 8006d80:	4603      	mov	r3, r0
 8006d82:	690a      	ldr	r2, [r1, #16]
 8006d84:	6900      	ldr	r0, [r0, #16]
 8006d86:	b530      	push	{r4, r5, lr}
 8006d88:	1a80      	subs	r0, r0, r2
 8006d8a:	d10d      	bne.n	8006da8 <__mcmp+0x28>
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	3114      	adds	r1, #20
 8006d90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006da0:	4295      	cmp	r5, r2
 8006da2:	d002      	beq.n	8006daa <__mcmp+0x2a>
 8006da4:	d304      	bcc.n	8006db0 <__mcmp+0x30>
 8006da6:	2001      	movs	r0, #1
 8006da8:	bd30      	pop	{r4, r5, pc}
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	d3f4      	bcc.n	8006d98 <__mcmp+0x18>
 8006dae:	e7fb      	b.n	8006da8 <__mcmp+0x28>
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	e7f8      	b.n	8006da8 <__mcmp+0x28>
	...

08006db8 <__mdiff>:
 8006db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4692      	mov	sl, r2
 8006dc6:	f7ff ffdb 	bl	8006d80 <__mcmp>
 8006dca:	1e05      	subs	r5, r0, #0
 8006dcc:	d111      	bne.n	8006df2 <__mdiff+0x3a>
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7ff fd5b 	bl	800688c <_Balloc>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	b928      	cbnz	r0, 8006de6 <__mdiff+0x2e>
 8006dda:	f240 2132 	movw	r1, #562	; 0x232
 8006dde:	4b3c      	ldr	r3, [pc, #240]	; (8006ed0 <__mdiff+0x118>)
 8006de0:	483c      	ldr	r0, [pc, #240]	; (8006ed4 <__mdiff+0x11c>)
 8006de2:	f000 f999 	bl	8007118 <__assert_func>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dec:	4610      	mov	r0, r2
 8006dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df2:	bfa4      	itt	ge
 8006df4:	4653      	movge	r3, sl
 8006df6:	46a2      	movge	sl, r4
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006dfe:	bfa6      	itte	ge
 8006e00:	461c      	movge	r4, r3
 8006e02:	2500      	movge	r5, #0
 8006e04:	2501      	movlt	r5, #1
 8006e06:	f7ff fd41 	bl	800688c <_Balloc>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	b918      	cbnz	r0, 8006e16 <__mdiff+0x5e>
 8006e0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e12:	4b2f      	ldr	r3, [pc, #188]	; (8006ed0 <__mdiff+0x118>)
 8006e14:	e7e4      	b.n	8006de0 <__mdiff+0x28>
 8006e16:	f100 0814 	add.w	r8, r0, #20
 8006e1a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006e1e:	60c5      	str	r5, [r0, #12]
 8006e20:	f04f 0c00 	mov.w	ip, #0
 8006e24:	f10a 0514 	add.w	r5, sl, #20
 8006e28:	f10a 0010 	add.w	r0, sl, #16
 8006e2c:	46c2      	mov	sl, r8
 8006e2e:	6926      	ldr	r6, [r4, #16]
 8006e30:	f104 0914 	add.w	r9, r4, #20
 8006e34:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006e38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e3c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e44:	fa1f f18b 	uxth.w	r1, fp
 8006e48:	4461      	add	r1, ip
 8006e4a:	fa1f fc83 	uxth.w	ip, r3
 8006e4e:	0c1b      	lsrs	r3, r3, #16
 8006e50:	eba1 010c 	sub.w	r1, r1, ip
 8006e54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e5c:	b289      	uxth	r1, r1
 8006e5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e62:	454e      	cmp	r6, r9
 8006e64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e68:	f84a 3b04 	str.w	r3, [sl], #4
 8006e6c:	d8e6      	bhi.n	8006e3c <__mdiff+0x84>
 8006e6e:	1b33      	subs	r3, r6, r4
 8006e70:	3b15      	subs	r3, #21
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	3415      	adds	r4, #21
 8006e78:	3304      	adds	r3, #4
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	bf38      	it	cc
 8006e7e:	2304      	movcc	r3, #4
 8006e80:	441d      	add	r5, r3
 8006e82:	4443      	add	r3, r8
 8006e84:	461e      	mov	r6, r3
 8006e86:	462c      	mov	r4, r5
 8006e88:	4574      	cmp	r4, lr
 8006e8a:	d30e      	bcc.n	8006eaa <__mdiff+0xf2>
 8006e8c:	f10e 0103 	add.w	r1, lr, #3
 8006e90:	1b49      	subs	r1, r1, r5
 8006e92:	f021 0103 	bic.w	r1, r1, #3
 8006e96:	3d03      	subs	r5, #3
 8006e98:	45ae      	cmp	lr, r5
 8006e9a:	bf38      	it	cc
 8006e9c:	2100      	movcc	r1, #0
 8006e9e:	4419      	add	r1, r3
 8006ea0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ea4:	b18b      	cbz	r3, 8006eca <__mdiff+0x112>
 8006ea6:	6117      	str	r7, [r2, #16]
 8006ea8:	e7a0      	b.n	8006dec <__mdiff+0x34>
 8006eaa:	f854 8b04 	ldr.w	r8, [r4], #4
 8006eae:	fa1f f188 	uxth.w	r1, r8
 8006eb2:	4461      	add	r1, ip
 8006eb4:	1408      	asrs	r0, r1, #16
 8006eb6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006eba:	b289      	uxth	r1, r1
 8006ebc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ec4:	f846 1b04 	str.w	r1, [r6], #4
 8006ec8:	e7de      	b.n	8006e88 <__mdiff+0xd0>
 8006eca:	3f01      	subs	r7, #1
 8006ecc:	e7e8      	b.n	8006ea0 <__mdiff+0xe8>
 8006ece:	bf00      	nop
 8006ed0:	0800856b 	.word	0x0800856b
 8006ed4:	0800857c 	.word	0x0800857c

08006ed8 <__d2b>:
 8006ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006edc:	2101      	movs	r1, #1
 8006ede:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006ee2:	4690      	mov	r8, r2
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	f7ff fcd1 	bl	800688c <_Balloc>
 8006eea:	4604      	mov	r4, r0
 8006eec:	b930      	cbnz	r0, 8006efc <__d2b+0x24>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	f240 310a 	movw	r1, #778	; 0x30a
 8006ef4:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <__d2b+0xb0>)
 8006ef6:	4825      	ldr	r0, [pc, #148]	; (8006f8c <__d2b+0xb4>)
 8006ef8:	f000 f90e 	bl	8007118 <__assert_func>
 8006efc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006f00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006f04:	bb2d      	cbnz	r5, 8006f52 <__d2b+0x7a>
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f1b8 0300 	subs.w	r3, r8, #0
 8006f0c:	d026      	beq.n	8006f5c <__d2b+0x84>
 8006f0e:	4668      	mov	r0, sp
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	f7ff fd87 	bl	8006a24 <__lo0bits>
 8006f16:	9900      	ldr	r1, [sp, #0]
 8006f18:	b1f0      	cbz	r0, 8006f58 <__d2b+0x80>
 8006f1a:	9a01      	ldr	r2, [sp, #4]
 8006f1c:	f1c0 0320 	rsb	r3, r0, #32
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	430b      	orrs	r3, r1
 8006f26:	40c2      	lsrs	r2, r0
 8006f28:	6163      	str	r3, [r4, #20]
 8006f2a:	9201      	str	r2, [sp, #4]
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2102      	movne	r1, #2
 8006f34:	2101      	moveq	r1, #1
 8006f36:	61a3      	str	r3, [r4, #24]
 8006f38:	6121      	str	r1, [r4, #16]
 8006f3a:	b1c5      	cbz	r5, 8006f6e <__d2b+0x96>
 8006f3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f40:	4405      	add	r5, r0
 8006f42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f46:	603d      	str	r5, [r7, #0]
 8006f48:	6030      	str	r0, [r6, #0]
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	b002      	add	sp, #8
 8006f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f56:	e7d6      	b.n	8006f06 <__d2b+0x2e>
 8006f58:	6161      	str	r1, [r4, #20]
 8006f5a:	e7e7      	b.n	8006f2c <__d2b+0x54>
 8006f5c:	a801      	add	r0, sp, #4
 8006f5e:	f7ff fd61 	bl	8006a24 <__lo0bits>
 8006f62:	2101      	movs	r1, #1
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	6121      	str	r1, [r4, #16]
 8006f68:	6163      	str	r3, [r4, #20]
 8006f6a:	3020      	adds	r0, #32
 8006f6c:	e7e5      	b.n	8006f3a <__d2b+0x62>
 8006f6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006f72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f76:	6038      	str	r0, [r7, #0]
 8006f78:	6918      	ldr	r0, [r3, #16]
 8006f7a:	f7ff fd33 	bl	80069e4 <__hi0bits>
 8006f7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006f82:	6031      	str	r1, [r6, #0]
 8006f84:	e7e1      	b.n	8006f4a <__d2b+0x72>
 8006f86:	bf00      	nop
 8006f88:	0800856b 	.word	0x0800856b
 8006f8c:	0800857c 	.word	0x0800857c

08006f90 <_calloc_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	fb02 f501 	mul.w	r5, r2, r1
 8006f96:	4629      	mov	r1, r5
 8006f98:	f000 f854 	bl	8007044 <_malloc_r>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	b118      	cbz	r0, 8006fa8 <_calloc_r+0x18>
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	f7fe f964 	bl	8005270 <memset>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	bd38      	pop	{r3, r4, r5, pc}

08006fac <_free_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4605      	mov	r5, r0
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d043      	beq.n	800703c <_free_r+0x90>
 8006fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb8:	1f0c      	subs	r4, r1, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bfb8      	it	lt
 8006fbe:	18e4      	addlt	r4, r4, r3
 8006fc0:	f000 f8ec 	bl	800719c <__malloc_lock>
 8006fc4:	4a1e      	ldr	r2, [pc, #120]	; (8007040 <_free_r+0x94>)
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	4610      	mov	r0, r2
 8006fca:	b933      	cbnz	r3, 8006fda <_free_r+0x2e>
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	6014      	str	r4, [r2, #0]
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd6:	f000 b8e7 	b.w	80071a8 <__malloc_unlock>
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	d90a      	bls.n	8006ff4 <_free_r+0x48>
 8006fde:	6821      	ldr	r1, [r4, #0]
 8006fe0:	1862      	adds	r2, r4, r1
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	bf01      	itttt	eq
 8006fe6:	681a      	ldreq	r2, [r3, #0]
 8006fe8:	685b      	ldreq	r3, [r3, #4]
 8006fea:	1852      	addeq	r2, r2, r1
 8006fec:	6022      	streq	r2, [r4, #0]
 8006fee:	6063      	str	r3, [r4, #4]
 8006ff0:	6004      	str	r4, [r0, #0]
 8006ff2:	e7ed      	b.n	8006fd0 <_free_r+0x24>
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	b10b      	cbz	r3, 8006ffe <_free_r+0x52>
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	d9fa      	bls.n	8006ff4 <_free_r+0x48>
 8006ffe:	6811      	ldr	r1, [r2, #0]
 8007000:	1850      	adds	r0, r2, r1
 8007002:	42a0      	cmp	r0, r4
 8007004:	d10b      	bne.n	800701e <_free_r+0x72>
 8007006:	6820      	ldr	r0, [r4, #0]
 8007008:	4401      	add	r1, r0
 800700a:	1850      	adds	r0, r2, r1
 800700c:	4283      	cmp	r3, r0
 800700e:	6011      	str	r1, [r2, #0]
 8007010:	d1de      	bne.n	8006fd0 <_free_r+0x24>
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	4401      	add	r1, r0
 8007018:	6011      	str	r1, [r2, #0]
 800701a:	6053      	str	r3, [r2, #4]
 800701c:	e7d8      	b.n	8006fd0 <_free_r+0x24>
 800701e:	d902      	bls.n	8007026 <_free_r+0x7a>
 8007020:	230c      	movs	r3, #12
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	e7d4      	b.n	8006fd0 <_free_r+0x24>
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	1821      	adds	r1, r4, r0
 800702a:	428b      	cmp	r3, r1
 800702c:	bf01      	itttt	eq
 800702e:	6819      	ldreq	r1, [r3, #0]
 8007030:	685b      	ldreq	r3, [r3, #4]
 8007032:	1809      	addeq	r1, r1, r0
 8007034:	6021      	streq	r1, [r4, #0]
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	6054      	str	r4, [r2, #4]
 800703a:	e7c9      	b.n	8006fd0 <_free_r+0x24>
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	bf00      	nop
 8007040:	200005b4 	.word	0x200005b4

08007044 <_malloc_r>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	1ccd      	adds	r5, r1, #3
 8007048:	f025 0503 	bic.w	r5, r5, #3
 800704c:	3508      	adds	r5, #8
 800704e:	2d0c      	cmp	r5, #12
 8007050:	bf38      	it	cc
 8007052:	250c      	movcc	r5, #12
 8007054:	2d00      	cmp	r5, #0
 8007056:	4606      	mov	r6, r0
 8007058:	db01      	blt.n	800705e <_malloc_r+0x1a>
 800705a:	42a9      	cmp	r1, r5
 800705c:	d903      	bls.n	8007066 <_malloc_r+0x22>
 800705e:	230c      	movs	r3, #12
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	2000      	movs	r0, #0
 8007064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007066:	f000 f899 	bl	800719c <__malloc_lock>
 800706a:	4921      	ldr	r1, [pc, #132]	; (80070f0 <_malloc_r+0xac>)
 800706c:	680a      	ldr	r2, [r1, #0]
 800706e:	4614      	mov	r4, r2
 8007070:	b99c      	cbnz	r4, 800709a <_malloc_r+0x56>
 8007072:	4f20      	ldr	r7, [pc, #128]	; (80070f4 <_malloc_r+0xb0>)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	b923      	cbnz	r3, 8007082 <_malloc_r+0x3e>
 8007078:	4621      	mov	r1, r4
 800707a:	4630      	mov	r0, r6
 800707c:	f000 f83c 	bl	80070f8 <_sbrk_r>
 8007080:	6038      	str	r0, [r7, #0]
 8007082:	4629      	mov	r1, r5
 8007084:	4630      	mov	r0, r6
 8007086:	f000 f837 	bl	80070f8 <_sbrk_r>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	d123      	bne.n	80070d6 <_malloc_r+0x92>
 800708e:	230c      	movs	r3, #12
 8007090:	4630      	mov	r0, r6
 8007092:	6033      	str	r3, [r6, #0]
 8007094:	f000 f888 	bl	80071a8 <__malloc_unlock>
 8007098:	e7e3      	b.n	8007062 <_malloc_r+0x1e>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	1b5b      	subs	r3, r3, r5
 800709e:	d417      	bmi.n	80070d0 <_malloc_r+0x8c>
 80070a0:	2b0b      	cmp	r3, #11
 80070a2:	d903      	bls.n	80070ac <_malloc_r+0x68>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	441c      	add	r4, r3
 80070a8:	6025      	str	r5, [r4, #0]
 80070aa:	e004      	b.n	80070b6 <_malloc_r+0x72>
 80070ac:	6863      	ldr	r3, [r4, #4]
 80070ae:	42a2      	cmp	r2, r4
 80070b0:	bf0c      	ite	eq
 80070b2:	600b      	streq	r3, [r1, #0]
 80070b4:	6053      	strne	r3, [r2, #4]
 80070b6:	4630      	mov	r0, r6
 80070b8:	f000 f876 	bl	80071a8 <__malloc_unlock>
 80070bc:	f104 000b 	add.w	r0, r4, #11
 80070c0:	1d23      	adds	r3, r4, #4
 80070c2:	f020 0007 	bic.w	r0, r0, #7
 80070c6:	1ac2      	subs	r2, r0, r3
 80070c8:	d0cc      	beq.n	8007064 <_malloc_r+0x20>
 80070ca:	1a1b      	subs	r3, r3, r0
 80070cc:	50a3      	str	r3, [r4, r2]
 80070ce:	e7c9      	b.n	8007064 <_malloc_r+0x20>
 80070d0:	4622      	mov	r2, r4
 80070d2:	6864      	ldr	r4, [r4, #4]
 80070d4:	e7cc      	b.n	8007070 <_malloc_r+0x2c>
 80070d6:	1cc4      	adds	r4, r0, #3
 80070d8:	f024 0403 	bic.w	r4, r4, #3
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d0e3      	beq.n	80070a8 <_malloc_r+0x64>
 80070e0:	1a21      	subs	r1, r4, r0
 80070e2:	4630      	mov	r0, r6
 80070e4:	f000 f808 	bl	80070f8 <_sbrk_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d1dd      	bne.n	80070a8 <_malloc_r+0x64>
 80070ec:	e7cf      	b.n	800708e <_malloc_r+0x4a>
 80070ee:	bf00      	nop
 80070f0:	200005b4 	.word	0x200005b4
 80070f4:	200005b8 	.word	0x200005b8

080070f8 <_sbrk_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	2300      	movs	r3, #0
 80070fc:	4d05      	ldr	r5, [pc, #20]	; (8007114 <_sbrk_r+0x1c>)
 80070fe:	4604      	mov	r4, r0
 8007100:	4608      	mov	r0, r1
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	f7fb f9b0 	bl	8002468 <_sbrk>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_sbrk_r+0x1a>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_sbrk_r+0x1a>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20001708 	.word	0x20001708

08007118 <__assert_func>:
 8007118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800711a:	4614      	mov	r4, r2
 800711c:	461a      	mov	r2, r3
 800711e:	4b09      	ldr	r3, [pc, #36]	; (8007144 <__assert_func+0x2c>)
 8007120:	4605      	mov	r5, r0
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68d8      	ldr	r0, [r3, #12]
 8007126:	b14c      	cbz	r4, 800713c <__assert_func+0x24>
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <__assert_func+0x30>)
 800712a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800712e:	9100      	str	r1, [sp, #0]
 8007130:	462b      	mov	r3, r5
 8007132:	4906      	ldr	r1, [pc, #24]	; (800714c <__assert_func+0x34>)
 8007134:	f000 f80e 	bl	8007154 <fiprintf>
 8007138:	f000 fa62 	bl	8007600 <abort>
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <__assert_func+0x38>)
 800713e:	461c      	mov	r4, r3
 8007140:	e7f3      	b.n	800712a <__assert_func+0x12>
 8007142:	bf00      	nop
 8007144:	20000310 	.word	0x20000310
 8007148:	080086dc 	.word	0x080086dc
 800714c:	080086e9 	.word	0x080086e9
 8007150:	08008717 	.word	0x08008717

08007154 <fiprintf>:
 8007154:	b40e      	push	{r1, r2, r3}
 8007156:	b503      	push	{r0, r1, lr}
 8007158:	4601      	mov	r1, r0
 800715a:	ab03      	add	r3, sp, #12
 800715c:	4805      	ldr	r0, [pc, #20]	; (8007174 <fiprintf+0x20>)
 800715e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007162:	6800      	ldr	r0, [r0, #0]
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	f000 f84d 	bl	8007204 <_vfiprintf_r>
 800716a:	b002      	add	sp, #8
 800716c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007170:	b003      	add	sp, #12
 8007172:	4770      	bx	lr
 8007174:	20000310 	.word	0x20000310

08007178 <__ascii_mbtowc>:
 8007178:	b082      	sub	sp, #8
 800717a:	b901      	cbnz	r1, 800717e <__ascii_mbtowc+0x6>
 800717c:	a901      	add	r1, sp, #4
 800717e:	b142      	cbz	r2, 8007192 <__ascii_mbtowc+0x1a>
 8007180:	b14b      	cbz	r3, 8007196 <__ascii_mbtowc+0x1e>
 8007182:	7813      	ldrb	r3, [r2, #0]
 8007184:	600b      	str	r3, [r1, #0]
 8007186:	7812      	ldrb	r2, [r2, #0]
 8007188:	1e10      	subs	r0, r2, #0
 800718a:	bf18      	it	ne
 800718c:	2001      	movne	r0, #1
 800718e:	b002      	add	sp, #8
 8007190:	4770      	bx	lr
 8007192:	4610      	mov	r0, r2
 8007194:	e7fb      	b.n	800718e <__ascii_mbtowc+0x16>
 8007196:	f06f 0001 	mvn.w	r0, #1
 800719a:	e7f8      	b.n	800718e <__ascii_mbtowc+0x16>

0800719c <__malloc_lock>:
 800719c:	4801      	ldr	r0, [pc, #4]	; (80071a4 <__malloc_lock+0x8>)
 800719e:	f000 bbef 	b.w	8007980 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	20001710 	.word	0x20001710

080071a8 <__malloc_unlock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__malloc_unlock+0x8>)
 80071aa:	f000 bbea 	b.w	8007982 <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	20001710 	.word	0x20001710

080071b4 <__sfputc_r>:
 80071b4:	6893      	ldr	r3, [r2, #8]
 80071b6:	b410      	push	{r4}
 80071b8:	3b01      	subs	r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	6093      	str	r3, [r2, #8]
 80071be:	da07      	bge.n	80071d0 <__sfputc_r+0x1c>
 80071c0:	6994      	ldr	r4, [r2, #24]
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	db01      	blt.n	80071ca <__sfputc_r+0x16>
 80071c6:	290a      	cmp	r1, #10
 80071c8:	d102      	bne.n	80071d0 <__sfputc_r+0x1c>
 80071ca:	bc10      	pop	{r4}
 80071cc:	f000 b94a 	b.w	8007464 <__swbuf_r>
 80071d0:	6813      	ldr	r3, [r2, #0]
 80071d2:	1c58      	adds	r0, r3, #1
 80071d4:	6010      	str	r0, [r2, #0]
 80071d6:	7019      	strb	r1, [r3, #0]
 80071d8:	4608      	mov	r0, r1
 80071da:	bc10      	pop	{r4}
 80071dc:	4770      	bx	lr

080071de <__sfputs_r>:
 80071de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e0:	4606      	mov	r6, r0
 80071e2:	460f      	mov	r7, r1
 80071e4:	4614      	mov	r4, r2
 80071e6:	18d5      	adds	r5, r2, r3
 80071e8:	42ac      	cmp	r4, r5
 80071ea:	d101      	bne.n	80071f0 <__sfputs_r+0x12>
 80071ec:	2000      	movs	r0, #0
 80071ee:	e007      	b.n	8007200 <__sfputs_r+0x22>
 80071f0:	463a      	mov	r2, r7
 80071f2:	4630      	mov	r0, r6
 80071f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f8:	f7ff ffdc 	bl	80071b4 <__sfputc_r>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d1f3      	bne.n	80071e8 <__sfputs_r+0xa>
 8007200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007204 <_vfiprintf_r>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	460d      	mov	r5, r1
 800720a:	4614      	mov	r4, r2
 800720c:	4698      	mov	r8, r3
 800720e:	4606      	mov	r6, r0
 8007210:	b09d      	sub	sp, #116	; 0x74
 8007212:	b118      	cbz	r0, 800721c <_vfiprintf_r+0x18>
 8007214:	6983      	ldr	r3, [r0, #24]
 8007216:	b90b      	cbnz	r3, 800721c <_vfiprintf_r+0x18>
 8007218:	f000 fb14 	bl	8007844 <__sinit>
 800721c:	4b89      	ldr	r3, [pc, #548]	; (8007444 <_vfiprintf_r+0x240>)
 800721e:	429d      	cmp	r5, r3
 8007220:	d11b      	bne.n	800725a <_vfiprintf_r+0x56>
 8007222:	6875      	ldr	r5, [r6, #4]
 8007224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007226:	07d9      	lsls	r1, r3, #31
 8007228:	d405      	bmi.n	8007236 <_vfiprintf_r+0x32>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	059a      	lsls	r2, r3, #22
 800722e:	d402      	bmi.n	8007236 <_vfiprintf_r+0x32>
 8007230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007232:	f000 fba5 	bl	8007980 <__retarget_lock_acquire_recursive>
 8007236:	89ab      	ldrh	r3, [r5, #12]
 8007238:	071b      	lsls	r3, r3, #28
 800723a:	d501      	bpl.n	8007240 <_vfiprintf_r+0x3c>
 800723c:	692b      	ldr	r3, [r5, #16]
 800723e:	b9eb      	cbnz	r3, 800727c <_vfiprintf_r+0x78>
 8007240:	4629      	mov	r1, r5
 8007242:	4630      	mov	r0, r6
 8007244:	f000 f96e 	bl	8007524 <__swsetup_r>
 8007248:	b1c0      	cbz	r0, 800727c <_vfiprintf_r+0x78>
 800724a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800724c:	07dc      	lsls	r4, r3, #31
 800724e:	d50e      	bpl.n	800726e <_vfiprintf_r+0x6a>
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	b01d      	add	sp, #116	; 0x74
 8007256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725a:	4b7b      	ldr	r3, [pc, #492]	; (8007448 <_vfiprintf_r+0x244>)
 800725c:	429d      	cmp	r5, r3
 800725e:	d101      	bne.n	8007264 <_vfiprintf_r+0x60>
 8007260:	68b5      	ldr	r5, [r6, #8]
 8007262:	e7df      	b.n	8007224 <_vfiprintf_r+0x20>
 8007264:	4b79      	ldr	r3, [pc, #484]	; (800744c <_vfiprintf_r+0x248>)
 8007266:	429d      	cmp	r5, r3
 8007268:	bf08      	it	eq
 800726a:	68f5      	ldreq	r5, [r6, #12]
 800726c:	e7da      	b.n	8007224 <_vfiprintf_r+0x20>
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	0598      	lsls	r0, r3, #22
 8007272:	d4ed      	bmi.n	8007250 <_vfiprintf_r+0x4c>
 8007274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007276:	f000 fb84 	bl	8007982 <__retarget_lock_release_recursive>
 800727a:	e7e9      	b.n	8007250 <_vfiprintf_r+0x4c>
 800727c:	2300      	movs	r3, #0
 800727e:	9309      	str	r3, [sp, #36]	; 0x24
 8007280:	2320      	movs	r3, #32
 8007282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007286:	2330      	movs	r3, #48	; 0x30
 8007288:	f04f 0901 	mov.w	r9, #1
 800728c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007290:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007450 <_vfiprintf_r+0x24c>
 8007294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007298:	4623      	mov	r3, r4
 800729a:	469a      	mov	sl, r3
 800729c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072a0:	b10a      	cbz	r2, 80072a6 <_vfiprintf_r+0xa2>
 80072a2:	2a25      	cmp	r2, #37	; 0x25
 80072a4:	d1f9      	bne.n	800729a <_vfiprintf_r+0x96>
 80072a6:	ebba 0b04 	subs.w	fp, sl, r4
 80072aa:	d00b      	beq.n	80072c4 <_vfiprintf_r+0xc0>
 80072ac:	465b      	mov	r3, fp
 80072ae:	4622      	mov	r2, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ff93 	bl	80071de <__sfputs_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	f000 80aa 	beq.w	8007412 <_vfiprintf_r+0x20e>
 80072be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c0:	445a      	add	r2, fp
 80072c2:	9209      	str	r2, [sp, #36]	; 0x24
 80072c4:	f89a 3000 	ldrb.w	r3, [sl]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80a2 	beq.w	8007412 <_vfiprintf_r+0x20e>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f04f 32ff 	mov.w	r2, #4294967295
 80072d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d8:	f10a 0a01 	add.w	sl, sl, #1
 80072dc:	9304      	str	r3, [sp, #16]
 80072de:	9307      	str	r3, [sp, #28]
 80072e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072e4:	931a      	str	r3, [sp, #104]	; 0x68
 80072e6:	4654      	mov	r4, sl
 80072e8:	2205      	movs	r2, #5
 80072ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ee:	4858      	ldr	r0, [pc, #352]	; (8007450 <_vfiprintf_r+0x24c>)
 80072f0:	f7ff fab0 	bl	8006854 <memchr>
 80072f4:	9a04      	ldr	r2, [sp, #16]
 80072f6:	b9d8      	cbnz	r0, 8007330 <_vfiprintf_r+0x12c>
 80072f8:	06d1      	lsls	r1, r2, #27
 80072fa:	bf44      	itt	mi
 80072fc:	2320      	movmi	r3, #32
 80072fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007302:	0713      	lsls	r3, r2, #28
 8007304:	bf44      	itt	mi
 8007306:	232b      	movmi	r3, #43	; 0x2b
 8007308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800730c:	f89a 3000 	ldrb.w	r3, [sl]
 8007310:	2b2a      	cmp	r3, #42	; 0x2a
 8007312:	d015      	beq.n	8007340 <_vfiprintf_r+0x13c>
 8007314:	4654      	mov	r4, sl
 8007316:	2000      	movs	r0, #0
 8007318:	f04f 0c0a 	mov.w	ip, #10
 800731c:	9a07      	ldr	r2, [sp, #28]
 800731e:	4621      	mov	r1, r4
 8007320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007324:	3b30      	subs	r3, #48	; 0x30
 8007326:	2b09      	cmp	r3, #9
 8007328:	d94e      	bls.n	80073c8 <_vfiprintf_r+0x1c4>
 800732a:	b1b0      	cbz	r0, 800735a <_vfiprintf_r+0x156>
 800732c:	9207      	str	r2, [sp, #28]
 800732e:	e014      	b.n	800735a <_vfiprintf_r+0x156>
 8007330:	eba0 0308 	sub.w	r3, r0, r8
 8007334:	fa09 f303 	lsl.w	r3, r9, r3
 8007338:	4313      	orrs	r3, r2
 800733a:	46a2      	mov	sl, r4
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	e7d2      	b.n	80072e6 <_vfiprintf_r+0xe2>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d19      	adds	r1, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9103      	str	r1, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfbb      	ittet	lt
 800734c:	425b      	neglt	r3, r3
 800734e:	f042 0202 	orrlt.w	r2, r2, #2
 8007352:	9307      	strge	r3, [sp, #28]
 8007354:	9307      	strlt	r3, [sp, #28]
 8007356:	bfb8      	it	lt
 8007358:	9204      	strlt	r2, [sp, #16]
 800735a:	7823      	ldrb	r3, [r4, #0]
 800735c:	2b2e      	cmp	r3, #46	; 0x2e
 800735e:	d10c      	bne.n	800737a <_vfiprintf_r+0x176>
 8007360:	7863      	ldrb	r3, [r4, #1]
 8007362:	2b2a      	cmp	r3, #42	; 0x2a
 8007364:	d135      	bne.n	80073d2 <_vfiprintf_r+0x1ce>
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	3402      	adds	r4, #2
 800736a:	1d1a      	adds	r2, r3, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	9203      	str	r2, [sp, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	bfb8      	it	lt
 8007374:	f04f 33ff 	movlt.w	r3, #4294967295
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007460 <_vfiprintf_r+0x25c>
 800737e:	2203      	movs	r2, #3
 8007380:	4650      	mov	r0, sl
 8007382:	7821      	ldrb	r1, [r4, #0]
 8007384:	f7ff fa66 	bl	8006854 <memchr>
 8007388:	b140      	cbz	r0, 800739c <_vfiprintf_r+0x198>
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	eba0 000a 	sub.w	r0, r0, sl
 8007390:	fa03 f000 	lsl.w	r0, r3, r0
 8007394:	9b04      	ldr	r3, [sp, #16]
 8007396:	3401      	adds	r4, #1
 8007398:	4303      	orrs	r3, r0
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a0:	2206      	movs	r2, #6
 80073a2:	482c      	ldr	r0, [pc, #176]	; (8007454 <_vfiprintf_r+0x250>)
 80073a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073a8:	f7ff fa54 	bl	8006854 <memchr>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d03f      	beq.n	8007430 <_vfiprintf_r+0x22c>
 80073b0:	4b29      	ldr	r3, [pc, #164]	; (8007458 <_vfiprintf_r+0x254>)
 80073b2:	bb1b      	cbnz	r3, 80073fc <_vfiprintf_r+0x1f8>
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	3307      	adds	r3, #7
 80073b8:	f023 0307 	bic.w	r3, r3, #7
 80073bc:	3308      	adds	r3, #8
 80073be:	9303      	str	r3, [sp, #12]
 80073c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c2:	443b      	add	r3, r7
 80073c4:	9309      	str	r3, [sp, #36]	; 0x24
 80073c6:	e767      	b.n	8007298 <_vfiprintf_r+0x94>
 80073c8:	460c      	mov	r4, r1
 80073ca:	2001      	movs	r0, #1
 80073cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d0:	e7a5      	b.n	800731e <_vfiprintf_r+0x11a>
 80073d2:	2300      	movs	r3, #0
 80073d4:	f04f 0c0a 	mov.w	ip, #10
 80073d8:	4619      	mov	r1, r3
 80073da:	3401      	adds	r4, #1
 80073dc:	9305      	str	r3, [sp, #20]
 80073de:	4620      	mov	r0, r4
 80073e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e4:	3a30      	subs	r2, #48	; 0x30
 80073e6:	2a09      	cmp	r2, #9
 80073e8:	d903      	bls.n	80073f2 <_vfiprintf_r+0x1ee>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0c5      	beq.n	800737a <_vfiprintf_r+0x176>
 80073ee:	9105      	str	r1, [sp, #20]
 80073f0:	e7c3      	b.n	800737a <_vfiprintf_r+0x176>
 80073f2:	4604      	mov	r4, r0
 80073f4:	2301      	movs	r3, #1
 80073f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073fa:	e7f0      	b.n	80073de <_vfiprintf_r+0x1da>
 80073fc:	ab03      	add	r3, sp, #12
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	462a      	mov	r2, r5
 8007402:	4630      	mov	r0, r6
 8007404:	4b15      	ldr	r3, [pc, #84]	; (800745c <_vfiprintf_r+0x258>)
 8007406:	a904      	add	r1, sp, #16
 8007408:	f7fd ffd8 	bl	80053bc <_printf_float>
 800740c:	4607      	mov	r7, r0
 800740e:	1c78      	adds	r0, r7, #1
 8007410:	d1d6      	bne.n	80073c0 <_vfiprintf_r+0x1bc>
 8007412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007414:	07d9      	lsls	r1, r3, #31
 8007416:	d405      	bmi.n	8007424 <_vfiprintf_r+0x220>
 8007418:	89ab      	ldrh	r3, [r5, #12]
 800741a:	059a      	lsls	r2, r3, #22
 800741c:	d402      	bmi.n	8007424 <_vfiprintf_r+0x220>
 800741e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007420:	f000 faaf 	bl	8007982 <__retarget_lock_release_recursive>
 8007424:	89ab      	ldrh	r3, [r5, #12]
 8007426:	065b      	lsls	r3, r3, #25
 8007428:	f53f af12 	bmi.w	8007250 <_vfiprintf_r+0x4c>
 800742c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800742e:	e711      	b.n	8007254 <_vfiprintf_r+0x50>
 8007430:	ab03      	add	r3, sp, #12
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	462a      	mov	r2, r5
 8007436:	4630      	mov	r0, r6
 8007438:	4b08      	ldr	r3, [pc, #32]	; (800745c <_vfiprintf_r+0x258>)
 800743a:	a904      	add	r1, sp, #16
 800743c:	f7fe fa5a 	bl	80058f4 <_printf_i>
 8007440:	e7e4      	b.n	800740c <_vfiprintf_r+0x208>
 8007442:	bf00      	nop
 8007444:	08008854 	.word	0x08008854
 8007448:	08008874 	.word	0x08008874
 800744c:	08008834 	.word	0x08008834
 8007450:	08008722 	.word	0x08008722
 8007454:	0800872c 	.word	0x0800872c
 8007458:	080053bd 	.word	0x080053bd
 800745c:	080071df 	.word	0x080071df
 8007460:	08008728 	.word	0x08008728

08007464 <__swbuf_r>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	460e      	mov	r6, r1
 8007468:	4614      	mov	r4, r2
 800746a:	4605      	mov	r5, r0
 800746c:	b118      	cbz	r0, 8007476 <__swbuf_r+0x12>
 800746e:	6983      	ldr	r3, [r0, #24]
 8007470:	b90b      	cbnz	r3, 8007476 <__swbuf_r+0x12>
 8007472:	f000 f9e7 	bl	8007844 <__sinit>
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <__swbuf_r+0x98>)
 8007478:	429c      	cmp	r4, r3
 800747a:	d12b      	bne.n	80074d4 <__swbuf_r+0x70>
 800747c:	686c      	ldr	r4, [r5, #4]
 800747e:	69a3      	ldr	r3, [r4, #24]
 8007480:	60a3      	str	r3, [r4, #8]
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	071a      	lsls	r2, r3, #28
 8007486:	d52f      	bpl.n	80074e8 <__swbuf_r+0x84>
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	b36b      	cbz	r3, 80074e8 <__swbuf_r+0x84>
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	b2f6      	uxtb	r6, r6
 8007492:	1ac0      	subs	r0, r0, r3
 8007494:	6963      	ldr	r3, [r4, #20]
 8007496:	4637      	mov	r7, r6
 8007498:	4283      	cmp	r3, r0
 800749a:	dc04      	bgt.n	80074a6 <__swbuf_r+0x42>
 800749c:	4621      	mov	r1, r4
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 f93c 	bl	800771c <_fflush_r>
 80074a4:	bb30      	cbnz	r0, 80074f4 <__swbuf_r+0x90>
 80074a6:	68a3      	ldr	r3, [r4, #8]
 80074a8:	3001      	adds	r0, #1
 80074aa:	3b01      	subs	r3, #1
 80074ac:	60a3      	str	r3, [r4, #8]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	6022      	str	r2, [r4, #0]
 80074b4:	701e      	strb	r6, [r3, #0]
 80074b6:	6963      	ldr	r3, [r4, #20]
 80074b8:	4283      	cmp	r3, r0
 80074ba:	d004      	beq.n	80074c6 <__swbuf_r+0x62>
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	07db      	lsls	r3, r3, #31
 80074c0:	d506      	bpl.n	80074d0 <__swbuf_r+0x6c>
 80074c2:	2e0a      	cmp	r6, #10
 80074c4:	d104      	bne.n	80074d0 <__swbuf_r+0x6c>
 80074c6:	4621      	mov	r1, r4
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 f927 	bl	800771c <_fflush_r>
 80074ce:	b988      	cbnz	r0, 80074f4 <__swbuf_r+0x90>
 80074d0:	4638      	mov	r0, r7
 80074d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d4:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <__swbuf_r+0x9c>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d101      	bne.n	80074de <__swbuf_r+0x7a>
 80074da:	68ac      	ldr	r4, [r5, #8]
 80074dc:	e7cf      	b.n	800747e <__swbuf_r+0x1a>
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <__swbuf_r+0xa0>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	bf08      	it	eq
 80074e4:	68ec      	ldreq	r4, [r5, #12]
 80074e6:	e7ca      	b.n	800747e <__swbuf_r+0x1a>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f81a 	bl	8007524 <__swsetup_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d0cb      	beq.n	800748c <__swbuf_r+0x28>
 80074f4:	f04f 37ff 	mov.w	r7, #4294967295
 80074f8:	e7ea      	b.n	80074d0 <__swbuf_r+0x6c>
 80074fa:	bf00      	nop
 80074fc:	08008854 	.word	0x08008854
 8007500:	08008874 	.word	0x08008874
 8007504:	08008834 	.word	0x08008834

08007508 <__ascii_wctomb>:
 8007508:	4603      	mov	r3, r0
 800750a:	4608      	mov	r0, r1
 800750c:	b141      	cbz	r1, 8007520 <__ascii_wctomb+0x18>
 800750e:	2aff      	cmp	r2, #255	; 0xff
 8007510:	d904      	bls.n	800751c <__ascii_wctomb+0x14>
 8007512:	228a      	movs	r2, #138	; 0x8a
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	4770      	bx	lr
 800751c:	2001      	movs	r0, #1
 800751e:	700a      	strb	r2, [r1, #0]
 8007520:	4770      	bx	lr
	...

08007524 <__swsetup_r>:
 8007524:	4b32      	ldr	r3, [pc, #200]	; (80075f0 <__swsetup_r+0xcc>)
 8007526:	b570      	push	{r4, r5, r6, lr}
 8007528:	681d      	ldr	r5, [r3, #0]
 800752a:	4606      	mov	r6, r0
 800752c:	460c      	mov	r4, r1
 800752e:	b125      	cbz	r5, 800753a <__swsetup_r+0x16>
 8007530:	69ab      	ldr	r3, [r5, #24]
 8007532:	b913      	cbnz	r3, 800753a <__swsetup_r+0x16>
 8007534:	4628      	mov	r0, r5
 8007536:	f000 f985 	bl	8007844 <__sinit>
 800753a:	4b2e      	ldr	r3, [pc, #184]	; (80075f4 <__swsetup_r+0xd0>)
 800753c:	429c      	cmp	r4, r3
 800753e:	d10f      	bne.n	8007560 <__swsetup_r+0x3c>
 8007540:	686c      	ldr	r4, [r5, #4]
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007548:	0719      	lsls	r1, r3, #28
 800754a:	d42c      	bmi.n	80075a6 <__swsetup_r+0x82>
 800754c:	06dd      	lsls	r5, r3, #27
 800754e:	d411      	bmi.n	8007574 <__swsetup_r+0x50>
 8007550:	2309      	movs	r3, #9
 8007552:	6033      	str	r3, [r6, #0]
 8007554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	e03e      	b.n	80075de <__swsetup_r+0xba>
 8007560:	4b25      	ldr	r3, [pc, #148]	; (80075f8 <__swsetup_r+0xd4>)
 8007562:	429c      	cmp	r4, r3
 8007564:	d101      	bne.n	800756a <__swsetup_r+0x46>
 8007566:	68ac      	ldr	r4, [r5, #8]
 8007568:	e7eb      	b.n	8007542 <__swsetup_r+0x1e>
 800756a:	4b24      	ldr	r3, [pc, #144]	; (80075fc <__swsetup_r+0xd8>)
 800756c:	429c      	cmp	r4, r3
 800756e:	bf08      	it	eq
 8007570:	68ec      	ldreq	r4, [r5, #12]
 8007572:	e7e6      	b.n	8007542 <__swsetup_r+0x1e>
 8007574:	0758      	lsls	r0, r3, #29
 8007576:	d512      	bpl.n	800759e <__swsetup_r+0x7a>
 8007578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800757a:	b141      	cbz	r1, 800758e <__swsetup_r+0x6a>
 800757c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007580:	4299      	cmp	r1, r3
 8007582:	d002      	beq.n	800758a <__swsetup_r+0x66>
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff fd11 	bl	8006fac <_free_r>
 800758a:	2300      	movs	r3, #0
 800758c:	6363      	str	r3, [r4, #52]	; 0x34
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	2300      	movs	r3, #0
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	f043 0308 	orr.w	r3, r3, #8
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	b94b      	cbnz	r3, 80075be <__swsetup_r+0x9a>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b4:	d003      	beq.n	80075be <__swsetup_r+0x9a>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 fa07 	bl	80079cc <__smakebuf_r>
 80075be:	89a0      	ldrh	r0, [r4, #12]
 80075c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075c4:	f010 0301 	ands.w	r3, r0, #1
 80075c8:	d00a      	beq.n	80075e0 <__swsetup_r+0xbc>
 80075ca:	2300      	movs	r3, #0
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	6963      	ldr	r3, [r4, #20]
 80075d0:	425b      	negs	r3, r3
 80075d2:	61a3      	str	r3, [r4, #24]
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	b943      	cbnz	r3, 80075ea <__swsetup_r+0xc6>
 80075d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075dc:	d1ba      	bne.n	8007554 <__swsetup_r+0x30>
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	0781      	lsls	r1, r0, #30
 80075e2:	bf58      	it	pl
 80075e4:	6963      	ldrpl	r3, [r4, #20]
 80075e6:	60a3      	str	r3, [r4, #8]
 80075e8:	e7f4      	b.n	80075d4 <__swsetup_r+0xb0>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e7f7      	b.n	80075de <__swsetup_r+0xba>
 80075ee:	bf00      	nop
 80075f0:	20000310 	.word	0x20000310
 80075f4:	08008854 	.word	0x08008854
 80075f8:	08008874 	.word	0x08008874
 80075fc:	08008834 	.word	0x08008834

08007600 <abort>:
 8007600:	2006      	movs	r0, #6
 8007602:	b508      	push	{r3, lr}
 8007604:	f000 fa4a 	bl	8007a9c <raise>
 8007608:	2001      	movs	r0, #1
 800760a:	f000 fdc3 	bl	8008194 <_exit>
	...

08007610 <__sflush_r>:
 8007610:	898a      	ldrh	r2, [r1, #12]
 8007612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007616:	4605      	mov	r5, r0
 8007618:	0710      	lsls	r0, r2, #28
 800761a:	460c      	mov	r4, r1
 800761c:	d458      	bmi.n	80076d0 <__sflush_r+0xc0>
 800761e:	684b      	ldr	r3, [r1, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	dc05      	bgt.n	8007630 <__sflush_r+0x20>
 8007624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	dc02      	bgt.n	8007630 <__sflush_r+0x20>
 800762a:	2000      	movs	r0, #0
 800762c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007632:	2e00      	cmp	r6, #0
 8007634:	d0f9      	beq.n	800762a <__sflush_r+0x1a>
 8007636:	2300      	movs	r3, #0
 8007638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800763c:	682f      	ldr	r7, [r5, #0]
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	d032      	beq.n	80076a8 <__sflush_r+0x98>
 8007642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	075a      	lsls	r2, r3, #29
 8007648:	d505      	bpl.n	8007656 <__sflush_r+0x46>
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	1ac0      	subs	r0, r0, r3
 800764e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007650:	b10b      	cbz	r3, 8007656 <__sflush_r+0x46>
 8007652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007654:	1ac0      	subs	r0, r0, r3
 8007656:	2300      	movs	r3, #0
 8007658:	4602      	mov	r2, r0
 800765a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800765c:	4628      	mov	r0, r5
 800765e:	6a21      	ldr	r1, [r4, #32]
 8007660:	47b0      	blx	r6
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	d106      	bne.n	8007676 <__sflush_r+0x66>
 8007668:	6829      	ldr	r1, [r5, #0]
 800766a:	291d      	cmp	r1, #29
 800766c:	d82c      	bhi.n	80076c8 <__sflush_r+0xb8>
 800766e:	4a2a      	ldr	r2, [pc, #168]	; (8007718 <__sflush_r+0x108>)
 8007670:	40ca      	lsrs	r2, r1
 8007672:	07d6      	lsls	r6, r2, #31
 8007674:	d528      	bpl.n	80076c8 <__sflush_r+0xb8>
 8007676:	2200      	movs	r2, #0
 8007678:	6062      	str	r2, [r4, #4]
 800767a:	6922      	ldr	r2, [r4, #16]
 800767c:	04d9      	lsls	r1, r3, #19
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	d504      	bpl.n	800768c <__sflush_r+0x7c>
 8007682:	1c42      	adds	r2, r0, #1
 8007684:	d101      	bne.n	800768a <__sflush_r+0x7a>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b903      	cbnz	r3, 800768c <__sflush_r+0x7c>
 800768a:	6560      	str	r0, [r4, #84]	; 0x54
 800768c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768e:	602f      	str	r7, [r5, #0]
 8007690:	2900      	cmp	r1, #0
 8007692:	d0ca      	beq.n	800762a <__sflush_r+0x1a>
 8007694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007698:	4299      	cmp	r1, r3
 800769a:	d002      	beq.n	80076a2 <__sflush_r+0x92>
 800769c:	4628      	mov	r0, r5
 800769e:	f7ff fc85 	bl	8006fac <_free_r>
 80076a2:	2000      	movs	r0, #0
 80076a4:	6360      	str	r0, [r4, #52]	; 0x34
 80076a6:	e7c1      	b.n	800762c <__sflush_r+0x1c>
 80076a8:	6a21      	ldr	r1, [r4, #32]
 80076aa:	2301      	movs	r3, #1
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b0      	blx	r6
 80076b0:	1c41      	adds	r1, r0, #1
 80076b2:	d1c7      	bne.n	8007644 <__sflush_r+0x34>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0c4      	beq.n	8007644 <__sflush_r+0x34>
 80076ba:	2b1d      	cmp	r3, #29
 80076bc:	d001      	beq.n	80076c2 <__sflush_r+0xb2>
 80076be:	2b16      	cmp	r3, #22
 80076c0:	d101      	bne.n	80076c6 <__sflush_r+0xb6>
 80076c2:	602f      	str	r7, [r5, #0]
 80076c4:	e7b1      	b.n	800762a <__sflush_r+0x1a>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	e7ad      	b.n	800762c <__sflush_r+0x1c>
 80076d0:	690f      	ldr	r7, [r1, #16]
 80076d2:	2f00      	cmp	r7, #0
 80076d4:	d0a9      	beq.n	800762a <__sflush_r+0x1a>
 80076d6:	0793      	lsls	r3, r2, #30
 80076d8:	bf18      	it	ne
 80076da:	2300      	movne	r3, #0
 80076dc:	680e      	ldr	r6, [r1, #0]
 80076de:	bf08      	it	eq
 80076e0:	694b      	ldreq	r3, [r1, #20]
 80076e2:	eba6 0807 	sub.w	r8, r6, r7
 80076e6:	600f      	str	r7, [r1, #0]
 80076e8:	608b      	str	r3, [r1, #8]
 80076ea:	f1b8 0f00 	cmp.w	r8, #0
 80076ee:	dd9c      	ble.n	800762a <__sflush_r+0x1a>
 80076f0:	4643      	mov	r3, r8
 80076f2:	463a      	mov	r2, r7
 80076f4:	4628      	mov	r0, r5
 80076f6:	6a21      	ldr	r1, [r4, #32]
 80076f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076fa:	47b0      	blx	r6
 80076fc:	2800      	cmp	r0, #0
 80076fe:	dc06      	bgt.n	800770e <__sflush_r+0xfe>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	f04f 30ff 	mov.w	r0, #4294967295
 8007706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	e78e      	b.n	800762c <__sflush_r+0x1c>
 800770e:	4407      	add	r7, r0
 8007710:	eba8 0800 	sub.w	r8, r8, r0
 8007714:	e7e9      	b.n	80076ea <__sflush_r+0xda>
 8007716:	bf00      	nop
 8007718:	20400001 	.word	0x20400001

0800771c <_fflush_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	690b      	ldr	r3, [r1, #16]
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	b913      	cbnz	r3, 800772c <_fflush_r+0x10>
 8007726:	2500      	movs	r5, #0
 8007728:	4628      	mov	r0, r5
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	b118      	cbz	r0, 8007736 <_fflush_r+0x1a>
 800772e:	6983      	ldr	r3, [r0, #24]
 8007730:	b90b      	cbnz	r3, 8007736 <_fflush_r+0x1a>
 8007732:	f000 f887 	bl	8007844 <__sinit>
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <_fflush_r+0x6c>)
 8007738:	429c      	cmp	r4, r3
 800773a:	d11b      	bne.n	8007774 <_fflush_r+0x58>
 800773c:	686c      	ldr	r4, [r5, #4]
 800773e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0ef      	beq.n	8007726 <_fflush_r+0xa>
 8007746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007748:	07d0      	lsls	r0, r2, #31
 800774a:	d404      	bmi.n	8007756 <_fflush_r+0x3a>
 800774c:	0599      	lsls	r1, r3, #22
 800774e:	d402      	bmi.n	8007756 <_fflush_r+0x3a>
 8007750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007752:	f000 f915 	bl	8007980 <__retarget_lock_acquire_recursive>
 8007756:	4628      	mov	r0, r5
 8007758:	4621      	mov	r1, r4
 800775a:	f7ff ff59 	bl	8007610 <__sflush_r>
 800775e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007760:	4605      	mov	r5, r0
 8007762:	07da      	lsls	r2, r3, #31
 8007764:	d4e0      	bmi.n	8007728 <_fflush_r+0xc>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	059b      	lsls	r3, r3, #22
 800776a:	d4dd      	bmi.n	8007728 <_fflush_r+0xc>
 800776c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800776e:	f000 f908 	bl	8007982 <__retarget_lock_release_recursive>
 8007772:	e7d9      	b.n	8007728 <_fflush_r+0xc>
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <_fflush_r+0x70>)
 8007776:	429c      	cmp	r4, r3
 8007778:	d101      	bne.n	800777e <_fflush_r+0x62>
 800777a:	68ac      	ldr	r4, [r5, #8]
 800777c:	e7df      	b.n	800773e <_fflush_r+0x22>
 800777e:	4b04      	ldr	r3, [pc, #16]	; (8007790 <_fflush_r+0x74>)
 8007780:	429c      	cmp	r4, r3
 8007782:	bf08      	it	eq
 8007784:	68ec      	ldreq	r4, [r5, #12]
 8007786:	e7da      	b.n	800773e <_fflush_r+0x22>
 8007788:	08008854 	.word	0x08008854
 800778c:	08008874 	.word	0x08008874
 8007790:	08008834 	.word	0x08008834

08007794 <std>:
 8007794:	2300      	movs	r3, #0
 8007796:	b510      	push	{r4, lr}
 8007798:	4604      	mov	r4, r0
 800779a:	e9c0 3300 	strd	r3, r3, [r0]
 800779e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077a2:	6083      	str	r3, [r0, #8]
 80077a4:	8181      	strh	r1, [r0, #12]
 80077a6:	6643      	str	r3, [r0, #100]	; 0x64
 80077a8:	81c2      	strh	r2, [r0, #14]
 80077aa:	6183      	str	r3, [r0, #24]
 80077ac:	4619      	mov	r1, r3
 80077ae:	2208      	movs	r2, #8
 80077b0:	305c      	adds	r0, #92	; 0x5c
 80077b2:	f7fd fd5d 	bl	8005270 <memset>
 80077b6:	4b05      	ldr	r3, [pc, #20]	; (80077cc <std+0x38>)
 80077b8:	6224      	str	r4, [r4, #32]
 80077ba:	6263      	str	r3, [r4, #36]	; 0x24
 80077bc:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <std+0x3c>)
 80077be:	62a3      	str	r3, [r4, #40]	; 0x28
 80077c0:	4b04      	ldr	r3, [pc, #16]	; (80077d4 <std+0x40>)
 80077c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077c4:	4b04      	ldr	r3, [pc, #16]	; (80077d8 <std+0x44>)
 80077c6:	6323      	str	r3, [r4, #48]	; 0x30
 80077c8:	bd10      	pop	{r4, pc}
 80077ca:	bf00      	nop
 80077cc:	08007ad5 	.word	0x08007ad5
 80077d0:	08007af7 	.word	0x08007af7
 80077d4:	08007b2f 	.word	0x08007b2f
 80077d8:	08007b53 	.word	0x08007b53

080077dc <_cleanup_r>:
 80077dc:	4901      	ldr	r1, [pc, #4]	; (80077e4 <_cleanup_r+0x8>)
 80077de:	f000 b8af 	b.w	8007940 <_fwalk_reent>
 80077e2:	bf00      	nop
 80077e4:	0800771d 	.word	0x0800771d

080077e8 <__sfmoreglue>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	2568      	movs	r5, #104	; 0x68
 80077ec:	1e4a      	subs	r2, r1, #1
 80077ee:	4355      	muls	r5, r2
 80077f0:	460e      	mov	r6, r1
 80077f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077f6:	f7ff fc25 	bl	8007044 <_malloc_r>
 80077fa:	4604      	mov	r4, r0
 80077fc:	b140      	cbz	r0, 8007810 <__sfmoreglue+0x28>
 80077fe:	2100      	movs	r1, #0
 8007800:	e9c0 1600 	strd	r1, r6, [r0]
 8007804:	300c      	adds	r0, #12
 8007806:	60a0      	str	r0, [r4, #8]
 8007808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800780c:	f7fd fd30 	bl	8005270 <memset>
 8007810:	4620      	mov	r0, r4
 8007812:	bd70      	pop	{r4, r5, r6, pc}

08007814 <__sfp_lock_acquire>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__sfp_lock_acquire+0x8>)
 8007816:	f000 b8b3 	b.w	8007980 <__retarget_lock_acquire_recursive>
 800781a:	bf00      	nop
 800781c:	20001714 	.word	0x20001714

08007820 <__sfp_lock_release>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__sfp_lock_release+0x8>)
 8007822:	f000 b8ae 	b.w	8007982 <__retarget_lock_release_recursive>
 8007826:	bf00      	nop
 8007828:	20001714 	.word	0x20001714

0800782c <__sinit_lock_acquire>:
 800782c:	4801      	ldr	r0, [pc, #4]	; (8007834 <__sinit_lock_acquire+0x8>)
 800782e:	f000 b8a7 	b.w	8007980 <__retarget_lock_acquire_recursive>
 8007832:	bf00      	nop
 8007834:	2000170f 	.word	0x2000170f

08007838 <__sinit_lock_release>:
 8007838:	4801      	ldr	r0, [pc, #4]	; (8007840 <__sinit_lock_release+0x8>)
 800783a:	f000 b8a2 	b.w	8007982 <__retarget_lock_release_recursive>
 800783e:	bf00      	nop
 8007840:	2000170f 	.word	0x2000170f

08007844 <__sinit>:
 8007844:	b510      	push	{r4, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	f7ff fff0 	bl	800782c <__sinit_lock_acquire>
 800784c:	69a3      	ldr	r3, [r4, #24]
 800784e:	b11b      	cbz	r3, 8007858 <__sinit+0x14>
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f7ff bff0 	b.w	8007838 <__sinit_lock_release>
 8007858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800785c:	6523      	str	r3, [r4, #80]	; 0x50
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <__sinit+0x68>)
 8007860:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <__sinit+0x6c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	62a2      	str	r2, [r4, #40]	; 0x28
 8007866:	42a3      	cmp	r3, r4
 8007868:	bf08      	it	eq
 800786a:	2301      	moveq	r3, #1
 800786c:	4620      	mov	r0, r4
 800786e:	bf08      	it	eq
 8007870:	61a3      	streq	r3, [r4, #24]
 8007872:	f000 f81f 	bl	80078b4 <__sfp>
 8007876:	6060      	str	r0, [r4, #4]
 8007878:	4620      	mov	r0, r4
 800787a:	f000 f81b 	bl	80078b4 <__sfp>
 800787e:	60a0      	str	r0, [r4, #8]
 8007880:	4620      	mov	r0, r4
 8007882:	f000 f817 	bl	80078b4 <__sfp>
 8007886:	2200      	movs	r2, #0
 8007888:	2104      	movs	r1, #4
 800788a:	60e0      	str	r0, [r4, #12]
 800788c:	6860      	ldr	r0, [r4, #4]
 800788e:	f7ff ff81 	bl	8007794 <std>
 8007892:	2201      	movs	r2, #1
 8007894:	2109      	movs	r1, #9
 8007896:	68a0      	ldr	r0, [r4, #8]
 8007898:	f7ff ff7c 	bl	8007794 <std>
 800789c:	2202      	movs	r2, #2
 800789e:	2112      	movs	r1, #18
 80078a0:	68e0      	ldr	r0, [r4, #12]
 80078a2:	f7ff ff77 	bl	8007794 <std>
 80078a6:	2301      	movs	r3, #1
 80078a8:	61a3      	str	r3, [r4, #24]
 80078aa:	e7d1      	b.n	8007850 <__sinit+0xc>
 80078ac:	080084b0 	.word	0x080084b0
 80078b0:	080077dd 	.word	0x080077dd

080078b4 <__sfp>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	4607      	mov	r7, r0
 80078b8:	f7ff ffac 	bl	8007814 <__sfp_lock_acquire>
 80078bc:	4b1e      	ldr	r3, [pc, #120]	; (8007938 <__sfp+0x84>)
 80078be:	681e      	ldr	r6, [r3, #0]
 80078c0:	69b3      	ldr	r3, [r6, #24]
 80078c2:	b913      	cbnz	r3, 80078ca <__sfp+0x16>
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff ffbd 	bl	8007844 <__sinit>
 80078ca:	3648      	adds	r6, #72	; 0x48
 80078cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	d503      	bpl.n	80078dc <__sfp+0x28>
 80078d4:	6833      	ldr	r3, [r6, #0]
 80078d6:	b30b      	cbz	r3, 800791c <__sfp+0x68>
 80078d8:	6836      	ldr	r6, [r6, #0]
 80078da:	e7f7      	b.n	80078cc <__sfp+0x18>
 80078dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078e0:	b9d5      	cbnz	r5, 8007918 <__sfp+0x64>
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <__sfp+0x88>)
 80078e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078e8:	60e3      	str	r3, [r4, #12]
 80078ea:	6665      	str	r5, [r4, #100]	; 0x64
 80078ec:	f000 f847 	bl	800797e <__retarget_lock_init_recursive>
 80078f0:	f7ff ff96 	bl	8007820 <__sfp_lock_release>
 80078f4:	2208      	movs	r2, #8
 80078f6:	4629      	mov	r1, r5
 80078f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007900:	6025      	str	r5, [r4, #0]
 8007902:	61a5      	str	r5, [r4, #24]
 8007904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007908:	f7fd fcb2 	bl	8005270 <memset>
 800790c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007914:	4620      	mov	r0, r4
 8007916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007918:	3468      	adds	r4, #104	; 0x68
 800791a:	e7d9      	b.n	80078d0 <__sfp+0x1c>
 800791c:	2104      	movs	r1, #4
 800791e:	4638      	mov	r0, r7
 8007920:	f7ff ff62 	bl	80077e8 <__sfmoreglue>
 8007924:	4604      	mov	r4, r0
 8007926:	6030      	str	r0, [r6, #0]
 8007928:	2800      	cmp	r0, #0
 800792a:	d1d5      	bne.n	80078d8 <__sfp+0x24>
 800792c:	f7ff ff78 	bl	8007820 <__sfp_lock_release>
 8007930:	230c      	movs	r3, #12
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	e7ee      	b.n	8007914 <__sfp+0x60>
 8007936:	bf00      	nop
 8007938:	080084b0 	.word	0x080084b0
 800793c:	ffff0001 	.word	0xffff0001

08007940 <_fwalk_reent>:
 8007940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007944:	4606      	mov	r6, r0
 8007946:	4688      	mov	r8, r1
 8007948:	2700      	movs	r7, #0
 800794a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800794e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007952:	f1b9 0901 	subs.w	r9, r9, #1
 8007956:	d505      	bpl.n	8007964 <_fwalk_reent+0x24>
 8007958:	6824      	ldr	r4, [r4, #0]
 800795a:	2c00      	cmp	r4, #0
 800795c:	d1f7      	bne.n	800794e <_fwalk_reent+0xe>
 800795e:	4638      	mov	r0, r7
 8007960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007964:	89ab      	ldrh	r3, [r5, #12]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d907      	bls.n	800797a <_fwalk_reent+0x3a>
 800796a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800796e:	3301      	adds	r3, #1
 8007970:	d003      	beq.n	800797a <_fwalk_reent+0x3a>
 8007972:	4629      	mov	r1, r5
 8007974:	4630      	mov	r0, r6
 8007976:	47c0      	blx	r8
 8007978:	4307      	orrs	r7, r0
 800797a:	3568      	adds	r5, #104	; 0x68
 800797c:	e7e9      	b.n	8007952 <_fwalk_reent+0x12>

0800797e <__retarget_lock_init_recursive>:
 800797e:	4770      	bx	lr

08007980 <__retarget_lock_acquire_recursive>:
 8007980:	4770      	bx	lr

08007982 <__retarget_lock_release_recursive>:
 8007982:	4770      	bx	lr

08007984 <__swhatbuf_r>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	460e      	mov	r6, r1
 8007988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798c:	4614      	mov	r4, r2
 800798e:	2900      	cmp	r1, #0
 8007990:	461d      	mov	r5, r3
 8007992:	b096      	sub	sp, #88	; 0x58
 8007994:	da07      	bge.n	80079a6 <__swhatbuf_r+0x22>
 8007996:	2300      	movs	r3, #0
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	89b3      	ldrh	r3, [r6, #12]
 800799c:	061a      	lsls	r2, r3, #24
 800799e:	d410      	bmi.n	80079c2 <__swhatbuf_r+0x3e>
 80079a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a4:	e00e      	b.n	80079c4 <__swhatbuf_r+0x40>
 80079a6:	466a      	mov	r2, sp
 80079a8:	f000 f8fa 	bl	8007ba0 <_fstat_r>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	dbf2      	blt.n	8007996 <__swhatbuf_r+0x12>
 80079b0:	9a01      	ldr	r2, [sp, #4]
 80079b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079ba:	425a      	negs	r2, r3
 80079bc:	415a      	adcs	r2, r3
 80079be:	602a      	str	r2, [r5, #0]
 80079c0:	e7ee      	b.n	80079a0 <__swhatbuf_r+0x1c>
 80079c2:	2340      	movs	r3, #64	; 0x40
 80079c4:	2000      	movs	r0, #0
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	b016      	add	sp, #88	; 0x58
 80079ca:	bd70      	pop	{r4, r5, r6, pc}

080079cc <__smakebuf_r>:
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079d0:	079d      	lsls	r5, r3, #30
 80079d2:	4606      	mov	r6, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	d507      	bpl.n	80079e8 <__smakebuf_r+0x1c>
 80079d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	6123      	str	r3, [r4, #16]
 80079e0:	2301      	movs	r3, #1
 80079e2:	6163      	str	r3, [r4, #20]
 80079e4:	b002      	add	sp, #8
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	466a      	mov	r2, sp
 80079ea:	ab01      	add	r3, sp, #4
 80079ec:	f7ff ffca 	bl	8007984 <__swhatbuf_r>
 80079f0:	9900      	ldr	r1, [sp, #0]
 80079f2:	4605      	mov	r5, r0
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7ff fb25 	bl	8007044 <_malloc_r>
 80079fa:	b948      	cbnz	r0, 8007a10 <__smakebuf_r+0x44>
 80079fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a00:	059a      	lsls	r2, r3, #22
 8007a02:	d4ef      	bmi.n	80079e4 <__smakebuf_r+0x18>
 8007a04:	f023 0303 	bic.w	r3, r3, #3
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	e7e3      	b.n	80079d8 <__smakebuf_r+0xc>
 8007a10:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <__smakebuf_r+0x7c>)
 8007a12:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	6120      	str	r0, [r4, #16]
 8007a22:	6163      	str	r3, [r4, #20]
 8007a24:	9b01      	ldr	r3, [sp, #4]
 8007a26:	b15b      	cbz	r3, 8007a40 <__smakebuf_r+0x74>
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a2e:	f000 f8c9 	bl	8007bc4 <_isatty_r>
 8007a32:	b128      	cbz	r0, 8007a40 <__smakebuf_r+0x74>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	89a0      	ldrh	r0, [r4, #12]
 8007a42:	4305      	orrs	r5, r0
 8007a44:	81a5      	strh	r5, [r4, #12]
 8007a46:	e7cd      	b.n	80079e4 <__smakebuf_r+0x18>
 8007a48:	080077dd 	.word	0x080077dd

08007a4c <_raise_r>:
 8007a4c:	291f      	cmp	r1, #31
 8007a4e:	b538      	push	{r3, r4, r5, lr}
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	d904      	bls.n	8007a60 <_raise_r+0x14>
 8007a56:	2316      	movs	r3, #22
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a62:	b112      	cbz	r2, 8007a6a <_raise_r+0x1e>
 8007a64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a68:	b94b      	cbnz	r3, 8007a7e <_raise_r+0x32>
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 f830 	bl	8007ad0 <_getpid_r>
 8007a70:	462a      	mov	r2, r5
 8007a72:	4601      	mov	r1, r0
 8007a74:	4620      	mov	r0, r4
 8007a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a7a:	f000 b817 	b.w	8007aac <_kill_r>
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d00a      	beq.n	8007a98 <_raise_r+0x4c>
 8007a82:	1c59      	adds	r1, r3, #1
 8007a84:	d103      	bne.n	8007a8e <_raise_r+0x42>
 8007a86:	2316      	movs	r3, #22
 8007a88:	6003      	str	r3, [r0, #0]
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	e7e7      	b.n	8007a5e <_raise_r+0x12>
 8007a8e:	2400      	movs	r4, #0
 8007a90:	4628      	mov	r0, r5
 8007a92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a96:	4798      	blx	r3
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e7e0      	b.n	8007a5e <_raise_r+0x12>

08007a9c <raise>:
 8007a9c:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <raise+0xc>)
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	f7ff bfd3 	b.w	8007a4c <_raise_r>
 8007aa6:	bf00      	nop
 8007aa8:	20000310 	.word	0x20000310

08007aac <_kill_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	2300      	movs	r3, #0
 8007ab0:	4d06      	ldr	r5, [pc, #24]	; (8007acc <_kill_r+0x20>)
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	f000 fb89 	bl	80081d0 <_kill>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	d102      	bne.n	8007ac8 <_kill_r+0x1c>
 8007ac2:	682b      	ldr	r3, [r5, #0]
 8007ac4:	b103      	cbz	r3, 8007ac8 <_kill_r+0x1c>
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	bd38      	pop	{r3, r4, r5, pc}
 8007aca:	bf00      	nop
 8007acc:	20001708 	.word	0x20001708

08007ad0 <_getpid_r>:
 8007ad0:	f000 b9b0 	b.w	8007e34 <_getpid>

08007ad4 <__sread>:
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	f000 f894 	bl	8007c08 <_read_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	bfab      	itete	ge
 8007ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ae8:	181b      	addge	r3, r3, r0
 8007aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aee:	bfac      	ite	ge
 8007af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007af2:	81a3      	strhlt	r3, [r4, #12]
 8007af4:	bd10      	pop	{r4, pc}

08007af6 <__swrite>:
 8007af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	461f      	mov	r7, r3
 8007afc:	898b      	ldrh	r3, [r1, #12]
 8007afe:	4605      	mov	r5, r0
 8007b00:	05db      	lsls	r3, r3, #23
 8007b02:	460c      	mov	r4, r1
 8007b04:	4616      	mov	r6, r2
 8007b06:	d505      	bpl.n	8007b14 <__swrite+0x1e>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b10:	f000 f868 	bl	8007be4 <_lseek_r>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	4632      	mov	r2, r6
 8007b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	4628      	mov	r0, r5
 8007b20:	463b      	mov	r3, r7
 8007b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2a:	f000 b817 	b.w	8007b5c <_write_r>

08007b2e <__sseek>:
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	460c      	mov	r4, r1
 8007b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b36:	f000 f855 	bl	8007be4 <_lseek_r>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	bf15      	itete	ne
 8007b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b4a:	81a3      	strheq	r3, [r4, #12]
 8007b4c:	bf18      	it	ne
 8007b4e:	81a3      	strhne	r3, [r4, #12]
 8007b50:	bd10      	pop	{r4, pc}

08007b52 <__sclose>:
 8007b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b56:	f000 b813 	b.w	8007b80 <_close_r>
	...

08007b5c <_write_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	2200      	movs	r2, #0
 8007b66:	4d05      	ldr	r5, [pc, #20]	; (8007b7c <_write_r+0x20>)
 8007b68:	602a      	str	r2, [r5, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f000 f90e 	bl	8007d8c <_write>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_write_r+0x1e>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_write_r+0x1e>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20001708 	.word	0x20001708

08007b80 <_close_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	2300      	movs	r3, #0
 8007b84:	4d05      	ldr	r5, [pc, #20]	; (8007b9c <_close_r+0x1c>)
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f000 f92c 	bl	8007de8 <_close>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_close_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_close_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20001708 	.word	0x20001708

08007ba0 <_fstat_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4d06      	ldr	r5, [pc, #24]	; (8007bc0 <_fstat_r+0x20>)
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	4611      	mov	r1, r2
 8007bac:	602b      	str	r3, [r5, #0]
 8007bae:	f000 f964 	bl	8007e7a <_fstat>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d102      	bne.n	8007bbc <_fstat_r+0x1c>
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	b103      	cbz	r3, 8007bbc <_fstat_r+0x1c>
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	bd38      	pop	{r3, r4, r5, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20001708 	.word	0x20001708

08007bc4 <_isatty_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	4d05      	ldr	r5, [pc, #20]	; (8007be0 <_isatty_r+0x1c>)
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	f000 fac4 	bl	800815c <_isatty>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_isatty_r+0x1a>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_isatty_r+0x1a>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20001708 	.word	0x20001708

08007be4 <_lseek_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	2200      	movs	r2, #0
 8007bee:	4d05      	ldr	r5, [pc, #20]	; (8007c04 <_lseek_r+0x20>)
 8007bf0:	602a      	str	r2, [r5, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f000 f8b8 	bl	8007d68 <_lseek>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_lseek_r+0x1e>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_lseek_r+0x1e>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20001708 	.word	0x20001708

08007c08 <_read_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	2200      	movs	r2, #0
 8007c12:	4d05      	ldr	r5, [pc, #20]	; (8007c28 <_read_r+0x20>)
 8007c14:	602a      	str	r2, [r5, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f000 f850 	bl	8007cbc <_read>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_read_r+0x1e>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_read_r+0x1e>
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	20001708 	.word	0x20001708

08007c2c <findslot>:
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <findslot+0x2c>)
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	4604      	mov	r4, r0
 8007c32:	6818      	ldr	r0, [r3, #0]
 8007c34:	b118      	cbz	r0, 8007c3e <findslot+0x12>
 8007c36:	6983      	ldr	r3, [r0, #24]
 8007c38:	b90b      	cbnz	r3, 8007c3e <findslot+0x12>
 8007c3a:	f7ff fe03 	bl	8007844 <__sinit>
 8007c3e:	2c13      	cmp	r4, #19
 8007c40:	d807      	bhi.n	8007c52 <findslot+0x26>
 8007c42:	4806      	ldr	r0, [pc, #24]	; (8007c5c <findslot+0x30>)
 8007c44:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007c48:	3201      	adds	r2, #1
 8007c4a:	d002      	beq.n	8007c52 <findslot+0x26>
 8007c4c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	2000      	movs	r0, #0
 8007c54:	e7fc      	b.n	8007c50 <findslot+0x24>
 8007c56:	bf00      	nop
 8007c58:	20000310 	.word	0x20000310
 8007c5c:	200005c8 	.word	0x200005c8

08007c60 <checkerror>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	4604      	mov	r4, r0
 8007c66:	d109      	bne.n	8007c7c <checkerror+0x1c>
 8007c68:	f7fd fad8 	bl	800521c <__errno>
 8007c6c:	2613      	movs	r6, #19
 8007c6e:	4605      	mov	r5, r0
 8007c70:	2700      	movs	r7, #0
 8007c72:	4630      	mov	r0, r6
 8007c74:	4639      	mov	r1, r7
 8007c76:	beab      	bkpt	0x00ab
 8007c78:	4606      	mov	r6, r0
 8007c7a:	602e      	str	r6, [r5, #0]
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c80 <error>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	f7fd faca 	bl	800521c <__errno>
 8007c88:	2613      	movs	r6, #19
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	2700      	movs	r7, #0
 8007c8e:	4630      	mov	r0, r6
 8007c90:	4639      	mov	r1, r7
 8007c92:	beab      	bkpt	0x00ab
 8007c94:	4606      	mov	r6, r0
 8007c96:	4620      	mov	r0, r4
 8007c98:	602e      	str	r6, [r5, #0]
 8007c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c9c <_swiread>:
 8007c9c:	b530      	push	{r4, r5, lr}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	2406      	movs	r4, #6
 8007ca2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007ca6:	9203      	str	r2, [sp, #12]
 8007ca8:	ad01      	add	r5, sp, #4
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	beab      	bkpt	0x00ab
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7ff ffd4 	bl	8007c60 <checkerror>
 8007cb8:	b005      	add	sp, #20
 8007cba:	bd30      	pop	{r4, r5, pc}

08007cbc <_read>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	460e      	mov	r6, r1
 8007cc0:	4615      	mov	r5, r2
 8007cc2:	f7ff ffb3 	bl	8007c2c <findslot>
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	b930      	cbnz	r0, 8007cd8 <_read+0x1c>
 8007cca:	f7fd faa7 	bl	800521c <__errno>
 8007cce:	2309      	movs	r3, #9
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
 8007cd8:	462a      	mov	r2, r5
 8007cda:	4631      	mov	r1, r6
 8007cdc:	6800      	ldr	r0, [r0, #0]
 8007cde:	f7ff ffdd 	bl	8007c9c <_swiread>
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	bf1f      	itttt	ne
 8007ce6:	6863      	ldrne	r3, [r4, #4]
 8007ce8:	1a28      	subne	r0, r5, r0
 8007cea:	181b      	addne	r3, r3, r0
 8007cec:	6063      	strne	r3, [r4, #4]
 8007cee:	e7f2      	b.n	8007cd6 <_read+0x1a>

08007cf0 <_swilseek>:
 8007cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	f7ff ff99 	bl	8007c2c <findslot>
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	b940      	cbnz	r0, 8007d10 <_swilseek+0x20>
 8007cfe:	f7fd fa8d 	bl	800521c <__errno>
 8007d02:	2309      	movs	r3, #9
 8007d04:	6003      	str	r3, [r0, #0]
 8007d06:	f04f 34ff 	mov.w	r4, #4294967295
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	b003      	add	sp, #12
 8007d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d10:	2e02      	cmp	r6, #2
 8007d12:	d903      	bls.n	8007d1c <_swilseek+0x2c>
 8007d14:	f7fd fa82 	bl	800521c <__errno>
 8007d18:	2316      	movs	r3, #22
 8007d1a:	e7f3      	b.n	8007d04 <_swilseek+0x14>
 8007d1c:	2e01      	cmp	r6, #1
 8007d1e:	d112      	bne.n	8007d46 <_swilseek+0x56>
 8007d20:	6843      	ldr	r3, [r0, #4]
 8007d22:	18e4      	adds	r4, r4, r3
 8007d24:	d4f6      	bmi.n	8007d14 <_swilseek+0x24>
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	260a      	movs	r6, #10
 8007d2a:	466f      	mov	r7, sp
 8007d2c:	e9cd 3400 	strd	r3, r4, [sp]
 8007d30:	4630      	mov	r0, r6
 8007d32:	4639      	mov	r1, r7
 8007d34:	beab      	bkpt	0x00ab
 8007d36:	4606      	mov	r6, r0
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7ff ff91 	bl	8007c60 <checkerror>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	dbe1      	blt.n	8007d06 <_swilseek+0x16>
 8007d42:	606c      	str	r4, [r5, #4]
 8007d44:	e7e1      	b.n	8007d0a <_swilseek+0x1a>
 8007d46:	2e02      	cmp	r6, #2
 8007d48:	d1ed      	bne.n	8007d26 <_swilseek+0x36>
 8007d4a:	6803      	ldr	r3, [r0, #0]
 8007d4c:	260c      	movs	r6, #12
 8007d4e:	466f      	mov	r7, sp
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4630      	mov	r0, r6
 8007d54:	4639      	mov	r1, r7
 8007d56:	beab      	bkpt	0x00ab
 8007d58:	4606      	mov	r6, r0
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ff80 	bl	8007c60 <checkerror>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d0d0      	beq.n	8007d06 <_swilseek+0x16>
 8007d64:	4404      	add	r4, r0
 8007d66:	e7de      	b.n	8007d26 <_swilseek+0x36>

08007d68 <_lseek>:
 8007d68:	f7ff bfc2 	b.w	8007cf0 <_swilseek>

08007d6c <_swiwrite>:
 8007d6c:	b530      	push	{r4, r5, lr}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	2405      	movs	r4, #5
 8007d72:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007d76:	9203      	str	r2, [sp, #12]
 8007d78:	ad01      	add	r5, sp, #4
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	beab      	bkpt	0x00ab
 8007d80:	4604      	mov	r4, r0
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7ff ff6c 	bl	8007c60 <checkerror>
 8007d88:	b005      	add	sp, #20
 8007d8a:	bd30      	pop	{r4, r5, pc}

08007d8c <_write>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	460e      	mov	r6, r1
 8007d90:	4615      	mov	r5, r2
 8007d92:	f7ff ff4b 	bl	8007c2c <findslot>
 8007d96:	4604      	mov	r4, r0
 8007d98:	b930      	cbnz	r0, 8007da8 <_write+0x1c>
 8007d9a:	f7fd fa3f 	bl	800521c <__errno>
 8007d9e:	2309      	movs	r3, #9
 8007da0:	6003      	str	r3, [r0, #0]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	462a      	mov	r2, r5
 8007daa:	4631      	mov	r1, r6
 8007dac:	6800      	ldr	r0, [r0, #0]
 8007dae:	f7ff ffdd 	bl	8007d6c <_swiwrite>
 8007db2:	1e03      	subs	r3, r0, #0
 8007db4:	dbf5      	blt.n	8007da2 <_write+0x16>
 8007db6:	6862      	ldr	r2, [r4, #4]
 8007db8:	1ae8      	subs	r0, r5, r3
 8007dba:	4402      	add	r2, r0
 8007dbc:	42ab      	cmp	r3, r5
 8007dbe:	6062      	str	r2, [r4, #4]
 8007dc0:	d1f1      	bne.n	8007da6 <_write+0x1a>
 8007dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f7ff bf5a 	b.w	8007c80 <error>

08007dcc <_swiclose>:
 8007dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dce:	2402      	movs	r4, #2
 8007dd0:	9001      	str	r0, [sp, #4]
 8007dd2:	ad01      	add	r5, sp, #4
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	beab      	bkpt	0x00ab
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f7ff ff3f 	bl	8007c60 <checkerror>
 8007de2:	b003      	add	sp, #12
 8007de4:	bd30      	pop	{r4, r5, pc}
	...

08007de8 <_close>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	f7ff ff1e 	bl	8007c2c <findslot>
 8007df0:	4604      	mov	r4, r0
 8007df2:	b930      	cbnz	r0, 8007e02 <_close+0x1a>
 8007df4:	f7fd fa12 	bl	800521c <__errno>
 8007df8:	2309      	movs	r3, #9
 8007dfa:	6003      	str	r3, [r0, #0]
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	bd38      	pop	{r3, r4, r5, pc}
 8007e02:	3d01      	subs	r5, #1
 8007e04:	2d01      	cmp	r5, #1
 8007e06:	d809      	bhi.n	8007e1c <_close+0x34>
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <_close+0x48>)
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d104      	bne.n	8007e1c <_close+0x34>
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	6003      	str	r3, [r0, #0]
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7f1      	b.n	8007e00 <_close+0x18>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	f7ff ffd5 	bl	8007dcc <_swiclose>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d1ec      	bne.n	8007e00 <_close+0x18>
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	6023      	str	r3, [r4, #0]
 8007e2c:	e7e8      	b.n	8007e00 <_close+0x18>
 8007e2e:	bf00      	nop
 8007e30:	200005c8 	.word	0x200005c8

08007e34 <_getpid>:
 8007e34:	2001      	movs	r0, #1
 8007e36:	4770      	bx	lr

08007e38 <_swistat>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	f7ff fef6 	bl	8007c2c <findslot>
 8007e40:	4605      	mov	r5, r0
 8007e42:	b930      	cbnz	r0, 8007e52 <_swistat+0x1a>
 8007e44:	f7fd f9ea 	bl	800521c <__errno>
 8007e48:	2309      	movs	r3, #9
 8007e4a:	6003      	str	r3, [r0, #0]
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	bd70      	pop	{r4, r5, r6, pc}
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	260c      	movs	r6, #12
 8007e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007e5a:	6063      	str	r3, [r4, #4]
 8007e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e60:	64a3      	str	r3, [r4, #72]	; 0x48
 8007e62:	4630      	mov	r0, r6
 8007e64:	4629      	mov	r1, r5
 8007e66:	beab      	bkpt	0x00ab
 8007e68:	4605      	mov	r5, r0
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f7ff fef8 	bl	8007c60 <checkerror>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	bf1c      	itt	ne
 8007e74:	6120      	strne	r0, [r4, #16]
 8007e76:	2000      	movne	r0, #0
 8007e78:	e7ea      	b.n	8007e50 <_swistat+0x18>

08007e7a <_fstat>:
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4604      	mov	r4, r0
 8007e82:	2258      	movs	r2, #88	; 0x58
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fd f9f3 	bl	8005270 <memset>
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e92:	f7ff bfd1 	b.w	8007e38 <_swistat>

08007e96 <_stat>:
 8007e96:	b538      	push	{r3, r4, r5, lr}
 8007e98:	460d      	mov	r5, r1
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	2258      	movs	r2, #88	; 0x58
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f7fd f9e5 	bl	8005270 <memset>
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	f000 f811 	bl	8007ed0 <_swiopen>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	d00b      	beq.n	8007ecc <_stat+0x36>
 8007eb4:	686b      	ldr	r3, [r5, #4]
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ebc:	606b      	str	r3, [r5, #4]
 8007ebe:	f7ff ffbb 	bl	8007e38 <_swistat>
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7ff ff8f 	bl	8007de8 <_close>
 8007eca:	462c      	mov	r4, r5
 8007ecc:	4620      	mov	r0, r4
 8007ece:	bd38      	pop	{r3, r4, r5, pc}

08007ed0 <_swiopen>:
 8007ed0:	4b2b      	ldr	r3, [pc, #172]	; (8007f80 <_swiopen+0xb0>)
 8007ed2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed6:	4681      	mov	r9, r0
 8007ed8:	460f      	mov	r7, r1
 8007eda:	2500      	movs	r5, #0
 8007edc:	461e      	mov	r6, r3
 8007ede:	b097      	sub	sp, #92	; 0x5c
 8007ee0:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8007ee4:	1c61      	adds	r1, r4, #1
 8007ee6:	d037      	beq.n	8007f58 <_swiopen+0x88>
 8007ee8:	3501      	adds	r5, #1
 8007eea:	2d14      	cmp	r5, #20
 8007eec:	d1f8      	bne.n	8007ee0 <_swiopen+0x10>
 8007eee:	f7fd f995 	bl	800521c <__errno>
 8007ef2:	2318      	movs	r3, #24
 8007ef4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ef8:	6003      	str	r3, [r0, #0]
 8007efa:	e03d      	b.n	8007f78 <_swiopen+0xa8>
 8007efc:	f240 6301 	movw	r3, #1537	; 0x601
 8007f00:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8007f04:	07ba      	lsls	r2, r7, #30
 8007f06:	bf48      	it	mi
 8007f08:	f044 0402 	orrmi.w	r4, r4, #2
 8007f0c:	421f      	tst	r7, r3
 8007f0e:	bf18      	it	ne
 8007f10:	f044 0404 	orrne.w	r4, r4, #4
 8007f14:	073b      	lsls	r3, r7, #28
 8007f16:	bf48      	it	mi
 8007f18:	f024 0404 	bicmi.w	r4, r4, #4
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	bf48      	it	mi
 8007f20:	f044 0408 	orrmi.w	r4, r4, #8
 8007f24:	f8cd 9000 	str.w	r9, [sp]
 8007f28:	f7f8 f912 	bl	8000150 <strlen>
 8007f2c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007f30:	2401      	movs	r4, #1
 8007f32:	4620      	mov	r0, r4
 8007f34:	4641      	mov	r1, r8
 8007f36:	beab      	bkpt	0x00ab
 8007f38:	4604      	mov	r4, r0
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	db07      	blt.n	8007f4e <_swiopen+0x7e>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8007f44:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8007f48:	462c      	mov	r4, r5
 8007f4a:	6073      	str	r3, [r6, #4]
 8007f4c:	e014      	b.n	8007f78 <_swiopen+0xa8>
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff fe96 	bl	8007c80 <error>
 8007f54:	4604      	mov	r4, r0
 8007f56:	e00f      	b.n	8007f78 <_swiopen+0xa8>
 8007f58:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8007f5c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007f60:	46e8      	mov	r8, sp
 8007f62:	d1cb      	bne.n	8007efc <_swiopen+0x2c>
 8007f64:	4641      	mov	r1, r8
 8007f66:	4648      	mov	r0, r9
 8007f68:	f7ff ff95 	bl	8007e96 <_stat>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d0c5      	beq.n	8007efc <_swiopen+0x2c>
 8007f70:	f7fd f954 	bl	800521c <__errno>
 8007f74:	2311      	movs	r3, #17
 8007f76:	6003      	str	r3, [r0, #0]
 8007f78:	4620      	mov	r0, r4
 8007f7a:	b017      	add	sp, #92	; 0x5c
 8007f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f80:	200005c8 	.word	0x200005c8

08007f84 <_get_semihosting_exts>:
 8007f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f88:	4606      	mov	r6, r0
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	482a      	ldr	r0, [pc, #168]	; (8008038 <_get_semihosting_exts+0xb4>)
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4615      	mov	r5, r2
 8007f92:	f7ff ff9d 	bl	8007ed0 <_swiopen>
 8007f96:	4604      	mov	r4, r0
 8007f98:	462a      	mov	r2, r5
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7fd f967 	bl	8005270 <memset>
 8007fa2:	1c63      	adds	r3, r4, #1
 8007fa4:	d016      	beq.n	8007fd4 <_get_semihosting_exts+0x50>
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f7ff fe40 	bl	8007c2c <findslot>
 8007fac:	f04f 080c 	mov.w	r8, #12
 8007fb0:	4681      	mov	r9, r0
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	beab      	bkpt	0x00ab
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4640      	mov	r0, r8
 8007fbc:	f7ff fe50 	bl	8007c60 <checkerror>
 8007fc0:	2803      	cmp	r0, #3
 8007fc2:	dd02      	ble.n	8007fca <_get_semihosting_exts+0x46>
 8007fc4:	1ec3      	subs	r3, r0, #3
 8007fc6:	42ab      	cmp	r3, r5
 8007fc8:	dc08      	bgt.n	8007fdc <_get_semihosting_exts+0x58>
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f7ff ff0c 	bl	8007de8 <_close>
 8007fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	b003      	add	sp, #12
 8007fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fdc:	2204      	movs	r2, #4
 8007fde:	4620      	mov	r0, r4
 8007fe0:	eb0d 0102 	add.w	r1, sp, r2
 8007fe4:	f7ff fe6a 	bl	8007cbc <_read>
 8007fe8:	2803      	cmp	r0, #3
 8007fea:	ddee      	ble.n	8007fca <_get_semihosting_exts+0x46>
 8007fec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007ff0:	2b53      	cmp	r3, #83	; 0x53
 8007ff2:	d1ea      	bne.n	8007fca <_get_semihosting_exts+0x46>
 8007ff4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007ff8:	2b48      	cmp	r3, #72	; 0x48
 8007ffa:	d1e6      	bne.n	8007fca <_get_semihosting_exts+0x46>
 8007ffc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008000:	2b46      	cmp	r3, #70	; 0x46
 8008002:	d1e2      	bne.n	8007fca <_get_semihosting_exts+0x46>
 8008004:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008008:	2b42      	cmp	r3, #66	; 0x42
 800800a:	d1de      	bne.n	8007fca <_get_semihosting_exts+0x46>
 800800c:	2201      	movs	r2, #1
 800800e:	4639      	mov	r1, r7
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff fe6d 	bl	8007cf0 <_swilseek>
 8008016:	2800      	cmp	r0, #0
 8008018:	dbd7      	blt.n	8007fca <_get_semihosting_exts+0x46>
 800801a:	462a      	mov	r2, r5
 800801c:	4631      	mov	r1, r6
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff fe4c 	bl	8007cbc <_read>
 8008024:	4605      	mov	r5, r0
 8008026:	4620      	mov	r0, r4
 8008028:	f7ff fede 	bl	8007de8 <_close>
 800802c:	4628      	mov	r0, r5
 800802e:	f7ff fe17 	bl	8007c60 <checkerror>
 8008032:	4604      	mov	r4, r0
 8008034:	e7ce      	b.n	8007fd4 <_get_semihosting_exts+0x50>
 8008036:	bf00      	nop
 8008038:	08008894 	.word	0x08008894

0800803c <initialise_semihosting_exts>:
 800803c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800803e:	2100      	movs	r1, #0
 8008040:	2201      	movs	r2, #1
 8008042:	4d09      	ldr	r5, [pc, #36]	; (8008068 <initialise_semihosting_exts+0x2c>)
 8008044:	4c09      	ldr	r4, [pc, #36]	; (800806c <initialise_semihosting_exts+0x30>)
 8008046:	a801      	add	r0, sp, #4
 8008048:	6029      	str	r1, [r5, #0]
 800804a:	6022      	str	r2, [r4, #0]
 800804c:	f7ff ff9a 	bl	8007f84 <_get_semihosting_exts>
 8008050:	2800      	cmp	r0, #0
 8008052:	dd07      	ble.n	8008064 <initialise_semihosting_exts+0x28>
 8008054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008058:	f003 0201 	and.w	r2, r3, #1
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	6023      	str	r3, [r4, #0]
 8008064:	b003      	add	sp, #12
 8008066:	bd30      	pop	{r4, r5, pc}
 8008068:	200004e0 	.word	0x200004e0
 800806c:	200004e4 	.word	0x200004e4

08008070 <_has_ext_exit_extended>:
 8008070:	b510      	push	{r4, lr}
 8008072:	4c04      	ldr	r4, [pc, #16]	; (8008084 <_has_ext_exit_extended+0x14>)
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	2a00      	cmp	r2, #0
 8008078:	da01      	bge.n	800807e <_has_ext_exit_extended+0xe>
 800807a:	f7ff ffdf 	bl	800803c <initialise_semihosting_exts>
 800807e:	6820      	ldr	r0, [r4, #0]
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	200004e0 	.word	0x200004e0

08008088 <_has_ext_stdout_stderr>:
 8008088:	b510      	push	{r4, lr}
 800808a:	4c04      	ldr	r4, [pc, #16]	; (800809c <_has_ext_stdout_stderr+0x14>)
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	2a00      	cmp	r2, #0
 8008090:	da01      	bge.n	8008096 <_has_ext_stdout_stderr+0xe>
 8008092:	f7ff ffd3 	bl	800803c <initialise_semihosting_exts>
 8008096:	6820      	ldr	r0, [r4, #0]
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop
 800809c:	200004e4 	.word	0x200004e4

080080a0 <initialise_monitor_handles>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	2303      	movs	r3, #3
 80080a6:	2400      	movs	r4, #0
 80080a8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8008158 <initialise_monitor_handles+0xb8>
 80080ac:	b085      	sub	sp, #20
 80080ae:	f8cd 9004 	str.w	r9, [sp, #4]
 80080b2:	f10d 0804 	add.w	r8, sp, #4
 80080b6:	9303      	str	r3, [sp, #12]
 80080b8:	2501      	movs	r5, #1
 80080ba:	9402      	str	r4, [sp, #8]
 80080bc:	4628      	mov	r0, r5
 80080be:	4641      	mov	r1, r8
 80080c0:	beab      	bkpt	0x00ab
 80080c2:	4605      	mov	r5, r0
 80080c4:	4a20      	ldr	r2, [pc, #128]	; (8008148 <initialise_monitor_handles+0xa8>)
 80080c6:	4623      	mov	r3, r4
 80080c8:	f04f 31ff 	mov.w	r1, #4294967295
 80080cc:	4614      	mov	r4, r2
 80080ce:	4e1f      	ldr	r6, [pc, #124]	; (800814c <initialise_monitor_handles+0xac>)
 80080d0:	6035      	str	r5, [r6, #0]
 80080d2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80080d6:	3301      	adds	r3, #1
 80080d8:	2b14      	cmp	r3, #20
 80080da:	d1fa      	bne.n	80080d2 <initialise_monitor_handles+0x32>
 80080dc:	f7ff ffd4 	bl	8008088 <_has_ext_stdout_stderr>
 80080e0:	4d1b      	ldr	r5, [pc, #108]	; (8008150 <initialise_monitor_handles+0xb0>)
 80080e2:	b1d0      	cbz	r0, 800811a <initialise_monitor_handles+0x7a>
 80080e4:	f04f 0a03 	mov.w	sl, #3
 80080e8:	2304      	movs	r3, #4
 80080ea:	f8cd 9004 	str.w	r9, [sp, #4]
 80080ee:	2701      	movs	r7, #1
 80080f0:	f8cd a00c 	str.w	sl, [sp, #12]
 80080f4:	9302      	str	r3, [sp, #8]
 80080f6:	4638      	mov	r0, r7
 80080f8:	4641      	mov	r1, r8
 80080fa:	beab      	bkpt	0x00ab
 80080fc:	4683      	mov	fp, r0
 80080fe:	4b15      	ldr	r3, [pc, #84]	; (8008154 <initialise_monitor_handles+0xb4>)
 8008100:	f8cd 9004 	str.w	r9, [sp, #4]
 8008104:	f8c3 b000 	str.w	fp, [r3]
 8008108:	2308      	movs	r3, #8
 800810a:	f8cd a00c 	str.w	sl, [sp, #12]
 800810e:	9302      	str	r3, [sp, #8]
 8008110:	4638      	mov	r0, r7
 8008112:	4641      	mov	r1, r8
 8008114:	beab      	bkpt	0x00ab
 8008116:	4607      	mov	r7, r0
 8008118:	602f      	str	r7, [r5, #0]
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	bf02      	ittt	eq
 8008120:	4b0c      	ldreq	r3, [pc, #48]	; (8008154 <initialise_monitor_handles+0xb4>)
 8008122:	681b      	ldreq	r3, [r3, #0]
 8008124:	602b      	streq	r3, [r5, #0]
 8008126:	6833      	ldr	r3, [r6, #0]
 8008128:	2600      	movs	r6, #0
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	6066      	str	r6, [r4, #4]
 800812e:	f7ff ffab 	bl	8008088 <_has_ext_stdout_stderr>
 8008132:	b130      	cbz	r0, 8008142 <initialise_monitor_handles+0xa2>
 8008134:	4b07      	ldr	r3, [pc, #28]	; (8008154 <initialise_monitor_handles+0xb4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8008142:	b005      	add	sp, #20
 8008144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008148:	200005c8 	.word	0x200005c8
 800814c:	200005c0 	.word	0x200005c0
 8008150:	200005bc 	.word	0x200005bc
 8008154:	200005c4 	.word	0x200005c4
 8008158:	080088aa 	.word	0x080088aa

0800815c <_isatty>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	f7ff fd65 	bl	8007c2c <findslot>
 8008162:	2509      	movs	r5, #9
 8008164:	4604      	mov	r4, r0
 8008166:	b920      	cbnz	r0, 8008172 <_isatty+0x16>
 8008168:	f7fd f858 	bl	800521c <__errno>
 800816c:	6005      	str	r5, [r0, #0]
 800816e:	4620      	mov	r0, r4
 8008170:	bd70      	pop	{r4, r5, r6, pc}
 8008172:	4628      	mov	r0, r5
 8008174:	4621      	mov	r1, r4
 8008176:	beab      	bkpt	0x00ab
 8008178:	4604      	mov	r4, r0
 800817a:	2c01      	cmp	r4, #1
 800817c:	d0f7      	beq.n	800816e <_isatty+0x12>
 800817e:	f7fd f84d 	bl	800521c <__errno>
 8008182:	2400      	movs	r4, #0
 8008184:	4605      	mov	r5, r0
 8008186:	2613      	movs	r6, #19
 8008188:	4630      	mov	r0, r6
 800818a:	4621      	mov	r1, r4
 800818c:	beab      	bkpt	0x00ab
 800818e:	4606      	mov	r6, r0
 8008190:	602e      	str	r6, [r5, #0]
 8008192:	e7ec      	b.n	800816e <_isatty+0x12>

08008194 <_exit>:
 8008194:	4601      	mov	r1, r0
 8008196:	b508      	push	{r3, lr}
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	4a01      	ldr	r2, [pc, #4]	; (80081a4 <_exit+0x10>)
 800819e:	f000 f803 	bl	80081a8 <_kill_shared>
 80081a2:	bf00      	nop
 80081a4:	00020026 	.word	0x00020026

080081a8 <_kill_shared>:
 80081a8:	b507      	push	{r0, r1, r2, lr}
 80081aa:	e9cd 2100 	strd	r2, r1, [sp]
 80081ae:	f7ff ff5f 	bl	8008070 <_has_ext_exit_extended>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2420      	movne	r4, #32
 80081b8:	2418      	moveq	r4, #24
 80081ba:	f7ff ff59 	bl	8008070 <_has_ext_exit_extended>
 80081be:	b120      	cbz	r0, 80081ca <_kill_shared+0x22>
 80081c0:	466d      	mov	r5, sp
 80081c2:	4620      	mov	r0, r4
 80081c4:	4629      	mov	r1, r5
 80081c6:	beab      	bkpt	0x00ab
 80081c8:	4604      	mov	r4, r0
 80081ca:	9d00      	ldr	r5, [sp, #0]
 80081cc:	e7f9      	b.n	80081c2 <_kill_shared+0x1a>
	...

080081d0 <_kill>:
 80081d0:	2906      	cmp	r1, #6
 80081d2:	b508      	push	{r3, lr}
 80081d4:	bf0c      	ite	eq
 80081d6:	4a02      	ldreq	r2, [pc, #8]	; (80081e0 <_kill+0x10>)
 80081d8:	4a02      	ldrne	r2, [pc, #8]	; (80081e4 <_kill+0x14>)
 80081da:	f7ff ffe5 	bl	80081a8 <_kill_shared>
 80081de:	bf00      	nop
 80081e0:	00020023 	.word	0x00020023
 80081e4:	00020026 	.word	0x00020026

080081e8 <fmod>:
 80081e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ec:	461f      	mov	r7, r3
 80081ee:	4680      	mov	r8, r0
 80081f0:	4689      	mov	r9, r1
 80081f2:	4616      	mov	r6, r2
 80081f4:	f000 f82e 	bl	8008254 <__ieee754_fmod>
 80081f8:	4b15      	ldr	r3, [pc, #84]	; (8008250 <fmod+0x68>)
 80081fa:	4604      	mov	r4, r0
 80081fc:	f993 3000 	ldrsb.w	r3, [r3]
 8008200:	460d      	mov	r5, r1
 8008202:	3301      	adds	r3, #1
 8008204:	d020      	beq.n	8008248 <fmod+0x60>
 8008206:	4632      	mov	r2, r6
 8008208:	463b      	mov	r3, r7
 800820a:	4630      	mov	r0, r6
 800820c:	4639      	mov	r1, r7
 800820e:	f7f8 fbfd 	bl	8000a0c <__aeabi_dcmpun>
 8008212:	b9c8      	cbnz	r0, 8008248 <fmod+0x60>
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	4640      	mov	r0, r8
 800821a:	4649      	mov	r1, r9
 800821c:	f7f8 fbf6 	bl	8000a0c <__aeabi_dcmpun>
 8008220:	b990      	cbnz	r0, 8008248 <fmod+0x60>
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 fbbd 	bl	80009a8 <__aeabi_dcmpeq>
 800822e:	b158      	cbz	r0, 8008248 <fmod+0x60>
 8008230:	f7fc fff4 	bl	800521c <__errno>
 8008234:	2321      	movs	r3, #33	; 0x21
 8008236:	2200      	movs	r2, #0
 8008238:	6003      	str	r3, [r0, #0]
 800823a:	2300      	movs	r3, #0
 800823c:	4610      	mov	r0, r2
 800823e:	4619      	mov	r1, r3
 8008240:	f7f8 fa74 	bl	800072c <__aeabi_ddiv>
 8008244:	4604      	mov	r4, r0
 8008246:	460d      	mov	r5, r1
 8008248:	4620      	mov	r0, r4
 800824a:	4629      	mov	r1, r5
 800824c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008250:	200004e8 	.word	0x200004e8

08008254 <__ieee754_fmod>:
 8008254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008258:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800825c:	4607      	mov	r7, r0
 800825e:	461d      	mov	r5, r3
 8008260:	4618      	mov	r0, r3
 8008262:	ea58 0302 	orrs.w	r3, r8, r2
 8008266:	460e      	mov	r6, r1
 8008268:	4614      	mov	r4, r2
 800826a:	4694      	mov	ip, r2
 800826c:	4696      	mov	lr, r2
 800826e:	d00d      	beq.n	800828c <__ieee754_fmod+0x38>
 8008270:	4a7b      	ldr	r2, [pc, #492]	; (8008460 <__ieee754_fmod+0x20c>)
 8008272:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008276:	4293      	cmp	r3, r2
 8008278:	468a      	mov	sl, r1
 800827a:	dc07      	bgt.n	800828c <__ieee754_fmod+0x38>
 800827c:	4262      	negs	r2, r4
 800827e:	4979      	ldr	r1, [pc, #484]	; (8008464 <__ieee754_fmod+0x210>)
 8008280:	4322      	orrs	r2, r4
 8008282:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 8008286:	428a      	cmp	r2, r1
 8008288:	460a      	mov	r2, r1
 800828a:	d90c      	bls.n	80082a6 <__ieee754_fmod+0x52>
 800828c:	4603      	mov	r3, r0
 800828e:	4622      	mov	r2, r4
 8008290:	4638      	mov	r0, r7
 8008292:	4631      	mov	r1, r6
 8008294:	f7f8 f920 	bl	80004d8 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	f7f8 fa46 	bl	800072c <__aeabi_ddiv>
 80082a0:	4607      	mov	r7, r0
 80082a2:	460e      	mov	r6, r1
 80082a4:	e00f      	b.n	80082c6 <__ieee754_fmod+0x72>
 80082a6:	4543      	cmp	r3, r8
 80082a8:	46b9      	mov	r9, r7
 80082aa:	4639      	mov	r1, r7
 80082ac:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 80082b0:	dc0d      	bgt.n	80082ce <__ieee754_fmod+0x7a>
 80082b2:	db08      	blt.n	80082c6 <__ieee754_fmod+0x72>
 80082b4:	4567      	cmp	r7, ip
 80082b6:	d306      	bcc.n	80082c6 <__ieee754_fmod+0x72>
 80082b8:	d109      	bne.n	80082ce <__ieee754_fmod+0x7a>
 80082ba:	4a6b      	ldr	r2, [pc, #428]	; (8008468 <__ieee754_fmod+0x214>)
 80082bc:	0fe4      	lsrs	r4, r4, #31
 80082be:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80082c2:	e9d4 7600 	ldrd	r7, r6, [r4]
 80082c6:	4638      	mov	r0, r7
 80082c8:	4631      	mov	r1, r6
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	ea1a 0f02 	tst.w	sl, r2
 80082d2:	d14a      	bne.n	800836a <__ieee754_fmod+0x116>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d141      	bne.n	800835c <__ieee754_fmod+0x108>
 80082d8:	464a      	mov	r2, r9
 80082da:	4864      	ldr	r0, [pc, #400]	; (800846c <__ieee754_fmod+0x218>)
 80082dc:	2a00      	cmp	r2, #0
 80082de:	dc3a      	bgt.n	8008356 <__ieee754_fmod+0x102>
 80082e0:	4a60      	ldr	r2, [pc, #384]	; (8008464 <__ieee754_fmod+0x210>)
 80082e2:	402a      	ands	r2, r5
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	d14f      	bne.n	8008388 <__ieee754_fmod+0x134>
 80082e8:	f1b8 0f00 	cmp.w	r8, #0
 80082ec:	d144      	bne.n	8008378 <__ieee754_fmod+0x124>
 80082ee:	4666      	mov	r6, ip
 80082f0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	dc3c      	bgt.n	8008372 <__ieee754_fmod+0x11e>
 80082f8:	4e5d      	ldr	r6, [pc, #372]	; (8008470 <__ieee754_fmod+0x21c>)
 80082fa:	42b0      	cmp	r0, r6
 80082fc:	db49      	blt.n	8008392 <__ieee754_fmod+0x13e>
 80082fe:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008306:	4e5a      	ldr	r6, [pc, #360]	; (8008470 <__ieee754_fmod+0x21c>)
 8008308:	42b2      	cmp	r2, r6
 800830a:	db54      	blt.n	80083b6 <__ieee754_fmod+0x162>
 800830c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008310:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8008314:	1a80      	subs	r0, r0, r2
 8008316:	1b5e      	subs	r6, r3, r5
 8008318:	eba1 070e 	sub.w	r7, r1, lr
 800831c:	2800      	cmp	r0, #0
 800831e:	d161      	bne.n	80083e4 <__ieee754_fmod+0x190>
 8008320:	4571      	cmp	r1, lr
 8008322:	bf38      	it	cc
 8008324:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8008328:	2e00      	cmp	r6, #0
 800832a:	bfa4      	itt	ge
 800832c:	4639      	movge	r1, r7
 800832e:	4633      	movge	r3, r6
 8008330:	ea53 0001 	orrs.w	r0, r3, r1
 8008334:	d0c1      	beq.n	80082ba <__ieee754_fmod+0x66>
 8008336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800833a:	db68      	blt.n	800840e <__ieee754_fmod+0x1ba>
 800833c:	484c      	ldr	r0, [pc, #304]	; (8008470 <__ieee754_fmod+0x21c>)
 800833e:	4282      	cmp	r2, r0
 8008340:	db6b      	blt.n	800841a <__ieee754_fmod+0x1c6>
 8008342:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008346:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800834a:	431c      	orrs	r4, r3
 800834c:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 8008350:	460f      	mov	r7, r1
 8008352:	464e      	mov	r6, r9
 8008354:	e7b7      	b.n	80082c6 <__ieee754_fmod+0x72>
 8008356:	3801      	subs	r0, #1
 8008358:	0052      	lsls	r2, r2, #1
 800835a:	e7bf      	b.n	80082dc <__ieee754_fmod+0x88>
 800835c:	4844      	ldr	r0, [pc, #272]	; (8008470 <__ieee754_fmod+0x21c>)
 800835e:	02da      	lsls	r2, r3, #11
 8008360:	2a00      	cmp	r2, #0
 8008362:	ddbd      	ble.n	80082e0 <__ieee754_fmod+0x8c>
 8008364:	3801      	subs	r0, #1
 8008366:	0052      	lsls	r2, r2, #1
 8008368:	e7fa      	b.n	8008360 <__ieee754_fmod+0x10c>
 800836a:	1518      	asrs	r0, r3, #20
 800836c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8008370:	e7b6      	b.n	80082e0 <__ieee754_fmod+0x8c>
 8008372:	3a01      	subs	r2, #1
 8008374:	0076      	lsls	r6, r6, #1
 8008376:	e7bd      	b.n	80082f4 <__ieee754_fmod+0xa0>
 8008378:	4a3d      	ldr	r2, [pc, #244]	; (8008470 <__ieee754_fmod+0x21c>)
 800837a:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800837e:	2e00      	cmp	r6, #0
 8008380:	ddba      	ble.n	80082f8 <__ieee754_fmod+0xa4>
 8008382:	3a01      	subs	r2, #1
 8008384:	0076      	lsls	r6, r6, #1
 8008386:	e7fa      	b.n	800837e <__ieee754_fmod+0x12a>
 8008388:	ea4f 5228 	mov.w	r2, r8, asr #20
 800838c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008390:	e7b2      	b.n	80082f8 <__ieee754_fmod+0xa4>
 8008392:	1a31      	subs	r1, r6, r0
 8008394:	291f      	cmp	r1, #31
 8008396:	dc08      	bgt.n	80083aa <__ieee754_fmod+0x156>
 8008398:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800839c:	408b      	lsls	r3, r1
 800839e:	fa29 f606 	lsr.w	r6, r9, r6
 80083a2:	4333      	orrs	r3, r6
 80083a4:	fa09 f101 	lsl.w	r1, r9, r1
 80083a8:	e7ad      	b.n	8008306 <__ieee754_fmod+0xb2>
 80083aa:	4b32      	ldr	r3, [pc, #200]	; (8008474 <__ieee754_fmod+0x220>)
 80083ac:	2100      	movs	r1, #0
 80083ae:	1a1b      	subs	r3, r3, r0
 80083b0:	fa09 f303 	lsl.w	r3, r9, r3
 80083b4:	e7a7      	b.n	8008306 <__ieee754_fmod+0xb2>
 80083b6:	eba6 0e02 	sub.w	lr, r6, r2
 80083ba:	f1be 0f1f 	cmp.w	lr, #31
 80083be:	dc0a      	bgt.n	80083d6 <__ieee754_fmod+0x182>
 80083c0:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 80083c4:	fa08 f80e 	lsl.w	r8, r8, lr
 80083c8:	fa2c f505 	lsr.w	r5, ip, r5
 80083cc:	ea45 0508 	orr.w	r5, r5, r8
 80083d0:	fa0c fe0e 	lsl.w	lr, ip, lr
 80083d4:	e79e      	b.n	8008314 <__ieee754_fmod+0xc0>
 80083d6:	4d27      	ldr	r5, [pc, #156]	; (8008474 <__ieee754_fmod+0x220>)
 80083d8:	f04f 0e00 	mov.w	lr, #0
 80083dc:	1aad      	subs	r5, r5, r2
 80083de:	fa0c f505 	lsl.w	r5, ip, r5
 80083e2:	e797      	b.n	8008314 <__ieee754_fmod+0xc0>
 80083e4:	4571      	cmp	r1, lr
 80083e6:	bf38      	it	cc
 80083e8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	da05      	bge.n	80083fc <__ieee754_fmod+0x1a8>
 80083f0:	0fce      	lsrs	r6, r1, #31
 80083f2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80083f6:	0049      	lsls	r1, r1, #1
 80083f8:	3801      	subs	r0, #1
 80083fa:	e78c      	b.n	8008316 <__ieee754_fmod+0xc2>
 80083fc:	ea56 0307 	orrs.w	r3, r6, r7
 8008400:	f43f af5b 	beq.w	80082ba <__ieee754_fmod+0x66>
 8008404:	0ffb      	lsrs	r3, r7, #31
 8008406:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800840a:	0079      	lsls	r1, r7, #1
 800840c:	e7f4      	b.n	80083f8 <__ieee754_fmod+0x1a4>
 800840e:	0fc8      	lsrs	r0, r1, #31
 8008410:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008414:	0049      	lsls	r1, r1, #1
 8008416:	3a01      	subs	r2, #1
 8008418:	e78d      	b.n	8008336 <__ieee754_fmod+0xe2>
 800841a:	1a80      	subs	r0, r0, r2
 800841c:	2814      	cmp	r0, #20
 800841e:	dc0a      	bgt.n	8008436 <__ieee754_fmod+0x1e2>
 8008420:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008424:	fa03 f202 	lsl.w	r2, r3, r2
 8008428:	40c1      	lsrs	r1, r0
 800842a:	430a      	orrs	r2, r1
 800842c:	4103      	asrs	r3, r0
 800842e:	4610      	mov	r0, r2
 8008430:	ea43 0104 	orr.w	r1, r3, r4
 8008434:	e734      	b.n	80082a0 <__ieee754_fmod+0x4c>
 8008436:	281f      	cmp	r0, #31
 8008438:	dc07      	bgt.n	800844a <__ieee754_fmod+0x1f6>
 800843a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800843e:	40c1      	lsrs	r1, r0
 8008440:	fa03 f202 	lsl.w	r2, r3, r2
 8008444:	430a      	orrs	r2, r1
 8008446:	4623      	mov	r3, r4
 8008448:	e7f1      	b.n	800842e <__ieee754_fmod+0x1da>
 800844a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800844e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008452:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8008456:	32e2      	adds	r2, #226	; 0xe2
 8008458:	fa43 f202 	asr.w	r2, r3, r2
 800845c:	e7f3      	b.n	8008446 <__ieee754_fmod+0x1f2>
 800845e:	bf00      	nop
 8008460:	7fefffff 	.word	0x7fefffff
 8008464:	7ff00000 	.word	0x7ff00000
 8008468:	080088b0 	.word	0x080088b0
 800846c:	fffffbed 	.word	0xfffffbed
 8008470:	fffffc02 	.word	0xfffffc02
 8008474:	fffffbe2 	.word	0xfffffbe2

08008478 <_init>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr

08008484 <_fini>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr
