
doplerAndMatrixUnstable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007748  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08007858  08007858  00017858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb0  08007cb0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb0  08007cb0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb0  08007cb0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e18  200001e4  08007e9c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ffc  08007e9c  00023ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ddf  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d7  00000000  00000000  00029fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f09  00000000  00000000  0002cda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a901  00000000  00000000  00043ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086510  00000000  00000000  0004e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fac  00000000  00000000  000d4b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007840 	.word	0x08007840

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007840 	.word	0x08007840

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile uint32_t tim1_overflows = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    if (htim -> Instance == TIM1) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d104      	bne.n	8001000 <HAL_TIM_PeriodElapsedCallback+0x1c>
        ++tim1_overflows;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ffe:	6013      	str	r3, [r2, #0]
    }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40012c00 	.word	0x40012c00
 8001010:	20000200 	.word	0x20000200

08001014 <TIM1_reinit>:
void TIM1_reinit() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop( & htim1);
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <TIM1_reinit+0x24>)
 800101a:	f001 ff1a 	bl	8002e52 <HAL_TIM_Base_Stop>
    __HAL_TIM_SET_COUNTER( & htim1, 0);
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <TIM1_reinit+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
    tim1_overflows = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <TIM1_reinit+0x28>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT( & htim1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM1_reinit+0x24>)
 800102e:	f001 ff37 	bl	8002ea0 <HAL_TIM_Base_Start_IT>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20003f4c 	.word	0x20003f4c
 800103c:	20000200 	.word	0x20000200

08001040 <pushVelocity>:
int Rise_Captured = 0;

float velocities[4];
int currVelocityIndex = 0;

void pushVelocity(float currVelocity) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	velocities[currVelocityIndex] = currVelocity;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <pushVelocity+0x38>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	490b      	ldr	r1, [pc, #44]	; (800107c <pushVelocity+0x3c>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	currVelocityIndex++;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <pushVelocity+0x38>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <pushVelocity+0x38>)
 800105c:	6013      	str	r3, [r2, #0]
	if (currVelocityIndex > 3){
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <pushVelocity+0x38>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	dd02      	ble.n	800106c <pushVelocity+0x2c>
		currVelocityIndex = 0;
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <pushVelocity+0x38>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
	}
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000214 	.word	0x20000214
 800107c:	20003f94 	.word	0x20003f94

08001080 <averageVelocity>:

float averageVelocity(){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float sum = 0;
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
	for (int i=0;i<4;i++){
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	e00c      	b.n	80010ac <averageVelocity+0x2c>
		sum+= velocities[i];
 8001092:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <averageVelocity+0x48>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fd49 	bl	8000b34 <__addsf3>
 80010a2:	4603      	mov	r3, r0
 80010a4:	607b      	str	r3, [r7, #4]
	for (int i=0;i<4;i++){
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	ddef      	ble.n	8001092 <averageVelocity+0x12>
	}
	return sum/4;
 80010b2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fef8 	bl	8000eac <__aeabi_fdiv>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20003f94 	.word	0x20003f94
 80010cc:	00000000 	.word	0x00000000

080010d0 <HAL_TIM_IC_CaptureCallback>:
float frequency;
float velocity;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim) // is called whenever rising or falling edge is captured

{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt is triggered in channel 1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7f1b      	ldrb	r3, [r3, #28]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 8087 	bne.w	80011f0 <HAL_TIM_IC_CaptureCallback+0x120>
    {
        if (!Rise_Captured) // if the rise time(RiseVal) is not captured, then it is a rising edge
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d11a      	bne.n	8001120 <HAL_TIM_IC_CaptureCallback+0x50>
        {
            RiseVal = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f002 fe4d 	bl	8003d8c <HAL_TIM_ReadCapturedValue>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a43      	ldr	r2, [pc, #268]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010f6:	6013      	str	r3, [r2, #0]

            Rise_Captured = 1;
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
            // Change the polarity to the opposite - falling edge.
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 020a 	bic.w	r2, r2, #10
 800110c:	621a      	str	r2, [r3, #32]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0202 	orr.w	r2, r2, #2
 800111c:	621a      	str	r2, [r3, #32]
            __HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
            TIM1_reinit();
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
        }
    }
}
 800111e:	e067      	b.n	80011f0 <HAL_TIM_IC_CaptureCallback+0x120>
            FallVal = 10000 * tim1_overflows + HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f242 7210 	movw	r2, #10000	; 0x2710
 8001128:	fb02 f403 	mul.w	r4, r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f002 fe2c 	bl	8003d8c <HAL_TIM_ReadCapturedValue>
 8001134:	4603      	mov	r3, r0
 8001136:	4423      	add	r3, r4
 8001138:	4a34      	ldr	r2, [pc, #208]	; (800120c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800113a:	6013      	str	r3, [r2, #0]
            if (FallVal > RiseVal) {
 800113c:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d907      	bls.n	8001158 <HAL_TIM_IC_CaptureCallback+0x88>
                Difference = FallVal - RiseVal; // duration of high
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00f      	b.n	8001178 <HAL_TIM_IC_CaptureCallback+0xa8>
            } else if (RiseVal > FallVal) {
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d909      	bls.n	8001178 <HAL_TIM_IC_CaptureCallback+0xa8>
                Difference = (10000 - RiseVal) + FallVal; // duration of high
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x134>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001172:	3310      	adds	r3, #16
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001176:	6013      	str	r3, [r2, #0]
            Rise_Captured = 0; // change it back to false
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_TIM_IC_CaptureCallback+0x130>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
            frequency = 1000000.0 / Difference;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	a11a      	add	r1, pc, #104	; (adr r1, 80011f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800118e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001192:	f7ff facb 	bl	800072c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x144>)
 80011a6:	6013      	str	r3, [r2, #0]
            velocity = frequency / period_to_frequency;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x144>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x148>)
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe7b 	bl	8000eac <__aeabi_fdiv>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80011bc:	601a      	str	r2, [r3, #0]
            pushVelocity(velocity);
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff3c 	bl	8001040 <pushVelocity>
            __HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
            TIM1_reinit();
 80011d0:	f7ff ff20 	bl	8001014 <TIM1_reinit>
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020a 	bic.w	r2, r2, #10
 80011e2:	621a      	str	r2, [r3, #32]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6a12      	ldr	r2, [r2, #32]
 80011ee:	621a      	str	r2, [r3, #32]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	00000000 	.word	0x00000000
 80011fc:	412e8480 	.word	0x412e8480
 8001200:	20000210 	.word	0x20000210
 8001204:	20000204 	.word	0x20000204
 8001208:	20000200 	.word	0x20000200
 800120c:	20000208 	.word	0x20000208
 8001210:	2000020c 	.word	0x2000020c
 8001214:	200002d4 	.word	0x200002d4
 8001218:	428c7852 	.word	0x428c7852
 800121c:	20003f48 	.word	0x20003f48

08001220 <HAL_TIM_PWM_PulseFinishedCallback>:

int datasentflag=0;  // to make sure that the dma does not send another data while the first data is still transmitted


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)  // this callback is called when data transmission is finished
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);  // stop dma, when the transmission is finished
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800122c:	f002 f87c 	bl	8003328 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002d8 	.word	0x200002d8
 8001244:	20000218 	.word	0x20000218

08001248 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	b2d8      	uxtb	r0, r3
 800125a:	4917      	ldr	r1, [pc, #92]	; (80012b8 <Set_LED+0x70>)
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	440b      	add	r3, r1
 8001266:	4602      	mov	r2, r0
 8001268:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][1] = Green;  // store green first as ws2821b requires this order (g,r,b)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	b2d8      	uxtb	r0, r3
 800126e:	4912      	ldr	r1, [pc, #72]	; (80012b8 <Set_LED+0x70>)
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	440b      	add	r3, r1
 800127a:	3301      	adds	r3, #1
 800127c:	4602      	mov	r2, r0
 800127e:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][2] = Red;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	b2d8      	uxtb	r0, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <Set_LED+0x70>)
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	440b      	add	r3, r1
 8001290:	3302      	adds	r3, #2
 8001292:	4602      	mov	r2, r0
 8001294:	701a      	strb	r2, [r3, #0]
	LED_Data[LEDnum][3] = Blue;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	4907      	ldr	r1, [pc, #28]	; (80012b8 <Set_LED+0x70>)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	4602      	mov	r2, r0
 80012aa:	701a      	strb	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000320 	.word	0x20000320

080012bc <WS2812_Send>:
// uint16_t pwmData[(24*MAX_LED)+50]; // store 24 bits for each led + 50 values for reset code

uint16_t pwmData[(24*MAX_LED) + 50];

void WS2812_Send (void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
	uint32_t color;  //32 bit variable to store 24 bits of color

	for (uint16_t i = 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 80012c6:	2300      	movs	r3, #0
 80012c8:	827b      	strh	r3, [r7, #18]
 80012ca:	e03f      	b.n	800134c <WS2812_Send+0x90>
		{

			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3])); // green red blue
 80012cc:	8a7a      	ldrh	r2, [r7, #18]
 80012ce:	4933      	ldr	r1, [pc, #204]	; (800139c <WS2812_Send+0xe0>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	3301      	adds	r3, #1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	0419      	lsls	r1, r3, #16
 80012de:	8a7a      	ldrh	r2, [r7, #18]
 80012e0:	482e      	ldr	r0, [pc, #184]	; (800139c <WS2812_Send+0xe0>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	4403      	add	r3, r0
 80012ea:	3302      	adds	r3, #2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	4319      	orrs	r1, r3
 80012f2:	8a7b      	ldrh	r3, [r7, #18]
 80012f4:	4829      	ldr	r0, [pc, #164]	; (800139c <WS2812_Send+0xe0>)
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	4403      	add	r3, r0
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	430b      	orrs	r3, r1
 8001304:	607b      	str	r3, [r7, #4]


			for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 8001306:	2317      	movs	r3, #23
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	e019      	b.n	8001340 <WS2812_Send+0x84>
			{
				if (color&(1<<i))
 800130c:	2201      	movs	r2, #1
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <WS2812_Send+0x6e>
				{
					pwmData[indx] = 6; // if the bit is 1, the duty cycle is 64%
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <WS2812_Send+0xe4>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2106      	movs	r1, #6
 8001324:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001328:	e004      	b.n	8001334 <WS2812_Send+0x78>
				}

				else pwmData[indx] = 3;  // if the bit is 0, the duty cycle is 32%
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <WS2812_Send+0xe4>)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2103      	movs	r1, #3
 8001330:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				indx++;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
			for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3b01      	subs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dae2      	bge.n	800130c <WS2812_Send+0x50>
	for (uint16_t i = 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 8001346:	8a7b      	ldrh	r3, [r7, #18]
 8001348:	3301      	adds	r3, #1
 800134a:	827b      	strh	r3, [r7, #18]
 800134c:	8a7b      	ldrh	r3, [r7, #18]
 800134e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001352:	d3bb      	bcc.n	80012cc <WS2812_Send+0x10>
			}

		}
	for (uint16_t i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 8001354:	2300      	movs	r3, #0
 8001356:	817b      	strh	r3, [r7, #10]
 8001358:	e00a      	b.n	8001370 <WS2812_Send+0xb4>
	{
		pwmData[indx] = 0;
 800135a:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <WS2812_Send+0xe4>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2100      	movs	r1, #0
 8001360:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
	for (uint16_t i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 800136a:	897b      	ldrh	r3, [r7, #10]
 800136c:	3301      	adds	r3, #1
 800136e:	817b      	strh	r3, [r7, #10]
 8001370:	897b      	ldrh	r3, [r7, #10]
 8001372:	2b31      	cmp	r3, #49	; 0x31
 8001374:	d9f1      	bls.n	800135a <WS2812_Send+0x9e>
	}
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send the data to the dma
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <WS2812_Send+0xe4>)
 800137c:	2100      	movs	r1, #0
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <WS2812_Send+0xe8>)
 8001380:	f001 fe38 	bl	8002ff4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};  // this flag will be set when the data transmission is finished, dma is stopped and now we can send another data
 8001384:	bf00      	nop
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <WS2812_Send+0xec>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0fb      	beq.n	8001386 <WS2812_Send+0xca>
	datasentflag = 0;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <WS2812_Send+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000320 	.word	0x20000320
 80013a0:	200006a4 	.word	0x200006a4
 80013a4:	200002d8 	.word	0x200002d8
 80013a8:	20000218 	.word	0x20000218

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b08b      	sub	sp, #44	; 0x2c
 80013b0:	af06      	add	r7, sp, #24
int main(void)
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b8:	f000 fba4 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013bc:	f000 f881 	bl	80014c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c0:	f000 f9ae 	bl	8001720 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c4:	f000 f98e 	bl	80016e4 <MX_DMA_Init>
  MX_TIM1_Init();
 80013c8:	f000 f8c0 	bl	800154c <MX_TIM1_Init>
  MX_TIM4_Init();
 80013cc:	f000 f914 	bl	80015f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
    initialise_monitor_handles();
 80013d0:	f006 f992 	bl	80076f8 <initialise_monitor_handles>
    HAL_TIM_IC_Start_IT( & htim1, TIM_CHANNEL_1); // start input capture in interrupt mode for timer 1
 80013d4:	2100      	movs	r1, #0
 80013d6:	4827      	ldr	r0, [pc, #156]	; (8001474 <main+0xc8>)
 80013d8:	f002 f8b4 	bl	8003544 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT( & htim1, TIM_IT_CC1);
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <main+0xc8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <main+0xc8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0202 	orr.w	r2, r2, #2
 80013ea:	60da      	str	r2, [r3, #12]

    uint32_t analysis_next = HAL_GetTick();
 80013ec:	f000 fbe2 	bl	8001bb4 <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]
//			sec_num_id++;
//    	}
//    }


    WS_FullSet();
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	469c      	mov	ip, r3
 80013f6:	f000 f849 	bl	800148c <WS_FullSet.6067>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

        if (HAL_GetTick() >= analysis_next) {
 80013fa:	f000 fbdb 	bl	8001bb4 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4293      	cmp	r3, r2
 8001404:	d8f9      	bhi.n	80013fa <main+0x4e>
            __HAL_TIM_DISABLE_IT( & htim1, TIM_IT_CC1);
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <main+0xc8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <main+0xc8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0202 	bic.w	r2, r2, #2
 8001414:	60da      	str	r2, [r3, #12]
            float avgVel = averageVelocity();
 8001416:	f7ff fe33 	bl	8001080 <averageVelocity>
 800141a:	60b8      	str	r0, [r7, #8]
//            float mode_vel = modeVelocity();
            // printf("%f %f %f %f \n",velocities[0],velocities[1],velocities[2],velocities[3]);
            //printf("2123Velocity: %.2f, freq: %.2f Riseval %d Fall %d  Diff %d \n", avgVel, frequency, RiseVal, FallVal, Difference);

            printf("Velocity: %.2f, freq: %.2f Riseval %d Fall %d  Diff %d \n", avgVel, frequency, RiseVal, FallVal, Difference);
 800141c:	68b8      	ldr	r0, [r7, #8]
 800141e:	f7ff f803 	bl	8000428 <__aeabi_f2d>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <main+0xcc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fffc 	bl	8000428 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <main+0xd0>)
 8001436:	6809      	ldr	r1, [r1, #0]
 8001438:	4811      	ldr	r0, [pc, #68]	; (8001480 <main+0xd4>)
 800143a:	6800      	ldr	r0, [r0, #0]
 800143c:	4e11      	ldr	r6, [pc, #68]	; (8001484 <main+0xd8>)
 800143e:	6836      	ldr	r6, [r6, #0]
 8001440:	9604      	str	r6, [sp, #16]
 8001442:	9003      	str	r0, [sp, #12]
 8001444:	9102      	str	r1, [sp, #8]
 8001446:	e9cd 2300 	strd	r2, r3, [sp]
 800144a:	4622      	mov	r2, r4
 800144c:	462b      	mov	r3, r5
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <main+0xdc>)
 8001450:	f003 fe8a 	bl	8005168 <iprintf>


            analysis_next = HAL_GetTick() + analysis_every;
 8001454:	f000 fbae 	bl	8001bb4 <HAL_GetTick>
 8001458:	4603      	mov	r3, r0
 800145a:	2264      	movs	r2, #100	; 0x64
 800145c:	4413      	add	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
            __HAL_TIM_ENABLE_IT( & htim1, TIM_IT_CC1);
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <main+0xc8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	4b03      	ldr	r3, [pc, #12]	; (8001474 <main+0xc8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0202 	orr.w	r2, r2, #2
 800146e:	60da      	str	r2, [r3, #12]
        if (HAL_GetTick() >= analysis_next) {
 8001470:	e7c3      	b.n	80013fa <main+0x4e>
 8001472:	bf00      	nop
 8001474:	20003f4c 	.word	0x20003f4c
 8001478:	200002d4 	.word	0x200002d4
 800147c:	20000204 	.word	0x20000204
 8001480:	20000208 	.word	0x20000208
 8001484:	2000020c 	.word	0x2000020c
 8001488:	08007858 	.word	0x08007858

0800148c <WS_FullSet.6067>:
    void WS_FullSet(){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	f8c7 c004 	str.w	ip, [r7, #4]
        for (uint16_t i=0; i < MAX_LED; i++){
 8001496:	2300      	movs	r3, #0
 8001498:	81fb      	strh	r3, [r7, #14]
 800149a:	e008      	b.n	80014ae <WS_FullSet.6067+0x22>
            Set_LED(i, 254, 0, 0);
 800149c:	89f8      	ldrh	r0, [r7, #14]
 800149e:	2300      	movs	r3, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	21fe      	movs	r1, #254	; 0xfe
 80014a4:	f7ff fed0 	bl	8001248 <Set_LED>
        for (uint16_t i=0; i < MAX_LED; i++){
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	3301      	adds	r3, #1
 80014ac:	81fb      	strh	r3, [r7, #14]
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014b4:	d3f2      	bcc.n	800149c <WS_FullSet.6067+0x10>
        WS2812_Send();
 80014b6:	f7ff ff01 	bl	80012bc <WS2812_Send>
    }
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b090      	sub	sp, #64	; 0x40
 80014c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2228      	movs	r2, #40	; 0x28
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 f9e1 	bl	8004898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f2:	2301      	movs	r3, #1
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001500:	2300      	movs	r3, #0
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4618      	mov	r0, r3
 800150a:	f001 f86b 	bl	80025e4 <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001514:	f000 f95c 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	230f      	movs	r3, #15
 800151a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151c:	2302      	movs	r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fad6 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800153e:	f000 f947 	bl	80017d0 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3740      	adds	r7, #64	; 0x40
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_TIM1_Init+0xa4>)
 800156a:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <MX_TIM1_Init+0xa8>)
 800156c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_TIM1_Init+0xa4>)
 8001570:	2207      	movs	r2, #7
 8001572:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_TIM1_Init+0xa4>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_TIM1_Init+0xa4>)
 800157c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001580:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM1_Init+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_TIM1_Init+0xa4>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_TIM1_Init+0xa4>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001594:	4816      	ldr	r0, [pc, #88]	; (80015f0 <MX_TIM1_Init+0xa4>)
 8001596:	f001 ff85 	bl	80034a4 <HAL_TIM_IC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015a0:	f000 f916 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <MX_TIM1_Init+0xa4>)
 80015b4:	f003 f8d6 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015be:	f000 f907 	bl	80017d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015c6:	2301      	movs	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_TIM1_Init+0xa4>)
 80015da:	f002 f9c1 	bl	8003960 <HAL_TIM_IC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80015e4:	f000 f8f4 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20003f4c 	.word	0x20003f4c
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001628:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <MX_TIM4_Init+0xe4>)
 800162a:	4a2d      	ldr	r2, [pc, #180]	; (80016e0 <MX_TIM4_Init+0xe8>)
 800162c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <MX_TIM4_Init+0xe4>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MX_TIM4_Init+0xe4>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90-1;
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <MX_TIM4_Init+0xe4>)
 800163c:	2259      	movs	r2, #89	; 0x59
 800163e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <MX_TIM4_Init+0xe4>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <MX_TIM4_Init+0xe4>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164c:	4823      	ldr	r0, [pc, #140]	; (80016dc <MX_TIM4_Init+0xe4>)
 800164e:	f001 fbb1 	bl	8002db4 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001658:	f000 f8ba 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	4619      	mov	r1, r3
 8001668:	481c      	ldr	r0, [pc, #112]	; (80016dc <MX_TIM4_Init+0xe4>)
 800166a:	f002 facb 	bl	8003c04 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001674:	f000 f8ac 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001678:	4818      	ldr	r0, [pc, #96]	; (80016dc <MX_TIM4_Init+0xe4>)
 800167a:	f001 fc63 	bl	8002f44 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001684:	f000 f8a4 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	4619      	mov	r1, r3
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <MX_TIM4_Init+0xe4>)
 8001698:	f003 f864 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80016a2:	f000 f895 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	; 0x60
 80016a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <MX_TIM4_Init+0xe4>)
 80016be:	f002 f9e3 	bl	8003a88 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80016c8:	f000 f882 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <MX_TIM4_Init+0xe4>)
 80016ce:	f000 f949 	bl	8001964 <HAL_TIM_MspPostInit>

}
 80016d2:	bf00      	nop
 80016d4:	3738      	adds	r7, #56	; 0x38
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002d8 	.word	0x200002d8
 80016e0:	40000800 	.word	0x40000800

080016e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_DMA_Init+0x38>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <MX_DMA_Init+0x38>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_DMA_Init+0x38>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	200b      	movs	r0, #11
 8001708:	f000 fb35 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800170c:	200b      	movs	r0, #11
 800170e:	f000 fb4e 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <MX_GPIO_Init+0xa8>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <MX_GPIO_Init+0xa8>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_GPIO_Init+0xa8>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_GPIO_Init+0xa8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <MX_GPIO_Init+0xa8>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_GPIO_Init+0xa8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_GPIO_Init+0xa8>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <MX_GPIO_Init+0xa8>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_GPIO_Init+0xa8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_GPIO_Init+0xa8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <MX_GPIO_Init+0xa8>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_GPIO_Init+0xa8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_GPIO_Init+0xac>)
 800179c:	f000 ff0a 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_GPIO_Init+0xac>)
 80017ba:	f000 fd77 	bl	80022ac <HAL_GPIO_Init>

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40011000 	.word	0x40011000

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_MspInit+0x5c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x5c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_MspInit+0x60>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_MspInit+0x60>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000

08001840 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1a      	ldr	r2, [pc, #104]	; (80018c4 <HAL_TIM_IC_MspInit+0x84>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d12c      	bne.n	80018ba <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_TIM_IC_MspInit+0x88>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_TIM_IC_MspInit+0x88>)
 8001866:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_TIM_IC_MspInit+0x88>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_TIM_IC_MspInit+0x88>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <HAL_TIM_IC_MspInit+0x88>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_TIM_IC_MspInit+0x88>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FOUT_Pin;
 8001890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(FOUT_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <HAL_TIM_IC_MspInit+0x8c>)
 80018a6:	f000 fd01 	bl	80022ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	201b      	movs	r0, #27
 80018b0:	f000 fa61 	bl	8001d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018b4:	201b      	movs	r0, #27
 80018b6:	f000 fa7a 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_TIM_Base_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d133      	bne.n	800194a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_TIM_Base_MspInit+0x88>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_TIM_Base_MspInit+0x88>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_TIM_Base_MspInit+0x88>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 80018fc:	4a18      	ldr	r2, [pc, #96]	; (8001960 <HAL_TIM_Base_MspInit+0x90>)
 80018fe:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 8001902:	2210      	movs	r2, #16
 8001904:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 8001914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001918:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 800191c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001920:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 8001924:	2220      	movs	r2, #32
 8001926:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800192e:	480b      	ldr	r0, [pc, #44]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 8001930:	f000 fa58 	bl	8001de4 <HAL_DMA_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800193a:	f7ff ff49 	bl	80017d0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_TIM_Base_MspInit+0x8c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40000800 	.word	0x40000800
 8001958:	40021000 	.word	0x40021000
 800195c:	20003fa4 	.word	0x20003fa4
 8001960:	40020008 	.word	0x40020008

08001964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_TIM_MspPostInit+0x58>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d117      	bne.n	80019b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_TIM_MspPostInit+0x5c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_TIM_MspPostInit+0x5c>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_TIM_MspPostInit+0x5c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800199c:	2340      	movs	r3, #64	; 0x40
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_TIM_MspPostInit+0x60>)
 80019b0:	f000 fc7c 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40000800 	.word	0x40000800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010c00 	.word	0x40010c00

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <NMI_Handler+0x4>

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f8bf 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA1_Channel1_IRQHandler+0x10>)
 8001a1e:	f000 fb11 	bl	8002044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20003fa4 	.word	0x20003fa4

08001a2c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM1_CC_IRQHandler+0x10>)
 8001a32:	f001 fe8d 	bl	8003750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20003f4c 	.word	0x20003f4c

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f002 fee8 	bl	8004844 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20005000 	.word	0x20005000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	2000021c 	.word	0x2000021c
 8001aa8:	20004000 	.word	0x20004000

08001aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	; (8001af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ade:	f7ff ffe5 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f002 feb5 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ae6:	f7ff fc61 	bl	80013ac <main>
  bx lr
 8001aea:	4770      	bx	lr
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001af4:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 8001af8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001afc:	20003ffc 	.word	0x20003ffc

08001b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_2_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_Init+0x28>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_Init+0x28>)
 8001b0e:	f043 0310 	orr.w	r3, r3, #16
 8001b12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f923 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f808 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b20:	f7ff fe5c 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x58>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f93b 	bl	8001dca <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00e      	b.n	8001b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d80a      	bhi.n	8001b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f000 f903 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_InitTick+0x5c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_IncTick+0x1c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <HAL_IncTick+0x20>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	20003fe8 	.word	0x20003fe8

08001bb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <HAL_GetTick+0x10>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20003fe8 	.word	0x20003fe8

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4906      	ldr	r1, [pc, #24]	; (8001c60 <__NVIC_EnableIRQ+0x34>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff90 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff2d 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff42 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff90 	bl	8001cb8 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5f 	bl	8001c64 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff35 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e043      	b.n	8001e82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_DMA_Init+0xa8>)
 8001e02:	4413      	add	r3, r2
 8001e04:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_DMA_Init+0xac>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	009a      	lsls	r2, r3, #2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_DMA_Init+0xb0>)
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	bffdfff8 	.word	0xbffdfff8
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Start_IT+0x20>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e04a      	b.n	8001f4e <HAL_DMA_Start_IT+0xb6>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d13a      	bne.n	8001f40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f9ae 	bl	8002250 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 020e 	orr.w	r2, r2, #14
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e00f      	b.n	8001f2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0204 	bic.w	r2, r2, #4
 8001f1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 020a 	orr.w	r2, r2, #10
 8001f2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e005      	b.n	8001f4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d005      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e051      	b.n	800201e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 020e 	bic.w	r2, r2, #14
 8001f88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_DMA_Abort_IT+0xd0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d029      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0xa0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_DMA_Abort_IT+0xd4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x9c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_DMA_Abort_IT+0xd8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d01a      	beq.n	8001fee <HAL_DMA_Abort_IT+0x96>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_DMA_Abort_IT+0xdc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d012      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x90>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_DMA_Abort_IT+0xe0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00a      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x8a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_DMA_Abort_IT+0xe4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d102      	bne.n	8001fdc <HAL_DMA_Abort_IT+0x84>
 8001fd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fda:	e00e      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe0:	e00b      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe6:	e008      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	e005      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff2:	e002      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_DMA_Abort_IT+0xe8>)
 8001ffc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
    } 
  }
  return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020008 	.word	0x40020008
 800202c:	4002001c 	.word	0x4002001c
 8002030:	40020030 	.word	0x40020030
 8002034:	40020044 	.word	0x40020044
 8002038:	40020058 	.word	0x40020058
 800203c:	4002006c 	.word	0x4002006c
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2204      	movs	r2, #4
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d04f      	beq.n	800210c <HAL_DMA_IRQHandler+0xc8>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d04a      	beq.n	800210c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0204 	bic.w	r2, r2, #4
 8002092:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a66      	ldr	r2, [pc, #408]	; (8002234 <HAL_DMA_IRQHandler+0x1f0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d029      	beq.n	80020f2 <HAL_DMA_IRQHandler+0xae>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a65      	ldr	r2, [pc, #404]	; (8002238 <HAL_DMA_IRQHandler+0x1f4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_IRQHandler+0xaa>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_DMA_IRQHandler+0x1f8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01a      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xa4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a62      	ldr	r2, [pc, #392]	; (8002240 <HAL_DMA_IRQHandler+0x1fc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d012      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x9e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a60      	ldr	r2, [pc, #384]	; (8002244 <HAL_DMA_IRQHandler+0x200>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x98>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5f      	ldr	r2, [pc, #380]	; (8002248 <HAL_DMA_IRQHandler+0x204>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d102      	bne.n	80020d6 <HAL_DMA_IRQHandler+0x92>
 80020d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020d4:	e00e      	b.n	80020f4 <HAL_DMA_IRQHandler+0xb0>
 80020d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020da:	e00b      	b.n	80020f4 <HAL_DMA_IRQHandler+0xb0>
 80020dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020e0:	e008      	b.n	80020f4 <HAL_DMA_IRQHandler+0xb0>
 80020e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020e6:	e005      	b.n	80020f4 <HAL_DMA_IRQHandler+0xb0>
 80020e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ec:	e002      	b.n	80020f4 <HAL_DMA_IRQHandler+0xb0>
 80020ee:	2340      	movs	r3, #64	; 0x40
 80020f0:	e000      	b.n	80020f4 <HAL_DMA_IRQHandler+0xb0>
 80020f2:	2304      	movs	r3, #4
 80020f4:	4a55      	ldr	r2, [pc, #340]	; (800224c <HAL_DMA_IRQHandler+0x208>)
 80020f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8094 	beq.w	800222a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800210a:	e08e      	b.n	800222a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2202      	movs	r2, #2
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d056      	beq.n	80021ca <HAL_DMA_IRQHandler+0x186>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d051      	beq.n	80021ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 020a 	bic.w	r2, r2, #10
 8002142:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a38      	ldr	r2, [pc, #224]	; (8002234 <HAL_DMA_IRQHandler+0x1f0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d029      	beq.n	80021aa <HAL_DMA_IRQHandler+0x166>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a37      	ldr	r2, [pc, #220]	; (8002238 <HAL_DMA_IRQHandler+0x1f4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x162>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a35      	ldr	r2, [pc, #212]	; (800223c <HAL_DMA_IRQHandler+0x1f8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x15c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a34      	ldr	r2, [pc, #208]	; (8002240 <HAL_DMA_IRQHandler+0x1fc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d012      	beq.n	800219a <HAL_DMA_IRQHandler+0x156>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a32      	ldr	r2, [pc, #200]	; (8002244 <HAL_DMA_IRQHandler+0x200>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00a      	beq.n	8002194 <HAL_DMA_IRQHandler+0x150>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a31      	ldr	r2, [pc, #196]	; (8002248 <HAL_DMA_IRQHandler+0x204>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d102      	bne.n	800218e <HAL_DMA_IRQHandler+0x14a>
 8002188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800218c:	e00e      	b.n	80021ac <HAL_DMA_IRQHandler+0x168>
 800218e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002192:	e00b      	b.n	80021ac <HAL_DMA_IRQHandler+0x168>
 8002194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002198:	e008      	b.n	80021ac <HAL_DMA_IRQHandler+0x168>
 800219a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219e:	e005      	b.n	80021ac <HAL_DMA_IRQHandler+0x168>
 80021a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a4:	e002      	b.n	80021ac <HAL_DMA_IRQHandler+0x168>
 80021a6:	2320      	movs	r3, #32
 80021a8:	e000      	b.n	80021ac <HAL_DMA_IRQHandler+0x168>
 80021aa:	2302      	movs	r3, #2
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_DMA_IRQHandler+0x208>)
 80021ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d034      	beq.n	800222a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021c8:	e02f      	b.n	800222a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2208      	movs	r2, #8
 80021d0:	409a      	lsls	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d028      	beq.n	800222c <HAL_DMA_IRQHandler+0x1e8>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d023      	beq.n	800222c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 020e 	bic.w	r2, r2, #14
 80021f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
    }
  }
  return;
 800222a:	bf00      	nop
 800222c:	bf00      	nop
}
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40020008 	.word	0x40020008
 8002238:	4002001c 	.word	0x4002001c
 800223c:	40020030 	.word	0x40020030
 8002240:	40020044 	.word	0x40020044
 8002244:	40020058 	.word	0x40020058
 8002248:	4002006c 	.word	0x4002006c
 800224c:	40020000 	.word	0x40020000

08002250 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d108      	bne.n	8002290 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800228e:	e007      	b.n	80022a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b08b      	sub	sp, #44	; 0x2c
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e169      	b.n	8002594 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c0:	2201      	movs	r2, #1
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8158 	bne.w	800258e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a9a      	ldr	r2, [pc, #616]	; (800254c <HAL_GPIO_Init+0x2a0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d05e      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 80022e8:	4a98      	ldr	r2, [pc, #608]	; (800254c <HAL_GPIO_Init+0x2a0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d875      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 80022ee:	4a98      	ldr	r2, [pc, #608]	; (8002550 <HAL_GPIO_Init+0x2a4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d058      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 80022f4:	4a96      	ldr	r2, [pc, #600]	; (8002550 <HAL_GPIO_Init+0x2a4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d86f      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 80022fa:	4a96      	ldr	r2, [pc, #600]	; (8002554 <HAL_GPIO_Init+0x2a8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d052      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 8002300:	4a94      	ldr	r2, [pc, #592]	; (8002554 <HAL_GPIO_Init+0x2a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d869      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002306:	4a94      	ldr	r2, [pc, #592]	; (8002558 <HAL_GPIO_Init+0x2ac>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d04c      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 800230c:	4a92      	ldr	r2, [pc, #584]	; (8002558 <HAL_GPIO_Init+0x2ac>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d863      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002312:	4a92      	ldr	r2, [pc, #584]	; (800255c <HAL_GPIO_Init+0x2b0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d046      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
 8002318:	4a90      	ldr	r2, [pc, #576]	; (800255c <HAL_GPIO_Init+0x2b0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d85d      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 800231e:	2b12      	cmp	r3, #18
 8002320:	d82a      	bhi.n	8002378 <HAL_GPIO_Init+0xcc>
 8002322:	2b12      	cmp	r3, #18
 8002324:	d859      	bhi.n	80023da <HAL_GPIO_Init+0x12e>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <HAL_GPIO_Init+0x80>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	080023a7 	.word	0x080023a7
 8002330:	08002381 	.word	0x08002381
 8002334:	08002393 	.word	0x08002393
 8002338:	080023d5 	.word	0x080023d5
 800233c:	080023db 	.word	0x080023db
 8002340:	080023db 	.word	0x080023db
 8002344:	080023db 	.word	0x080023db
 8002348:	080023db 	.word	0x080023db
 800234c:	080023db 	.word	0x080023db
 8002350:	080023db 	.word	0x080023db
 8002354:	080023db 	.word	0x080023db
 8002358:	080023db 	.word	0x080023db
 800235c:	080023db 	.word	0x080023db
 8002360:	080023db 	.word	0x080023db
 8002364:	080023db 	.word	0x080023db
 8002368:	080023db 	.word	0x080023db
 800236c:	080023db 	.word	0x080023db
 8002370:	08002389 	.word	0x08002389
 8002374:	0800239d 	.word	0x0800239d
 8002378:	4a79      	ldr	r2, [pc, #484]	; (8002560 <HAL_GPIO_Init+0x2b4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800237e:	e02c      	b.n	80023da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e029      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	3304      	adds	r3, #4
 800238e:	623b      	str	r3, [r7, #32]
          break;
 8002390:	e024      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	3308      	adds	r3, #8
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e01f      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	330c      	adds	r3, #12
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e01a      	b.n	80023dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ae:	2304      	movs	r3, #4
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e013      	b.n	80023dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023bc:	2308      	movs	r3, #8
 80023be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	611a      	str	r2, [r3, #16]
          break;
 80023c6:	e009      	b.n	80023dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c8:	2308      	movs	r3, #8
 80023ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	615a      	str	r2, [r3, #20]
          break;
 80023d2:	e003      	b.n	80023dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
          break;
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x130>
          break;
 80023da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2bff      	cmp	r3, #255	; 0xff
 80023e0:	d801      	bhi.n	80023e6 <HAL_GPIO_Init+0x13a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	e001      	b.n	80023ea <HAL_GPIO_Init+0x13e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2bff      	cmp	r3, #255	; 0xff
 80023f0:	d802      	bhi.n	80023f8 <HAL_GPIO_Init+0x14c>
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x152>
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3b08      	subs	r3, #8
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	210f      	movs	r1, #15
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	401a      	ands	r2, r3
 8002410:	6a39      	ldr	r1, [r7, #32]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80b1 	beq.w	800258e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800242c:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <HAL_GPIO_Init+0x2b8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_GPIO_Init+0x2b8>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b4a      	ldr	r3, [pc, #296]	; (8002564 <HAL_GPIO_Init+0x2b8>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_GPIO_Init+0x2bc>)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a40      	ldr	r2, [pc, #256]	; (800256c <HAL_GPIO_Init+0x2c0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_Init+0x1ec>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3f      	ldr	r2, [pc, #252]	; (8002570 <HAL_GPIO_Init+0x2c4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1e8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3e      	ldr	r2, [pc, #248]	; (8002574 <HAL_GPIO_Init+0x2c8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1e4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3d      	ldr	r2, [pc, #244]	; (8002578 <HAL_GPIO_Init+0x2cc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1e0>
 8002488:	2303      	movs	r3, #3
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 800248c:	2304      	movs	r3, #4
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002498:	2300      	movs	r3, #0
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024aa:	492f      	ldr	r1, [pc, #188]	; (8002568 <HAL_GPIO_Init+0x2bc>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	492c      	ldr	r1, [pc, #176]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4928      	ldr	r1, [pc, #160]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4922      	ldr	r1, [pc, #136]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_GPIO_Init+0x2d0>)
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	491e      	ldr	r1, [pc, #120]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002504:	4013      	ands	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	4918      	ldr	r1, [pc, #96]	; (800257c <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4914      	ldr	r1, [pc, #80]	; (800257c <HAL_GPIO_Init+0x2d0>)
 800252c:	4013      	ands	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_GPIO_Init+0x2d0>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_GPIO_Init+0x2d0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
 8002548:	e021      	b.n	800258e <HAL_GPIO_Init+0x2e2>
 800254a:	bf00      	nop
 800254c:	10320000 	.word	0x10320000
 8002550:	10310000 	.word	0x10310000
 8002554:	10220000 	.word	0x10220000
 8002558:	10210000 	.word	0x10210000
 800255c:	10120000 	.word	0x10120000
 8002560:	10110000 	.word	0x10110000
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	40010800 	.word	0x40010800
 8002570:	40010c00 	.word	0x40010c00
 8002574:	40011000 	.word	0x40011000
 8002578:	40011400 	.word	0x40011400
 800257c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_GPIO_Init+0x304>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	43db      	mvns	r3, r3
 8002588:	4909      	ldr	r1, [pc, #36]	; (80025b0 <HAL_GPIO_Init+0x304>)
 800258a:	4013      	ands	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f47f ae8e 	bne.w	80022c0 <HAL_GPIO_Init+0x14>
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	372c      	adds	r7, #44	; 0x2c
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025d0:	e003      	b.n	80025da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e26c      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8087 	beq.w	8002712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002604:	4b92      	ldr	r3, [pc, #584]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b04      	cmp	r3, #4
 800260e:	d00c      	beq.n	800262a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002610:	4b8f      	ldr	r3, [pc, #572]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d112      	bne.n	8002642 <HAL_RCC_OscConfig+0x5e>
 800261c:	4b8c      	ldr	r3, [pc, #560]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d10b      	bne.n	8002642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262a:	4b89      	ldr	r3, [pc, #548]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d06c      	beq.n	8002710 <HAL_RCC_OscConfig+0x12c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d168      	bne.n	8002710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e246      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x76>
 800264c:	4b80      	ldr	r3, [pc, #512]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a7f      	ldr	r2, [pc, #508]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e02e      	b.n	80026b8 <HAL_RCC_OscConfig+0xd4>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x98>
 8002662:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a7a      	ldr	r2, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b78      	ldr	r3, [pc, #480]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a77      	ldr	r2, [pc, #476]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xd4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0xbc>
 8002686:	4b72      	ldr	r3, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a71      	ldr	r2, [pc, #452]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xd4>
 80026a0:	4b6b      	ldr	r3, [pc, #428]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6a      	ldr	r2, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b68      	ldr	r3, [pc, #416]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a67      	ldr	r2, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff fa78 	bl	8001bb4 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff fa74 	bl	8001bb4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1fa      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b5d      	ldr	r3, [pc, #372]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe4>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fa64 	bl	8001bb4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fa60 	bl	8001bb4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1e6      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b53      	ldr	r3, [pc, #332]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x10c>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271e:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800272a:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x18c>
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x176>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1ba      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4939      	ldr	r1, [pc, #228]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e03a      	b.n	80027e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_RCC_OscConfig+0x270>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7ff fa19 	bl	8001bb4 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7ff fa15 	bl	8001bb4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e19b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4927      	ldr	r1, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_RCC_OscConfig+0x270>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7ff f9f8 	bl	8001bb4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7ff f9f4 	bl	8001bb4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e17a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d03a      	beq.n	8002868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d019      	beq.n	800282e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7ff f9d8 	bl	8001bb4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002808:	f7ff f9d4 	bl	8001bb4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e15a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002826:	2001      	movs	r0, #1
 8002828:	f000 faa6 	bl	8002d78 <RCC_Delay>
 800282c:	e01c      	b.n	8002868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_RCC_OscConfig+0x274>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7ff f9be 	bl	8001bb4 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283a:	e00f      	b.n	800285c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff f9ba 	bl	8001bb4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d908      	bls.n	800285c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e140      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	42420000 	.word	0x42420000
 8002858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	4b9e      	ldr	r3, [pc, #632]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e9      	bne.n	800283c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80a6 	beq.w	80029c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b97      	ldr	r3, [pc, #604]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10d      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b94      	ldr	r3, [pc, #592]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a93      	ldr	r2, [pc, #588]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b91      	ldr	r3, [pc, #580]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b8e      	ldr	r3, [pc, #568]	; (8002adc <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a8a      	ldr	r2, [pc, #552]	; (8002adc <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7ff f97b 	bl	8001bb4 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7ff f977 	bl	8001bb4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b64      	cmp	r3, #100	; 0x64
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0fd      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x312>
 80028e8:	4b7b      	ldr	r3, [pc, #492]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a7a      	ldr	r2, [pc, #488]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	e02d      	b.n	8002952 <HAL_RCC_OscConfig+0x36e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x334>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a72      	ldr	r2, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
 8002916:	e01c      	b.n	8002952 <HAL_RCC_OscConfig+0x36e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d10c      	bne.n	800293a <HAL_RCC_OscConfig+0x356>
 8002920:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a6c      	ldr	r2, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a69      	ldr	r2, [pc, #420]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	e00b      	b.n	8002952 <HAL_RCC_OscConfig+0x36e>
 800293a:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a66      	ldr	r2, [pc, #408]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6213      	str	r3, [r2, #32]
 8002946:	4b64      	ldr	r3, [pc, #400]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a63      	ldr	r2, [pc, #396]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d015      	beq.n	8002986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff f92b 	bl	8001bb4 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7ff f927 	bl	8001bb4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0ab      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ee      	beq.n	8002962 <HAL_RCC_OscConfig+0x37e>
 8002984:	e014      	b.n	80029b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7ff f915 	bl	8001bb4 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7ff f911 	bl	8001bb4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e095      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a4:	4b4c      	ldr	r3, [pc, #304]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ee      	bne.n	800298e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d105      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b6:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4a47      	ldr	r2, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8081 	beq.w	8002ace <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029cc:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d061      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d146      	bne.n	8002a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e0:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_OscConfig+0x4fc>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7ff f8e5 	bl	8001bb4 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7ff f8e1 	bl	8001bb4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e067      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d108      	bne.n	8002a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	492d      	ldr	r1, [pc, #180]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a19      	ldr	r1, [r3, #32]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	4927      	ldr	r1, [pc, #156]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_RCC_OscConfig+0x4fc>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7ff f8b5 	bl	8001bb4 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7ff f8b1 	bl	8001bb4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e037      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x46a>
 8002a6c:	e02f      	b.n	8002ace <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_RCC_OscConfig+0x4fc>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff f89e 	bl	8001bb4 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7ff f89a 	bl	8001bb4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e020      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x498>
 8002a9a:	e018      	b.n	8002ace <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e013      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	42420060 	.word	0x42420060

08002ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d0      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b6a      	ldr	r3, [pc, #424]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d910      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4965      	ldr	r1, [pc, #404]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d040      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d115      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e073      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4936      	ldr	r1, [pc, #216]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe ffee 	bl	8001bb4 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fe ffea 	bl	8001bb4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e053      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 020c 	and.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1eb      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d210      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4922      	ldr	r1, [pc, #136]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f821 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490a      	ldr	r1, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe ff4c 	bl	8001b30 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	080078a4 	.word	0x080078a4
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b490      	push	{r4, r7}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cc0:	1d3c      	adds	r4, r7, #4
 8002cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cc8:	f240 2301 	movw	r3, #513	; 0x201
 8002ccc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x46>
 8002cf6:	e02d      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cfa:	623b      	str	r3, [r7, #32]
      break;
 8002cfc:	e02d      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0c5b      	lsrs	r3, r3, #17
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d36:	fb02 f203 	mul.w	r2, r2, r3
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e004      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	623b      	str	r3, [r7, #32]
      break;
 8002d52:	e002      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d56:	623b      	str	r3, [r7, #32]
      break;
 8002d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc90      	pop	{r4, r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	08007894 	.word	0x08007894
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	007a1200 	.word	0x007a1200
 8002d74:	003d0900 	.word	0x003d0900

08002d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <RCC_Delay+0x34>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <RCC_Delay+0x38>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0a5b      	lsrs	r3, r3, #9
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d94:	bf00      	nop
  }
  while (Delay --);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	60fa      	str	r2, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <RCC_Delay+0x1c>
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	20000000 	.word	0x20000000
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e041      	b.n	8002e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fd78 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f001 f904 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <HAL_TIM_Base_Stop+0x38>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	f240 4344 	movw	r3, #1092	; 0x444
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_Base_Stop+0x38>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e03a      	b.n	8002f2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <HAL_TIM_Base_Start_IT+0x98>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x58>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d009      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x58>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <HAL_TIM_Base_Start_IT+0x9c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x58>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d111      	bne.n	8002f1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d010      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	e007      	b.n	8002f2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800

08002f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e041      	b.n	8002fda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f839 	bl	8002fe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f001 f83c 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_TIM_PWM_Start_DMA+0x28>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e022      	b.n	8003062 <HAL_TIM_PWM_Start_DMA+0x6e>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d109      	bne.n	8003036 <HAL_TIM_PWM_Start_DMA+0x42>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e015      	b.n	8003062 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d109      	bne.n	8003050 <HAL_TIM_PWM_Start_DMA+0x5c>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e008      	b.n	8003062 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	e14e      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_TIM_PWM_Start_DMA+0x90>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e022      	b.n	80030ca <HAL_TIM_PWM_Start_DMA+0xd6>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b04      	cmp	r3, #4
 8003088:	d109      	bne.n	800309e <HAL_TIM_PWM_Start_DMA+0xaa>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e015      	b.n	80030ca <HAL_TIM_PWM_Start_DMA+0xd6>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d109      	bne.n	80030b8 <HAL_TIM_PWM_Start_DMA+0xc4>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e008      	b.n	80030ca <HAL_TIM_PWM_Start_DMA+0xd6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <HAL_TIM_PWM_Start_DMA+0xea>
 80030d4:	887b      	ldrh	r3, [r7, #2]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e114      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Start_DMA+0xfa>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	e016      	b.n	800311c <HAL_TIM_PWM_Start_DMA+0x128>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_PWM_Start_DMA+0x10a>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	e00e      	b.n	800311c <HAL_TIM_PWM_Start_DMA+0x128>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d104      	bne.n	800310e <HAL_TIM_PWM_Start_DMA+0x11a>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800310c:	e006      	b.n	800311c <HAL_TIM_PWM_Start_DMA+0x128>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003116:	e001      	b.n	800311c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0f5      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x314>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	f200 80ae 	bhi.w	8003280 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_TIM_PWM_Start_DMA+0x138>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003161 	.word	0x08003161
 8003130:	08003281 	.word	0x08003281
 8003134:	08003281 	.word	0x08003281
 8003138:	08003281 	.word	0x08003281
 800313c:	080031a9 	.word	0x080031a9
 8003140:	08003281 	.word	0x08003281
 8003144:	08003281 	.word	0x08003281
 8003148:	08003281 	.word	0x08003281
 800314c:	080031f1 	.word	0x080031f1
 8003150:	08003281 	.word	0x08003281
 8003154:	08003281 	.word	0x08003281
 8003158:	08003281 	.word	0x08003281
 800315c:	08003239 	.word	0x08003239
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	4a6a      	ldr	r2, [pc, #424]	; (8003310 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	4a69      	ldr	r2, [pc, #420]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x320>)
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	4a68      	ldr	r2, [pc, #416]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003176:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3334      	adds	r3, #52	; 0x34
 8003184:	461a      	mov	r2, r3
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	f7fe fe86 	bl	8001e98 <HAL_DMA_Start_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0b8      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a4:	60da      	str	r2, [r3, #12]
      break;
 80031a6:	e06c      	b.n	8003282 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x320>)
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	4a56      	ldr	r2, [pc, #344]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x324>)
 80031be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3338      	adds	r3, #56	; 0x38
 80031cc:	461a      	mov	r2, r3
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	f7fe fe62 	bl	8001e98 <HAL_DMA_Start_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e094      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ec:	60da      	str	r2, [r3, #12]
      break;
 80031ee:	e048      	b.n	8003282 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	4a46      	ldr	r2, [pc, #280]	; (8003310 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4a45      	ldr	r2, [pc, #276]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x320>)
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a44      	ldr	r2, [pc, #272]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	333c      	adds	r3, #60	; 0x3c
 8003214:	461a      	mov	r2, r3
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	f7fe fe3e 	bl	8001e98 <HAL_DMA_Start_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e070      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003234:	60da      	str	r2, [r3, #12]
      break;
 8003236:	e024      	b.n	8003282 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	4a34      	ldr	r2, [pc, #208]	; (8003310 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4a33      	ldr	r2, [pc, #204]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	4a32      	ldr	r2, [pc, #200]	; (8003318 <HAL_TIM_PWM_Start_DMA+0x324>)
 800324e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3340      	adds	r3, #64	; 0x40
 800325c:	461a      	mov	r2, r3
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	f7fe fe1a 	bl	8001e98 <HAL_DMA_Start_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e04c      	b.n	8003308 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800327c:	60da      	str	r2, [r3, #12]
      break;
 800327e:	e000      	b.n	8003282 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003280:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f001 fa45 	bl	800471a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_TIM_PWM_Start_DMA+0x328>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d107      	bne.n	80032aa <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_TIM_PWM_Start_DMA+0x328>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d009      	beq.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x2de>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <HAL_TIM_PWM_Start_DMA+0x330>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d111      	bne.n	80032f6 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d010      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e007      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	08003eef 	.word	0x08003eef
 8003314:	08003f97 	.word	0x08003f97
 8003318:	08003e5d 	.word	0x08003e5d
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800

08003328 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d855      	bhi.n	80033e4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003375 	.word	0x08003375
 8003344:	080033e5 	.word	0x080033e5
 8003348:	080033e5 	.word	0x080033e5
 800334c:	080033e5 	.word	0x080033e5
 8003350:	08003391 	.word	0x08003391
 8003354:	080033e5 	.word	0x080033e5
 8003358:	080033e5 	.word	0x080033e5
 800335c:	080033e5 	.word	0x080033e5
 8003360:	080033ad 	.word	0x080033ad
 8003364:	080033e5 	.word	0x080033e5
 8003368:	080033e5 	.word	0x080033e5
 800336c:	080033e5 	.word	0x080033e5
 8003370:	080033c9 	.word	0x080033c9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003382:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fde5 	bl	8001f58 <HAL_DMA_Abort_IT>
      break;
 800338e:	e02a      	b.n	80033e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fdd7 	bl	8001f58 <HAL_DMA_Abort_IT>
      break;
 80033aa:	e01c      	b.n	80033e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fdc9 	bl	8001f58 <HAL_DMA_Abort_IT>
      break;
 80033c6:	e00e      	b.n	80033e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fdbb 	bl	8001f58 <HAL_DMA_Abort_IT>
      break;
 80033e2:	e000      	b.n	80033e6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80033e4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 f993 	bl	800471a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d117      	bne.n	800342e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	f241 1311 	movw	r3, #4369	; 0x1111
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_TIM_PWM_Stop_DMA+0x106>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	f240 4344 	movw	r3, #1092	; 0x444
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_TIM_PWM_Stop_DMA+0x106>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	f241 1311 	movw	r3, #4369	; 0x1111
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_TIM_PWM_Stop_DMA+0x136>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	f240 4344 	movw	r3, #1092	; 0x444
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_TIM_PWM_Stop_DMA+0x136>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Stop_DMA+0x146>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346c:	e013      	b.n	8003496 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Stop_DMA+0x156>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800347c:	e00b      	b.n	8003496 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Stop_DMA+0x166>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348c:	e003      	b.n	8003496 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40012c00 	.word	0x40012c00

080034a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e041      	b.n	800353a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe f9b8 	bl	8001840 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 fd8c 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_TIM_IC_Start_IT+0x1a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e013      	b.n	8003586 <HAL_TIM_IC_Start_IT+0x42>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d104      	bne.n	800356e <HAL_TIM_IC_Start_IT+0x2a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e00b      	b.n	8003586 <HAL_TIM_IC_Start_IT+0x42>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d104      	bne.n	800357e <HAL_TIM_IC_Start_IT+0x3a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e003      	b.n	8003586 <HAL_TIM_IC_Start_IT+0x42>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <HAL_TIM_IC_Start_IT+0x54>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e013      	b.n	80035c0 <HAL_TIM_IC_Start_IT+0x7c>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d104      	bne.n	80035a8 <HAL_TIM_IC_Start_IT+0x64>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e00b      	b.n	80035c0 <HAL_TIM_IC_Start_IT+0x7c>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d104      	bne.n	80035b8 <HAL_TIM_IC_Start_IT+0x74>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e003      	b.n	80035c0 <HAL_TIM_IC_Start_IT+0x7c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035c8:	7bbb      	ldrb	r3, [r7, #14]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d001      	beq.n	80035d2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0b3      	b.n	800373a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_IC_Start_IT+0x9e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	e013      	b.n	800360a <HAL_TIM_IC_Start_IT+0xc6>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_IC_Start_IT+0xae>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f0:	e00b      	b.n	800360a <HAL_TIM_IC_Start_IT+0xc6>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_IC_Start_IT+0xbe>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003600:	e003      	b.n	800360a <HAL_TIM_IC_Start_IT+0xc6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <HAL_TIM_IC_Start_IT+0xd6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003618:	e013      	b.n	8003642 <HAL_TIM_IC_Start_IT+0xfe>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d104      	bne.n	800362a <HAL_TIM_IC_Start_IT+0xe6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003628:	e00b      	b.n	8003642 <HAL_TIM_IC_Start_IT+0xfe>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d104      	bne.n	800363a <HAL_TIM_IC_Start_IT+0xf6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003638:	e003      	b.n	8003642 <HAL_TIM_IC_Start_IT+0xfe>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b0c      	cmp	r3, #12
 8003646:	d841      	bhi.n	80036cc <HAL_TIM_IC_Start_IT+0x188>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <HAL_TIM_IC_Start_IT+0x10c>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003685 	.word	0x08003685
 8003654:	080036cd 	.word	0x080036cd
 8003658:	080036cd 	.word	0x080036cd
 800365c:	080036cd 	.word	0x080036cd
 8003660:	08003697 	.word	0x08003697
 8003664:	080036cd 	.word	0x080036cd
 8003668:	080036cd 	.word	0x080036cd
 800366c:	080036cd 	.word	0x080036cd
 8003670:	080036a9 	.word	0x080036a9
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036cd 	.word	0x080036cd
 800367c:	080036cd 	.word	0x080036cd
 8003680:	080036bb 	.word	0x080036bb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0202 	orr.w	r2, r2, #2
 8003692:	60da      	str	r2, [r3, #12]
      break;
 8003694:	e01b      	b.n	80036ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0204 	orr.w	r2, r2, #4
 80036a4:	60da      	str	r2, [r3, #12]
      break;
 80036a6:	e012      	b.n	80036ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	60da      	str	r2, [r3, #12]
      break;
 80036b8:	e009      	b.n	80036ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0210 	orr.w	r2, r2, #16
 80036c8:	60da      	str	r2, [r3, #12]
      break;
 80036ca:	e000      	b.n	80036ce <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80036cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 f81f 	bl	800471a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a18      	ldr	r2, [pc, #96]	; (8003744 <HAL_TIM_IC_Start_IT+0x200>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_TIM_IC_Start_IT+0x1c0>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d009      	beq.n	8003704 <HAL_TIM_IC_Start_IT+0x1c0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_TIM_IC_Start_IT+0x204>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_IC_Start_IT+0x1c0>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_TIM_IC_Start_IT+0x208>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d010      	beq.n	8003738 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	e007      	b.n	8003738 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800

08003750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0202 	mvn.w	r2, #2
 800377c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fc9c 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fb3a 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fd fd3d 	bl	8001220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0204 	mvn.w	r2, #4
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fc72 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fb10 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7fd fd13 	bl	8001220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b08      	cmp	r3, #8
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0208 	mvn.w	r2, #8
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2204      	movs	r2, #4
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fc48 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fae6 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fd fce9 	bl	8001220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b10      	cmp	r3, #16
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b10      	cmp	r3, #16
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0210 	mvn.w	r2, #16
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2208      	movs	r2, #8
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fc1e 	bl	80010d0 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fabc 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fd fcbf 	bl	8001220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fb88 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 ff99 	bl	8004832 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa86 	bl	8003e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b20      	cmp	r3, #32
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0220 	mvn.w	r2, #32
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 ff64 	bl	8004820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003976:	2302      	movs	r3, #2
 8003978:	e082      	b.n	8003a80 <HAL_TIM_IC_ConfigChannel+0x120>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11b      	bne.n	80039c0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f000 fd1c 	bl	80043d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 020c 	bic.w	r2, r2, #12
 80039aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6999      	ldr	r1, [r3, #24]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	619a      	str	r2, [r3, #24]
 80039be:	e05a      	b.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d11c      	bne.n	8003a00 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f000 fd85 	bl	80044e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6999      	ldr	r1, [r3, #24]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	021a      	lsls	r2, r3, #8
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	619a      	str	r2, [r3, #24]
 80039fe:	e03a      	b.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d11b      	bne.n	8003a3e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f000 fdd0 	bl	80045ba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 020c 	bic.w	r2, r2, #12
 8003a28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
 8003a3c:	e01b      	b.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f000 fdef 	bl	8004630 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69d9      	ldr	r1, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0ac      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	f200 809f 	bhi.w	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003bf1 	.word	0x08003bf1
 8003ac0:	08003bf1 	.word	0x08003bf1
 8003ac4:	08003bf1 	.word	0x08003bf1
 8003ac8:	08003b2d 	.word	0x08003b2d
 8003acc:	08003bf1 	.word	0x08003bf1
 8003ad0:	08003bf1 	.word	0x08003bf1
 8003ad4:	08003bf1 	.word	0x08003bf1
 8003ad8:	08003b6f 	.word	0x08003b6f
 8003adc:	08003bf1 	.word	0x08003bf1
 8003ae0:	08003bf1 	.word	0x08003bf1
 8003ae4:	08003bf1 	.word	0x08003bf1
 8003ae8:	08003baf 	.word	0x08003baf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fae6 	bl	80040c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0204 	bic.w	r2, r2, #4
 8003b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6999      	ldr	r1, [r3, #24]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]
      break;
 8003b2a:	e062      	b.n	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb2c 	bl	8004190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6999      	ldr	r1, [r3, #24]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	619a      	str	r2, [r3, #24]
      break;
 8003b6c:	e041      	b.n	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fb75 	bl	8004264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0208 	orr.w	r2, r2, #8
 8003b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0204 	bic.w	r2, r2, #4
 8003b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69d9      	ldr	r1, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	61da      	str	r2, [r3, #28]
      break;
 8003bac:	e021      	b.n	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fbbf 	bl	8004338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69d9      	ldr	r1, [r3, #28]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	021a      	lsls	r2, r3, #8
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	61da      	str	r2, [r3, #28]
      break;
 8003bee:	e000      	b.n	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_ConfigClockSource+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e0b3      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x180>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c54:	d03e      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0xd0>
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5a:	f200 8087 	bhi.w	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	f000 8085 	beq.w	8003d70 <HAL_TIM_ConfigClockSource+0x16c>
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	d87f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c6c:	2b70      	cmp	r3, #112	; 0x70
 8003c6e:	d01a      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xa2>
 8003c70:	2b70      	cmp	r3, #112	; 0x70
 8003c72:	d87b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c74:	2b60      	cmp	r3, #96	; 0x60
 8003c76:	d050      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x116>
 8003c78:	2b60      	cmp	r3, #96	; 0x60
 8003c7a:	d877      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c7c:	2b50      	cmp	r3, #80	; 0x50
 8003c7e:	d03c      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xf6>
 8003c80:	2b50      	cmp	r3, #80	; 0x50
 8003c82:	d873      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d058      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x136>
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d86f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d064      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x156>
 8003c90:	2b30      	cmp	r3, #48	; 0x30
 8003c92:	d86b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d060      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x156>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d867      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x156>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d05a      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ca4:	e062      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f000 fd11 	bl	80046dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	609a      	str	r2, [r3, #8]
      break;
 8003cd2:	e04e      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f000 fcfa 	bl	80046dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e03b      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f000 fbbe 	bl	8004488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2150      	movs	r1, #80	; 0x50
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fcc8 	bl	80046a8 <TIM_ITRx_SetConfig>
      break;
 8003d18:	e02b      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 fc18 	bl	800455c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2160      	movs	r1, #96	; 0x60
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fcb8 	bl	80046a8 <TIM_ITRx_SetConfig>
      break;
 8003d38:	e01b      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fb9e 	bl	8004488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2140      	movs	r1, #64	; 0x40
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fca8 	bl	80046a8 <TIM_ITRx_SetConfig>
      break;
 8003d58:	e00b      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fc9f 	bl	80046a8 <TIM_ITRx_SetConfig>
        break;
 8003d6a:	e002      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d6c:	bf00      	nop
 8003d6e:	e000      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d831      	bhi.n	8003e04 <HAL_TIM_ReadCapturedValue+0x78>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003e05 	.word	0x08003e05
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003e05 	.word	0x08003e05
 8003dc0:	08003e05 	.word	0x08003e05
 8003dc4:	08003e05 	.word	0x08003e05
 8003dc8:	08003df1 	.word	0x08003df1
 8003dcc:	08003e05 	.word	0x08003e05
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003e05 	.word	0x08003e05
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	60fb      	str	r3, [r7, #12]

      break;
 8003de4:	e00f      	b.n	8003e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	60fb      	str	r3, [r7, #12]

      break;
 8003dee:	e00a      	b.n	8003e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	60fb      	str	r3, [r7, #12]

      break;
 8003df8:	e005      	b.n	8003e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	60fb      	str	r3, [r7, #12]

      break;
 8003e02:	e000      	b.n	8003e06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e04:	bf00      	nop
  }

  return tmpreg;
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop

08003e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e82:	e02a      	b.n	8003eda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d107      	bne.n	8003e9e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2202      	movs	r2, #2
 8003e92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e9c:	e01d      	b.n	8003eda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d107      	bne.n	8003eb8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb6:	e010      	b.n	8003eda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d107      	bne.n	8003ed2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed0:	e003      	b.n	8003eda <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff ffb5 	bl	8003e4a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	771a      	strb	r2, [r3, #28]
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d10b      	bne.n	8003f1e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d136      	bne.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1c:	e031      	b.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d10b      	bne.n	8003f40 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d125      	bne.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f3e:	e020      	b.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d10b      	bne.n	8003f62 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d114      	bne.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f60:	e00f      	b.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d10a      	bne.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2208      	movs	r2, #8
 8003f70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d103      	bne.n	8003f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7fd f94c 	bl	8001220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	771a      	strb	r2, [r3, #28]
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d103      	bne.n	8003fb6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	771a      	strb	r2, [r3, #28]
 8003fb4:	e019      	b.n	8003fea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d103      	bne.n	8003fc8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	771a      	strb	r2, [r3, #28]
 8003fc6:	e010      	b.n	8003fea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d103      	bne.n	8003fda <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	771a      	strb	r2, [r3, #28]
 8003fd8:	e007      	b.n	8003fea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d102      	bne.n	8003fea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff ff1b 	bl	8003e26 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	771a      	strb	r2, [r3, #28]
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <TIM_Base_SetConfig+0xb8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x30>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x30>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a26      	ldr	r2, [pc, #152]	; (80040bc <TIM_Base_SetConfig+0xbc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x30>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <TIM_Base_SetConfig+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1c      	ldr	r2, [pc, #112]	; (80040b8 <TIM_Base_SetConfig+0xb8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00b      	beq.n	8004062 <TIM_Base_SetConfig+0x62>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d007      	beq.n	8004062 <TIM_Base_SetConfig+0x62>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a19      	ldr	r2, [pc, #100]	; (80040bc <TIM_Base_SetConfig+0xbc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_Base_SetConfig+0x62>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <TIM_Base_SetConfig+0xc0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d108      	bne.n	8004074 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <TIM_Base_SetConfig+0xb8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	615a      	str	r2, [r3, #20]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800

080040c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <TIM_OC1_SetConfig+0xc8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10c      	bne.n	800413a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0308 	bic.w	r3, r3, #8
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a13      	ldr	r2, [pc, #76]	; (800418c <TIM_OC1_SetConfig+0xc8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d111      	bne.n	8004166 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40012c00 	.word	0x40012c00

08004190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <TIM_OC2_SetConfig+0xd0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10d      	bne.n	800420c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a14      	ldr	r2, [pc, #80]	; (8004260 <TIM_OC2_SetConfig+0xd0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d113      	bne.n	800423c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00

08004264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <TIM_OC3_SetConfig+0xd0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10d      	bne.n	80042de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <TIM_OC3_SetConfig+0xd0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d113      	bne.n	800430e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	621a      	str	r2, [r3, #32]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00

08004338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	031b      	lsls	r3, r3, #12
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <TIM_OC4_SetConfig+0x98>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d109      	bne.n	80043ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800439e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	019b      	lsls	r3, r3, #6
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr
 80043d0:	40012c00 	.word	0x40012c00

080043d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0201 	bic.w	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a1f      	ldr	r2, [pc, #124]	; (800447c <TIM_TI1_SetConfig+0xa8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_TI1_SetConfig+0x46>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004408:	d007      	beq.n	800441a <TIM_TI1_SetConfig+0x46>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <TIM_TI1_SetConfig+0xac>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_TI1_SetConfig+0x46>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <TIM_TI1_SetConfig+0xb0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <TIM_TI1_SetConfig+0x4a>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <TIM_TI1_SetConfig+0x4c>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e003      	b.n	800443e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	b2db      	uxtb	r3, r3
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f023 030a 	bic.w	r3, r3, #10
 8004458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 030a 	and.w	r3, r3, #10
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800

08004488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 030a 	bic.w	r3, r3, #10
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0210 	bic.w	r2, r3, #16
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	031b      	lsls	r3, r3, #12
 8004528:	b29b      	uxth	r3, r3
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f023 0210 	bic.w	r2, r3, #16
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004586:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	031b      	lsls	r3, r3, #12
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004598:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800460a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800466e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	031b      	lsls	r3, r3, #12
 8004674:	b29b      	uxth	r3, r3
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004682:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	031b      	lsls	r3, r3, #12
 8004688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f043 0307 	orr.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	609a      	str	r2, [r3, #8]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	021a      	lsls	r2, r3, #8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	431a      	orrs	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	2201      	movs	r2, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	43db      	mvns	r3, r3
 800473c:	401a      	ands	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	431a      	orrs	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	621a      	str	r2, [r3, #32]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
	...

08004764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004778:	2302      	movs	r3, #2
 800477a:	e046      	b.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a16      	ldr	r2, [pc, #88]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d009      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a10      	ldr	r2, [pc, #64]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10c      	bne.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800

08004820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr

08004832 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <__errno>:
 8004844:	4b01      	ldr	r3, [pc, #4]	; (800484c <__errno+0x8>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	2600      	movs	r6, #0
 8004854:	4d0c      	ldr	r5, [pc, #48]	; (8004888 <__libc_init_array+0x38>)
 8004856:	4c0d      	ldr	r4, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	f002 ffee 	bl	8007840 <_init>
 8004864:	2600      	movs	r6, #0
 8004866:	4d0a      	ldr	r5, [pc, #40]	; (8004890 <__libc_init_array+0x40>)
 8004868:	4c0a      	ldr	r4, [pc, #40]	; (8004894 <__libc_init_array+0x44>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	f855 3b04 	ldr.w	r3, [r5], #4
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	08007cb0 	.word	0x08007cb0
 800488c:	08007cb0 	.word	0x08007cb0
 8004890:	08007cb0 	.word	0x08007cb0
 8004894:	08007cb4 	.word	0x08007cb4

08004898 <memset>:
 8004898:	4603      	mov	r3, r0
 800489a:	4402      	add	r2, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	d100      	bne.n	80048a2 <memset+0xa>
 80048a0:	4770      	bx	lr
 80048a2:	f803 1b01 	strb.w	r1, [r3], #1
 80048a6:	e7f9      	b.n	800489c <memset+0x4>

080048a8 <__cvt>:
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ae:	461f      	mov	r7, r3
 80048b0:	bfbb      	ittet	lt
 80048b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048b6:	461f      	movlt	r7, r3
 80048b8:	2300      	movge	r3, #0
 80048ba:	232d      	movlt	r3, #45	; 0x2d
 80048bc:	b088      	sub	sp, #32
 80048be:	4614      	mov	r4, r2
 80048c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048c4:	7013      	strb	r3, [r2, #0]
 80048c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048cc:	f023 0820 	bic.w	r8, r3, #32
 80048d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048d4:	d005      	beq.n	80048e2 <__cvt+0x3a>
 80048d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048da:	d100      	bne.n	80048de <__cvt+0x36>
 80048dc:	3501      	adds	r5, #1
 80048de:	2302      	movs	r3, #2
 80048e0:	e000      	b.n	80048e4 <__cvt+0x3c>
 80048e2:	2303      	movs	r3, #3
 80048e4:	aa07      	add	r2, sp, #28
 80048e6:	9204      	str	r2, [sp, #16]
 80048e8:	aa06      	add	r2, sp, #24
 80048ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048ee:	e9cd 3500 	strd	r3, r5, [sp]
 80048f2:	4622      	mov	r2, r4
 80048f4:	463b      	mov	r3, r7
 80048f6:	f000 fcdf 	bl	80052b8 <_dtoa_r>
 80048fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048fe:	4606      	mov	r6, r0
 8004900:	d102      	bne.n	8004908 <__cvt+0x60>
 8004902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004904:	07db      	lsls	r3, r3, #31
 8004906:	d522      	bpl.n	800494e <__cvt+0xa6>
 8004908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800490c:	eb06 0905 	add.w	r9, r6, r5
 8004910:	d110      	bne.n	8004934 <__cvt+0x8c>
 8004912:	7833      	ldrb	r3, [r6, #0]
 8004914:	2b30      	cmp	r3, #48	; 0x30
 8004916:	d10a      	bne.n	800492e <__cvt+0x86>
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	4620      	mov	r0, r4
 800491e:	4639      	mov	r1, r7
 8004920:	f7fc f842 	bl	80009a8 <__aeabi_dcmpeq>
 8004924:	b918      	cbnz	r0, 800492e <__cvt+0x86>
 8004926:	f1c5 0501 	rsb	r5, r5, #1
 800492a:	f8ca 5000 	str.w	r5, [sl]
 800492e:	f8da 3000 	ldr.w	r3, [sl]
 8004932:	4499      	add	r9, r3
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	4620      	mov	r0, r4
 800493a:	4639      	mov	r1, r7
 800493c:	f7fc f834 	bl	80009a8 <__aeabi_dcmpeq>
 8004940:	b108      	cbz	r0, 8004946 <__cvt+0x9e>
 8004942:	f8cd 901c 	str.w	r9, [sp, #28]
 8004946:	2230      	movs	r2, #48	; 0x30
 8004948:	9b07      	ldr	r3, [sp, #28]
 800494a:	454b      	cmp	r3, r9
 800494c:	d307      	bcc.n	800495e <__cvt+0xb6>
 800494e:	4630      	mov	r0, r6
 8004950:	9b07      	ldr	r3, [sp, #28]
 8004952:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	b008      	add	sp, #32
 800495a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	9107      	str	r1, [sp, #28]
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e7f0      	b.n	8004948 <__cvt+0xa0>

08004966 <__exponent>:
 8004966:	4603      	mov	r3, r0
 8004968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800496a:	2900      	cmp	r1, #0
 800496c:	f803 2b02 	strb.w	r2, [r3], #2
 8004970:	bfb6      	itet	lt
 8004972:	222d      	movlt	r2, #45	; 0x2d
 8004974:	222b      	movge	r2, #43	; 0x2b
 8004976:	4249      	neglt	r1, r1
 8004978:	2909      	cmp	r1, #9
 800497a:	7042      	strb	r2, [r0, #1]
 800497c:	dd2b      	ble.n	80049d6 <__exponent+0x70>
 800497e:	f10d 0407 	add.w	r4, sp, #7
 8004982:	46a4      	mov	ip, r4
 8004984:	270a      	movs	r7, #10
 8004986:	fb91 f6f7 	sdiv	r6, r1, r7
 800498a:	460a      	mov	r2, r1
 800498c:	46a6      	mov	lr, r4
 800498e:	fb07 1516 	mls	r5, r7, r6, r1
 8004992:	2a63      	cmp	r2, #99	; 0x63
 8004994:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004998:	4631      	mov	r1, r6
 800499a:	f104 34ff 	add.w	r4, r4, #4294967295
 800499e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049a2:	dcf0      	bgt.n	8004986 <__exponent+0x20>
 80049a4:	3130      	adds	r1, #48	; 0x30
 80049a6:	f1ae 0502 	sub.w	r5, lr, #2
 80049aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049ae:	4629      	mov	r1, r5
 80049b0:	1c44      	adds	r4, r0, #1
 80049b2:	4561      	cmp	r1, ip
 80049b4:	d30a      	bcc.n	80049cc <__exponent+0x66>
 80049b6:	f10d 0209 	add.w	r2, sp, #9
 80049ba:	eba2 020e 	sub.w	r2, r2, lr
 80049be:	4565      	cmp	r5, ip
 80049c0:	bf88      	it	hi
 80049c2:	2200      	movhi	r2, #0
 80049c4:	4413      	add	r3, r2
 80049c6:	1a18      	subs	r0, r3, r0
 80049c8:	b003      	add	sp, #12
 80049ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049d4:	e7ed      	b.n	80049b2 <__exponent+0x4c>
 80049d6:	2330      	movs	r3, #48	; 0x30
 80049d8:	3130      	adds	r1, #48	; 0x30
 80049da:	7083      	strb	r3, [r0, #2]
 80049dc:	70c1      	strb	r1, [r0, #3]
 80049de:	1d03      	adds	r3, r0, #4
 80049e0:	e7f1      	b.n	80049c6 <__exponent+0x60>
	...

080049e4 <_printf_float>:
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	b091      	sub	sp, #68	; 0x44
 80049ea:	460c      	mov	r4, r1
 80049ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049f0:	4616      	mov	r6, r2
 80049f2:	461f      	mov	r7, r3
 80049f4:	4605      	mov	r5, r0
 80049f6:	f001 fb43 	bl	8006080 <_localeconv_r>
 80049fa:	6803      	ldr	r3, [r0, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004a00:	f7fb fba6 	bl	8000150 <strlen>
 8004a04:	2300      	movs	r3, #0
 8004a06:	930e      	str	r3, [sp, #56]	; 0x38
 8004a08:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a0e:	3307      	adds	r3, #7
 8004a10:	f023 0307 	bic.w	r3, r3, #7
 8004a14:	f103 0208 	add.w	r2, r3, #8
 8004a18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a1c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a20:	f8c8 2000 	str.w	r2, [r8]
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a2c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a30:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a36:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	4b9c      	ldr	r3, [pc, #624]	; (8004cb0 <_printf_float+0x2cc>)
 8004a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a40:	f7fb ffe4 	bl	8000a0c <__aeabi_dcmpun>
 8004a44:	bb70      	cbnz	r0, 8004aa4 <_printf_float+0xc0>
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4b98      	ldr	r3, [pc, #608]	; (8004cb0 <_printf_float+0x2cc>)
 8004a4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a50:	f7fb ffbe 	bl	80009d0 <__aeabi_dcmple>
 8004a54:	bb30      	cbnz	r0, 8004aa4 <_printf_float+0xc0>
 8004a56:	2200      	movs	r2, #0
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4651      	mov	r1, sl
 8004a5e:	f7fb ffad 	bl	80009bc <__aeabi_dcmplt>
 8004a62:	b110      	cbz	r0, 8004a6a <_printf_float+0x86>
 8004a64:	232d      	movs	r3, #45	; 0x2d
 8004a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a6a:	4b92      	ldr	r3, [pc, #584]	; (8004cb4 <_printf_float+0x2d0>)
 8004a6c:	4892      	ldr	r0, [pc, #584]	; (8004cb8 <_printf_float+0x2d4>)
 8004a6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a72:	bf94      	ite	ls
 8004a74:	4698      	movls	r8, r3
 8004a76:	4680      	movhi	r8, r0
 8004a78:	2303      	movs	r3, #3
 8004a7a:	f04f 0a00 	mov.w	sl, #0
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	f02b 0304 	bic.w	r3, fp, #4
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	4633      	mov	r3, r6
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	9700      	str	r7, [sp, #0]
 8004a8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a90:	f000 f9d4 	bl	8004e3c <_printf_common>
 8004a94:	3001      	adds	r0, #1
 8004a96:	f040 8090 	bne.w	8004bba <_printf_float+0x1d6>
 8004a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9e:	b011      	add	sp, #68	; 0x44
 8004aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	4653      	mov	r3, sl
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4651      	mov	r1, sl
 8004aac:	f7fb ffae 	bl	8000a0c <__aeabi_dcmpun>
 8004ab0:	b148      	cbz	r0, 8004ac6 <_printf_float+0xe2>
 8004ab2:	f1ba 0f00 	cmp.w	sl, #0
 8004ab6:	bfb8      	it	lt
 8004ab8:	232d      	movlt	r3, #45	; 0x2d
 8004aba:	4880      	ldr	r0, [pc, #512]	; (8004cbc <_printf_float+0x2d8>)
 8004abc:	bfb8      	it	lt
 8004abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	; (8004cc0 <_printf_float+0x2dc>)
 8004ac4:	e7d3      	b.n	8004a6e <_printf_float+0x8a>
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	d142      	bne.n	8004b56 <_printf_float+0x172>
 8004ad0:	2306      	movs	r3, #6
 8004ad2:	6063      	str	r3, [r4, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	9206      	str	r2, [sp, #24]
 8004ad8:	aa0e      	add	r2, sp, #56	; 0x38
 8004ada:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ade:	aa0d      	add	r2, sp, #52	; 0x34
 8004ae0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ae4:	9203      	str	r2, [sp, #12]
 8004ae6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004aea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	4642      	mov	r2, r8
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4628      	mov	r0, r5
 8004af8:	4653      	mov	r3, sl
 8004afa:	910b      	str	r1, [sp, #44]	; 0x2c
 8004afc:	f7ff fed4 	bl	80048a8 <__cvt>
 8004b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b02:	4680      	mov	r8, r0
 8004b04:	2947      	cmp	r1, #71	; 0x47
 8004b06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b08:	d108      	bne.n	8004b1c <_printf_float+0x138>
 8004b0a:	1cc8      	adds	r0, r1, #3
 8004b0c:	db02      	blt.n	8004b14 <_printf_float+0x130>
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	4299      	cmp	r1, r3
 8004b12:	dd40      	ble.n	8004b96 <_printf_float+0x1b2>
 8004b14:	f1a9 0902 	sub.w	r9, r9, #2
 8004b18:	fa5f f989 	uxtb.w	r9, r9
 8004b1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b20:	d81f      	bhi.n	8004b62 <_printf_float+0x17e>
 8004b22:	464a      	mov	r2, r9
 8004b24:	3901      	subs	r1, #1
 8004b26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b2a:	910d      	str	r1, [sp, #52]	; 0x34
 8004b2c:	f7ff ff1b 	bl	8004966 <__exponent>
 8004b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b32:	4682      	mov	sl, r0
 8004b34:	1813      	adds	r3, r2, r0
 8004b36:	2a01      	cmp	r2, #1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	dc02      	bgt.n	8004b42 <_printf_float+0x15e>
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	07d2      	lsls	r2, r2, #31
 8004b40:	d501      	bpl.n	8004b46 <_printf_float+0x162>
 8004b42:	3301      	adds	r3, #1
 8004b44:	6123      	str	r3, [r4, #16]
 8004b46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d09b      	beq.n	8004a86 <_printf_float+0xa2>
 8004b4e:	232d      	movs	r3, #45	; 0x2d
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b54:	e797      	b.n	8004a86 <_printf_float+0xa2>
 8004b56:	2947      	cmp	r1, #71	; 0x47
 8004b58:	d1bc      	bne.n	8004ad4 <_printf_float+0xf0>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ba      	bne.n	8004ad4 <_printf_float+0xf0>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e7b7      	b.n	8004ad2 <_printf_float+0xee>
 8004b62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b66:	d118      	bne.n	8004b9a <_printf_float+0x1b6>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	6863      	ldr	r3, [r4, #4]
 8004b6c:	dd0b      	ble.n	8004b86 <_printf_float+0x1a2>
 8004b6e:	6121      	str	r1, [r4, #16]
 8004b70:	b913      	cbnz	r3, 8004b78 <_printf_float+0x194>
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	07d0      	lsls	r0, r2, #31
 8004b76:	d502      	bpl.n	8004b7e <_printf_float+0x19a>
 8004b78:	3301      	adds	r3, #1
 8004b7a:	440b      	add	r3, r1
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	f04f 0a00 	mov.w	sl, #0
 8004b82:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b84:	e7df      	b.n	8004b46 <_printf_float+0x162>
 8004b86:	b913      	cbnz	r3, 8004b8e <_printf_float+0x1aa>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	07d2      	lsls	r2, r2, #31
 8004b8c:	d501      	bpl.n	8004b92 <_printf_float+0x1ae>
 8004b8e:	3302      	adds	r3, #2
 8004b90:	e7f4      	b.n	8004b7c <_printf_float+0x198>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7f2      	b.n	8004b7c <_printf_float+0x198>
 8004b96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	db05      	blt.n	8004bac <_printf_float+0x1c8>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	6121      	str	r1, [r4, #16]
 8004ba4:	07d8      	lsls	r0, r3, #31
 8004ba6:	d5ea      	bpl.n	8004b7e <_printf_float+0x19a>
 8004ba8:	1c4b      	adds	r3, r1, #1
 8004baa:	e7e7      	b.n	8004b7c <_printf_float+0x198>
 8004bac:	2900      	cmp	r1, #0
 8004bae:	bfcc      	ite	gt
 8004bb0:	2201      	movgt	r2, #1
 8004bb2:	f1c1 0202 	rsble	r2, r1, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	e7e0      	b.n	8004b7c <_printf_float+0x198>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	055a      	lsls	r2, r3, #21
 8004bbe:	d407      	bmi.n	8004bd0 <_printf_float+0x1ec>
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d12b      	bne.n	8004c26 <_printf_float+0x242>
 8004bce:	e764      	b.n	8004a9a <_printf_float+0xb6>
 8004bd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bd4:	f240 80dd 	bls.w	8004d92 <_printf_float+0x3ae>
 8004bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	f7fb fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d033      	beq.n	8004c50 <_printf_float+0x26c>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	4a35      	ldr	r2, [pc, #212]	; (8004cc4 <_printf_float+0x2e0>)
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af51 	beq.w	8004a9a <_printf_float+0xb6>
 8004bf8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	db02      	blt.n	8004c06 <_printf_float+0x222>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	07d8      	lsls	r0, r3, #31
 8004c04:	d50f      	bpl.n	8004c26 <_printf_float+0x242>
 8004c06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	f43f af42 	beq.w	8004a9a <_printf_float+0xb6>
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	f104 091a 	add.w	r9, r4, #26
 8004c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c20:	3b01      	subs	r3, #1
 8004c22:	4543      	cmp	r3, r8
 8004c24:	dc09      	bgt.n	8004c3a <_printf_float+0x256>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	079b      	lsls	r3, r3, #30
 8004c2a:	f100 8102 	bmi.w	8004e32 <_printf_float+0x44e>
 8004c2e:	68e0      	ldr	r0, [r4, #12]
 8004c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c32:	4298      	cmp	r0, r3
 8004c34:	bfb8      	it	lt
 8004c36:	4618      	movlt	r0, r3
 8004c38:	e731      	b.n	8004a9e <_printf_float+0xba>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	464a      	mov	r2, r9
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f af28 	beq.w	8004a9a <_printf_float+0xb6>
 8004c4a:	f108 0801 	add.w	r8, r8, #1
 8004c4e:	e7e6      	b.n	8004c1e <_printf_float+0x23a>
 8004c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dc38      	bgt.n	8004cc8 <_printf_float+0x2e4>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <_printf_float+0x2e0>)
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f af1a 	beq.w	8004a9a <_printf_float+0xb6>
 8004c66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d102      	bne.n	8004c74 <_printf_float+0x290>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	07d9      	lsls	r1, r3, #31
 8004c72:	d5d8      	bpl.n	8004c26 <_printf_float+0x242>
 8004c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f43f af0b 	beq.w	8004a9a <_printf_float+0xb6>
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	f104 0a1a 	add.w	sl, r4, #26
 8004c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c8e:	425b      	negs	r3, r3
 8004c90:	454b      	cmp	r3, r9
 8004c92:	dc01      	bgt.n	8004c98 <_printf_float+0x2b4>
 8004c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c96:	e794      	b.n	8004bc2 <_printf_float+0x1de>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f aef9 	beq.w	8004a9a <_printf_float+0xb6>
 8004ca8:	f109 0901 	add.w	r9, r9, #1
 8004cac:	e7ee      	b.n	8004c8c <_printf_float+0x2a8>
 8004cae:	bf00      	nop
 8004cb0:	7fefffff 	.word	0x7fefffff
 8004cb4:	080078b8 	.word	0x080078b8
 8004cb8:	080078bc 	.word	0x080078bc
 8004cbc:	080078c4 	.word	0x080078c4
 8004cc0:	080078c0 	.word	0x080078c0
 8004cc4:	080078c8 	.word	0x080078c8
 8004cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	bfa8      	it	ge
 8004cd0:	461a      	movge	r2, r3
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	4691      	mov	r9, r2
 8004cd6:	dc37      	bgt.n	8004d48 <_printf_float+0x364>
 8004cd8:	f04f 0b00 	mov.w	fp, #0
 8004cdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce0:	f104 021a 	add.w	r2, r4, #26
 8004ce4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ce8:	ebaa 0309 	sub.w	r3, sl, r9
 8004cec:	455b      	cmp	r3, fp
 8004cee:	dc33      	bgt.n	8004d58 <_printf_float+0x374>
 8004cf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	db3b      	blt.n	8004d70 <_printf_float+0x38c>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	07da      	lsls	r2, r3, #31
 8004cfc:	d438      	bmi.n	8004d70 <_printf_float+0x38c>
 8004cfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d02:	eba2 030a 	sub.w	r3, r2, sl
 8004d06:	eba2 0901 	sub.w	r9, r2, r1
 8004d0a:	4599      	cmp	r9, r3
 8004d0c:	bfa8      	it	ge
 8004d0e:	4699      	movge	r9, r3
 8004d10:	f1b9 0f00 	cmp.w	r9, #0
 8004d14:	dc34      	bgt.n	8004d80 <_printf_float+0x39c>
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d1e:	f104 0a1a 	add.w	sl, r4, #26
 8004d22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	eba3 0309 	sub.w	r3, r3, r9
 8004d2c:	4543      	cmp	r3, r8
 8004d2e:	f77f af7a 	ble.w	8004c26 <_printf_float+0x242>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4652      	mov	r2, sl
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f aeac 	beq.w	8004a9a <_printf_float+0xb6>
 8004d42:	f108 0801 	add.w	r8, r8, #1
 8004d46:	e7ec      	b.n	8004d22 <_printf_float+0x33e>
 8004d48:	4613      	mov	r3, r2
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	d1c0      	bne.n	8004cd8 <_printf_float+0x2f4>
 8004d56:	e6a0      	b.n	8004a9a <_printf_float+0xb6>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f ae99 	beq.w	8004a9a <_printf_float+0xb6>
 8004d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d6a:	f10b 0b01 	add.w	fp, fp, #1
 8004d6e:	e7b9      	b.n	8004ce4 <_printf_float+0x300>
 8004d70:	4631      	mov	r1, r6
 8004d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d1bf      	bne.n	8004cfe <_printf_float+0x31a>
 8004d7e:	e68c      	b.n	8004a9a <_printf_float+0xb6>
 8004d80:	464b      	mov	r3, r9
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	eb08 020a 	add.w	r2, r8, sl
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d1c2      	bne.n	8004d16 <_printf_float+0x332>
 8004d90:	e683      	b.n	8004a9a <_printf_float+0xb6>
 8004d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d94:	2a01      	cmp	r2, #1
 8004d96:	dc01      	bgt.n	8004d9c <_printf_float+0x3b8>
 8004d98:	07db      	lsls	r3, r3, #31
 8004d9a:	d537      	bpl.n	8004e0c <_printf_float+0x428>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4642      	mov	r2, r8
 8004da0:	4631      	mov	r1, r6
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b8      	blx	r7
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f ae77 	beq.w	8004a9a <_printf_float+0xb6>
 8004dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f ae6f 	beq.w	8004a9a <_printf_float+0xb6>
 8004dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f7fb fdf0 	bl	80009a8 <__aeabi_dcmpeq>
 8004dc8:	b9d8      	cbnz	r0, 8004e02 <_printf_float+0x41e>
 8004dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dcc:	f108 0201 	add.w	r2, r8, #1
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d10e      	bne.n	8004dfa <_printf_float+0x416>
 8004ddc:	e65d      	b.n	8004a9a <_printf_float+0xb6>
 8004dde:	2301      	movs	r3, #1
 8004de0:	464a      	mov	r2, r9
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	47b8      	blx	r7
 8004de8:	3001      	adds	r0, #1
 8004dea:	f43f ae56 	beq.w	8004a9a <_printf_float+0xb6>
 8004dee:	f108 0801 	add.w	r8, r8, #1
 8004df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df4:	3b01      	subs	r3, #1
 8004df6:	4543      	cmp	r3, r8
 8004df8:	dcf1      	bgt.n	8004dde <_printf_float+0x3fa>
 8004dfa:	4653      	mov	r3, sl
 8004dfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e00:	e6e0      	b.n	8004bc4 <_printf_float+0x1e0>
 8004e02:	f04f 0800 	mov.w	r8, #0
 8004e06:	f104 091a 	add.w	r9, r4, #26
 8004e0a:	e7f2      	b.n	8004df2 <_printf_float+0x40e>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4642      	mov	r2, r8
 8004e10:	e7df      	b.n	8004dd2 <_printf_float+0x3ee>
 8004e12:	2301      	movs	r3, #1
 8004e14:	464a      	mov	r2, r9
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f43f ae3c 	beq.w	8004a9a <_printf_float+0xb6>
 8004e22:	f108 0801 	add.w	r8, r8, #1
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e2a:	1a5b      	subs	r3, r3, r1
 8004e2c:	4543      	cmp	r3, r8
 8004e2e:	dcf0      	bgt.n	8004e12 <_printf_float+0x42e>
 8004e30:	e6fd      	b.n	8004c2e <_printf_float+0x24a>
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	f104 0919 	add.w	r9, r4, #25
 8004e3a:	e7f4      	b.n	8004e26 <_printf_float+0x442>

08004e3c <_printf_common>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	4616      	mov	r6, r2
 8004e42:	4699      	mov	r9, r3
 8004e44:	688a      	ldr	r2, [r1, #8]
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	4607      	mov	r7, r0
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	bfb8      	it	lt
 8004e4e:	4613      	movlt	r3, r2
 8004e50:	6033      	str	r3, [r6, #0]
 8004e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e56:	460c      	mov	r4, r1
 8004e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e5c:	b10a      	cbz	r2, 8004e62 <_printf_common+0x26>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	6833      	ldrmi	r3, [r6, #0]
 8004e6a:	3302      	addmi	r3, #2
 8004e6c:	6033      	strmi	r3, [r6, #0]
 8004e6e:	6825      	ldr	r5, [r4, #0]
 8004e70:	f015 0506 	ands.w	r5, r5, #6
 8004e74:	d106      	bne.n	8004e84 <_printf_common+0x48>
 8004e76:	f104 0a19 	add.w	sl, r4, #25
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	6832      	ldr	r2, [r6, #0]
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc28      	bgt.n	8004ed6 <_printf_common+0x9a>
 8004e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e88:	1e13      	subs	r3, r2, #0
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	0692      	lsls	r2, r2, #26
 8004e92:	d42d      	bmi.n	8004ef0 <_printf_common+0xb4>
 8004e94:	4649      	mov	r1, r9
 8004e96:	4638      	mov	r0, r7
 8004e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e9c:	47c0      	blx	r8
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d020      	beq.n	8004ee4 <_printf_common+0xa8>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	68e5      	ldr	r5, [r4, #12]
 8004ea6:	f003 0306 	and.w	r3, r3, #6
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf18      	it	ne
 8004eae:	2500      	movne	r5, #0
 8004eb0:	6832      	ldr	r2, [r6, #0]
 8004eb2:	f04f 0600 	mov.w	r6, #0
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	bf08      	it	eq
 8004eba:	1aad      	subeq	r5, r5, r2
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	bf08      	it	eq
 8004ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfc4      	itt	gt
 8004ec8:	1a9b      	subgt	r3, r3, r2
 8004eca:	18ed      	addgt	r5, r5, r3
 8004ecc:	341a      	adds	r4, #26
 8004ece:	42b5      	cmp	r5, r6
 8004ed0:	d11a      	bne.n	8004f08 <_printf_common+0xcc>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e008      	b.n	8004ee8 <_printf_common+0xac>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4652      	mov	r2, sl
 8004eda:	4649      	mov	r1, r9
 8004edc:	4638      	mov	r0, r7
 8004ede:	47c0      	blx	r8
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d103      	bne.n	8004eec <_printf_common+0xb0>
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eec:	3501      	adds	r5, #1
 8004eee:	e7c4      	b.n	8004e7a <_printf_common+0x3e>
 8004ef0:	2030      	movs	r0, #48	; 0x30
 8004ef2:	18e1      	adds	r1, r4, r3
 8004ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004efe:	4422      	add	r2, r4
 8004f00:	3302      	adds	r3, #2
 8004f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f06:	e7c5      	b.n	8004e94 <_printf_common+0x58>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4638      	mov	r0, r7
 8004f10:	47c0      	blx	r8
 8004f12:	3001      	adds	r0, #1
 8004f14:	d0e6      	beq.n	8004ee4 <_printf_common+0xa8>
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7d9      	b.n	8004ece <_printf_common+0x92>
	...

08004f1c <_printf_i>:
 8004f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	460c      	mov	r4, r1
 8004f22:	7e27      	ldrb	r7, [r4, #24]
 8004f24:	4691      	mov	r9, r2
 8004f26:	2f78      	cmp	r7, #120	; 0x78
 8004f28:	4680      	mov	r8, r0
 8004f2a:	469a      	mov	sl, r3
 8004f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f32:	d807      	bhi.n	8004f44 <_printf_i+0x28>
 8004f34:	2f62      	cmp	r7, #98	; 0x62
 8004f36:	d80a      	bhi.n	8004f4e <_printf_i+0x32>
 8004f38:	2f00      	cmp	r7, #0
 8004f3a:	f000 80d9 	beq.w	80050f0 <_printf_i+0x1d4>
 8004f3e:	2f58      	cmp	r7, #88	; 0x58
 8004f40:	f000 80a4 	beq.w	800508c <_printf_i+0x170>
 8004f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f4c:	e03a      	b.n	8004fc4 <_printf_i+0xa8>
 8004f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f52:	2b15      	cmp	r3, #21
 8004f54:	d8f6      	bhi.n	8004f44 <_printf_i+0x28>
 8004f56:	a001      	add	r0, pc, #4	; (adr r0, 8004f5c <_printf_i+0x40>)
 8004f58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fc9 	.word	0x08004fc9
 8004f64:	08004f45 	.word	0x08004f45
 8004f68:	08004f45 	.word	0x08004f45
 8004f6c:	08004f45 	.word	0x08004f45
 8004f70:	08004f45 	.word	0x08004f45
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004f45 	.word	0x08004f45
 8004f7c:	08004f45 	.word	0x08004f45
 8004f80:	08004f45 	.word	0x08004f45
 8004f84:	08004f45 	.word	0x08004f45
 8004f88:	080050d7 	.word	0x080050d7
 8004f8c:	08004ff9 	.word	0x08004ff9
 8004f90:	080050b9 	.word	0x080050b9
 8004f94:	08004f45 	.word	0x08004f45
 8004f98:	08004f45 	.word	0x08004f45
 8004f9c:	080050f9 	.word	0x080050f9
 8004fa0:	08004f45 	.word	0x08004f45
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08004f45 	.word	0x08004f45
 8004fac:	08004f45 	.word	0x08004f45
 8004fb0:	080050c1 	.word	0x080050c1
 8004fb4:	680b      	ldr	r3, [r1, #0]
 8004fb6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	600a      	str	r2, [r1, #0]
 8004fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0a4      	b.n	8005112 <_printf_i+0x1f6>
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	6808      	ldr	r0, [r1, #0]
 8004fcc:	062e      	lsls	r6, r5, #24
 8004fce:	f100 0304 	add.w	r3, r0, #4
 8004fd2:	d50a      	bpl.n	8004fea <_printf_i+0xce>
 8004fd4:	6805      	ldr	r5, [r0, #0]
 8004fd6:	600b      	str	r3, [r1, #0]
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	da03      	bge.n	8004fe4 <_printf_i+0xc8>
 8004fdc:	232d      	movs	r3, #45	; 0x2d
 8004fde:	426d      	negs	r5, r5
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	230a      	movs	r3, #10
 8004fe6:	485e      	ldr	r0, [pc, #376]	; (8005160 <_printf_i+0x244>)
 8004fe8:	e019      	b.n	800501e <_printf_i+0x102>
 8004fea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fee:	6805      	ldr	r5, [r0, #0]
 8004ff0:	600b      	str	r3, [r1, #0]
 8004ff2:	bf18      	it	ne
 8004ff4:	b22d      	sxthne	r5, r5
 8004ff6:	e7ef      	b.n	8004fd8 <_printf_i+0xbc>
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	1d18      	adds	r0, r3, #4
 8004ffe:	6008      	str	r0, [r1, #0]
 8005000:	0628      	lsls	r0, r5, #24
 8005002:	d501      	bpl.n	8005008 <_printf_i+0xec>
 8005004:	681d      	ldr	r5, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0xf2>
 8005008:	0669      	lsls	r1, r5, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0xe8>
 800500c:	881d      	ldrh	r5, [r3, #0]
 800500e:	2f6f      	cmp	r7, #111	; 0x6f
 8005010:	bf0c      	ite	eq
 8005012:	2308      	moveq	r3, #8
 8005014:	230a      	movne	r3, #10
 8005016:	4852      	ldr	r0, [pc, #328]	; (8005160 <_printf_i+0x244>)
 8005018:	2100      	movs	r1, #0
 800501a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800501e:	6866      	ldr	r6, [r4, #4]
 8005020:	2e00      	cmp	r6, #0
 8005022:	bfa8      	it	ge
 8005024:	6821      	ldrge	r1, [r4, #0]
 8005026:	60a6      	str	r6, [r4, #8]
 8005028:	bfa4      	itt	ge
 800502a:	f021 0104 	bicge.w	r1, r1, #4
 800502e:	6021      	strge	r1, [r4, #0]
 8005030:	b90d      	cbnz	r5, 8005036 <_printf_i+0x11a>
 8005032:	2e00      	cmp	r6, #0
 8005034:	d04d      	beq.n	80050d2 <_printf_i+0x1b6>
 8005036:	4616      	mov	r6, r2
 8005038:	fbb5 f1f3 	udiv	r1, r5, r3
 800503c:	fb03 5711 	mls	r7, r3, r1, r5
 8005040:	5dc7      	ldrb	r7, [r0, r7]
 8005042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005046:	462f      	mov	r7, r5
 8005048:	42bb      	cmp	r3, r7
 800504a:	460d      	mov	r5, r1
 800504c:	d9f4      	bls.n	8005038 <_printf_i+0x11c>
 800504e:	2b08      	cmp	r3, #8
 8005050:	d10b      	bne.n	800506a <_printf_i+0x14e>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	07df      	lsls	r7, r3, #31
 8005056:	d508      	bpl.n	800506a <_printf_i+0x14e>
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	6861      	ldr	r1, [r4, #4]
 800505c:	4299      	cmp	r1, r3
 800505e:	bfde      	ittt	le
 8005060:	2330      	movle	r3, #48	; 0x30
 8005062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800506a:	1b92      	subs	r2, r2, r6
 800506c:	6122      	str	r2, [r4, #16]
 800506e:	464b      	mov	r3, r9
 8005070:	4621      	mov	r1, r4
 8005072:	4640      	mov	r0, r8
 8005074:	f8cd a000 	str.w	sl, [sp]
 8005078:	aa03      	add	r2, sp, #12
 800507a:	f7ff fedf 	bl	8004e3c <_printf_common>
 800507e:	3001      	adds	r0, #1
 8005080:	d14c      	bne.n	800511c <_printf_i+0x200>
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	b004      	add	sp, #16
 8005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508c:	4834      	ldr	r0, [pc, #208]	; (8005160 <_printf_i+0x244>)
 800508e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005092:	680e      	ldr	r6, [r1, #0]
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	f856 5b04 	ldr.w	r5, [r6], #4
 800509a:	061f      	lsls	r7, r3, #24
 800509c:	600e      	str	r6, [r1, #0]
 800509e:	d514      	bpl.n	80050ca <_printf_i+0x1ae>
 80050a0:	07d9      	lsls	r1, r3, #31
 80050a2:	bf44      	itt	mi
 80050a4:	f043 0320 	orrmi.w	r3, r3, #32
 80050a8:	6023      	strmi	r3, [r4, #0]
 80050aa:	b91d      	cbnz	r5, 80050b4 <_printf_i+0x198>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	f023 0320 	bic.w	r3, r3, #32
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	2310      	movs	r3, #16
 80050b6:	e7af      	b.n	8005018 <_printf_i+0xfc>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	f043 0320 	orr.w	r3, r3, #32
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	2378      	movs	r3, #120	; 0x78
 80050c2:	4828      	ldr	r0, [pc, #160]	; (8005164 <_printf_i+0x248>)
 80050c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050c8:	e7e3      	b.n	8005092 <_printf_i+0x176>
 80050ca:	065e      	lsls	r6, r3, #25
 80050cc:	bf48      	it	mi
 80050ce:	b2ad      	uxthmi	r5, r5
 80050d0:	e7e6      	b.n	80050a0 <_printf_i+0x184>
 80050d2:	4616      	mov	r6, r2
 80050d4:	e7bb      	b.n	800504e <_printf_i+0x132>
 80050d6:	680b      	ldr	r3, [r1, #0]
 80050d8:	6826      	ldr	r6, [r4, #0]
 80050da:	1d1d      	adds	r5, r3, #4
 80050dc:	6960      	ldr	r0, [r4, #20]
 80050de:	600d      	str	r5, [r1, #0]
 80050e0:	0635      	lsls	r5, r6, #24
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	d501      	bpl.n	80050ea <_printf_i+0x1ce>
 80050e6:	6018      	str	r0, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <_printf_i+0x1d4>
 80050ea:	0671      	lsls	r1, r6, #25
 80050ec:	d5fb      	bpl.n	80050e6 <_printf_i+0x1ca>
 80050ee:	8018      	strh	r0, [r3, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	4616      	mov	r6, r2
 80050f4:	6123      	str	r3, [r4, #16]
 80050f6:	e7ba      	b.n	800506e <_printf_i+0x152>
 80050f8:	680b      	ldr	r3, [r1, #0]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	600a      	str	r2, [r1, #0]
 80050fe:	681e      	ldr	r6, [r3, #0]
 8005100:	2100      	movs	r1, #0
 8005102:	4630      	mov	r0, r6
 8005104:	6862      	ldr	r2, [r4, #4]
 8005106:	f000 ffcb 	bl	80060a0 <memchr>
 800510a:	b108      	cbz	r0, 8005110 <_printf_i+0x1f4>
 800510c:	1b80      	subs	r0, r0, r6
 800510e:	6060      	str	r0, [r4, #4]
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	2300      	movs	r3, #0
 8005116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511a:	e7a8      	b.n	800506e <_printf_i+0x152>
 800511c:	4632      	mov	r2, r6
 800511e:	4649      	mov	r1, r9
 8005120:	4640      	mov	r0, r8
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	47d0      	blx	sl
 8005126:	3001      	adds	r0, #1
 8005128:	d0ab      	beq.n	8005082 <_printf_i+0x166>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	079b      	lsls	r3, r3, #30
 800512e:	d413      	bmi.n	8005158 <_printf_i+0x23c>
 8005130:	68e0      	ldr	r0, [r4, #12]
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	4298      	cmp	r0, r3
 8005136:	bfb8      	it	lt
 8005138:	4618      	movlt	r0, r3
 800513a:	e7a4      	b.n	8005086 <_printf_i+0x16a>
 800513c:	2301      	movs	r3, #1
 800513e:	4632      	mov	r2, r6
 8005140:	4649      	mov	r1, r9
 8005142:	4640      	mov	r0, r8
 8005144:	47d0      	blx	sl
 8005146:	3001      	adds	r0, #1
 8005148:	d09b      	beq.n	8005082 <_printf_i+0x166>
 800514a:	3501      	adds	r5, #1
 800514c:	68e3      	ldr	r3, [r4, #12]
 800514e:	9903      	ldr	r1, [sp, #12]
 8005150:	1a5b      	subs	r3, r3, r1
 8005152:	42ab      	cmp	r3, r5
 8005154:	dcf2      	bgt.n	800513c <_printf_i+0x220>
 8005156:	e7eb      	b.n	8005130 <_printf_i+0x214>
 8005158:	2500      	movs	r5, #0
 800515a:	f104 0619 	add.w	r6, r4, #25
 800515e:	e7f5      	b.n	800514c <_printf_i+0x230>
 8005160:	080078ca 	.word	0x080078ca
 8005164:	080078db 	.word	0x080078db

08005168 <iprintf>:
 8005168:	b40f      	push	{r0, r1, r2, r3}
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <iprintf+0x2c>)
 800516c:	b513      	push	{r0, r1, r4, lr}
 800516e:	681c      	ldr	r4, [r3, #0]
 8005170:	b124      	cbz	r4, 800517c <iprintf+0x14>
 8005172:	69a3      	ldr	r3, [r4, #24]
 8005174:	b913      	cbnz	r3, 800517c <iprintf+0x14>
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fee4 	bl	8005f44 <__sinit>
 800517c:	ab05      	add	r3, sp, #20
 800517e:	4620      	mov	r0, r4
 8005180:	9a04      	ldr	r2, [sp, #16]
 8005182:	68a1      	ldr	r1, [r4, #8]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	f001 fc05 	bl	8006994 <_vfiprintf_r>
 800518a:	b002      	add	sp, #8
 800518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005190:	b004      	add	sp, #16
 8005192:	4770      	bx	lr
 8005194:	2000000c 	.word	0x2000000c

08005198 <quorem>:
 8005198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	6903      	ldr	r3, [r0, #16]
 800519e:	690c      	ldr	r4, [r1, #16]
 80051a0:	4607      	mov	r7, r0
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	f2c0 8083 	blt.w	80052ae <quorem+0x116>
 80051a8:	3c01      	subs	r4, #1
 80051aa:	f100 0514 	add.w	r5, r0, #20
 80051ae:	f101 0814 	add.w	r8, r1, #20
 80051b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051c0:	3301      	adds	r3, #1
 80051c2:	429a      	cmp	r2, r3
 80051c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051d0:	d332      	bcc.n	8005238 <quorem+0xa0>
 80051d2:	f04f 0e00 	mov.w	lr, #0
 80051d6:	4640      	mov	r0, r8
 80051d8:	46ac      	mov	ip, r5
 80051da:	46f2      	mov	sl, lr
 80051dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80051e0:	b293      	uxth	r3, r2
 80051e2:	fb06 e303 	mla	r3, r6, r3, lr
 80051e6:	0c12      	lsrs	r2, r2, #16
 80051e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051ec:	fb06 e202 	mla	r2, r6, r2, lr
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	ebaa 0303 	sub.w	r3, sl, r3
 80051f6:	f8dc a000 	ldr.w	sl, [ip]
 80051fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051fe:	fa1f fa8a 	uxth.w	sl, sl
 8005202:	4453      	add	r3, sl
 8005204:	fa1f fa82 	uxth.w	sl, r2
 8005208:	f8dc 2000 	ldr.w	r2, [ip]
 800520c:	4581      	cmp	r9, r0
 800520e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005212:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005216:	b29b      	uxth	r3, r3
 8005218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800521c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005220:	f84c 3b04 	str.w	r3, [ip], #4
 8005224:	d2da      	bcs.n	80051dc <quorem+0x44>
 8005226:	f855 300b 	ldr.w	r3, [r5, fp]
 800522a:	b92b      	cbnz	r3, 8005238 <quorem+0xa0>
 800522c:	9b01      	ldr	r3, [sp, #4]
 800522e:	3b04      	subs	r3, #4
 8005230:	429d      	cmp	r5, r3
 8005232:	461a      	mov	r2, r3
 8005234:	d32f      	bcc.n	8005296 <quorem+0xfe>
 8005236:	613c      	str	r4, [r7, #16]
 8005238:	4638      	mov	r0, r7
 800523a:	f001 f9c7 	bl	80065cc <__mcmp>
 800523e:	2800      	cmp	r0, #0
 8005240:	db25      	blt.n	800528e <quorem+0xf6>
 8005242:	4628      	mov	r0, r5
 8005244:	f04f 0c00 	mov.w	ip, #0
 8005248:	3601      	adds	r6, #1
 800524a:	f858 1b04 	ldr.w	r1, [r8], #4
 800524e:	f8d0 e000 	ldr.w	lr, [r0]
 8005252:	b28b      	uxth	r3, r1
 8005254:	ebac 0303 	sub.w	r3, ip, r3
 8005258:	fa1f f28e 	uxth.w	r2, lr
 800525c:	4413      	add	r3, r2
 800525e:	0c0a      	lsrs	r2, r1, #16
 8005260:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005268:	b29b      	uxth	r3, r3
 800526a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800526e:	45c1      	cmp	r9, r8
 8005270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005274:	f840 3b04 	str.w	r3, [r0], #4
 8005278:	d2e7      	bcs.n	800524a <quorem+0xb2>
 800527a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800527e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005282:	b922      	cbnz	r2, 800528e <quorem+0xf6>
 8005284:	3b04      	subs	r3, #4
 8005286:	429d      	cmp	r5, r3
 8005288:	461a      	mov	r2, r3
 800528a:	d30a      	bcc.n	80052a2 <quorem+0x10a>
 800528c:	613c      	str	r4, [r7, #16]
 800528e:	4630      	mov	r0, r6
 8005290:	b003      	add	sp, #12
 8005292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	3b04      	subs	r3, #4
 800529a:	2a00      	cmp	r2, #0
 800529c:	d1cb      	bne.n	8005236 <quorem+0x9e>
 800529e:	3c01      	subs	r4, #1
 80052a0:	e7c6      	b.n	8005230 <quorem+0x98>
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	3b04      	subs	r3, #4
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	d1f0      	bne.n	800528c <quorem+0xf4>
 80052aa:	3c01      	subs	r4, #1
 80052ac:	e7eb      	b.n	8005286 <quorem+0xee>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e7ee      	b.n	8005290 <quorem+0xf8>
 80052b2:	0000      	movs	r0, r0
 80052b4:	0000      	movs	r0, r0
	...

080052b8 <_dtoa_r>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	461f      	mov	r7, r3
 80052c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80052c2:	b099      	sub	sp, #100	; 0x64
 80052c4:	4605      	mov	r5, r0
 80052c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80052ce:	b974      	cbnz	r4, 80052ee <_dtoa_r+0x36>
 80052d0:	2010      	movs	r0, #16
 80052d2:	f000 fedd 	bl	8006090 <malloc>
 80052d6:	4602      	mov	r2, r0
 80052d8:	6268      	str	r0, [r5, #36]	; 0x24
 80052da:	b920      	cbnz	r0, 80052e6 <_dtoa_r+0x2e>
 80052dc:	21ea      	movs	r1, #234	; 0xea
 80052de:	4bae      	ldr	r3, [pc, #696]	; (8005598 <_dtoa_r+0x2e0>)
 80052e0:	48ae      	ldr	r0, [pc, #696]	; (800559c <_dtoa_r+0x2e4>)
 80052e2:	f001 fdad 	bl	8006e40 <__assert_func>
 80052e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052ea:	6004      	str	r4, [r0, #0]
 80052ec:	60c4      	str	r4, [r0, #12]
 80052ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	b151      	cbz	r1, 800530a <_dtoa_r+0x52>
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	2301      	movs	r3, #1
 80052f8:	4093      	lsls	r3, r2
 80052fa:	604a      	str	r2, [r1, #4]
 80052fc:	608b      	str	r3, [r1, #8]
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 ff2a 	bl	8006158 <_Bfree>
 8005304:	2200      	movs	r2, #0
 8005306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	1e3b      	subs	r3, r7, #0
 800530c:	bfaf      	iteee	ge
 800530e:	2300      	movge	r3, #0
 8005310:	2201      	movlt	r2, #1
 8005312:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005316:	9305      	strlt	r3, [sp, #20]
 8005318:	bfa8      	it	ge
 800531a:	f8c8 3000 	strge.w	r3, [r8]
 800531e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005322:	4b9f      	ldr	r3, [pc, #636]	; (80055a0 <_dtoa_r+0x2e8>)
 8005324:	bfb8      	it	lt
 8005326:	f8c8 2000 	strlt.w	r2, [r8]
 800532a:	ea33 0309 	bics.w	r3, r3, r9
 800532e:	d119      	bne.n	8005364 <_dtoa_r+0xac>
 8005330:	f242 730f 	movw	r3, #9999	; 0x270f
 8005334:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800533c:	4333      	orrs	r3, r6
 800533e:	f000 8580 	beq.w	8005e42 <_dtoa_r+0xb8a>
 8005342:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005344:	b953      	cbnz	r3, 800535c <_dtoa_r+0xa4>
 8005346:	4b97      	ldr	r3, [pc, #604]	; (80055a4 <_dtoa_r+0x2ec>)
 8005348:	e022      	b.n	8005390 <_dtoa_r+0xd8>
 800534a:	4b97      	ldr	r3, [pc, #604]	; (80055a8 <_dtoa_r+0x2f0>)
 800534c:	9308      	str	r3, [sp, #32]
 800534e:	3308      	adds	r3, #8
 8005350:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	9808      	ldr	r0, [sp, #32]
 8005356:	b019      	add	sp, #100	; 0x64
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	4b91      	ldr	r3, [pc, #580]	; (80055a4 <_dtoa_r+0x2ec>)
 800535e:	9308      	str	r3, [sp, #32]
 8005360:	3303      	adds	r3, #3
 8005362:	e7f5      	b.n	8005350 <_dtoa_r+0x98>
 8005364:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005368:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800536c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	f7fb fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8005378:	4680      	mov	r8, r0
 800537a:	b158      	cbz	r0, 8005394 <_dtoa_r+0xdc>
 800537c:	2301      	movs	r3, #1
 800537e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8559 	beq.w	8005e3c <_dtoa_r+0xb84>
 800538a:	4888      	ldr	r0, [pc, #544]	; (80055ac <_dtoa_r+0x2f4>)
 800538c:	6018      	str	r0, [r3, #0]
 800538e:	1e43      	subs	r3, r0, #1
 8005390:	9308      	str	r3, [sp, #32]
 8005392:	e7df      	b.n	8005354 <_dtoa_r+0x9c>
 8005394:	ab16      	add	r3, sp, #88	; 0x58
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	ab17      	add	r3, sp, #92	; 0x5c
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	4628      	mov	r0, r5
 800539e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053a2:	f001 f9bf 	bl	8006724 <__d2b>
 80053a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053aa:	4682      	mov	sl, r0
 80053ac:	2c00      	cmp	r4, #0
 80053ae:	d07e      	beq.n	80054ae <_dtoa_r+0x1f6>
 80053b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80053c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80053c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80053ca:	2200      	movs	r2, #0
 80053cc:	4b78      	ldr	r3, [pc, #480]	; (80055b0 <_dtoa_r+0x2f8>)
 80053ce:	f7fa fecb 	bl	8000168 <__aeabi_dsub>
 80053d2:	a36b      	add	r3, pc, #428	; (adr r3, 8005580 <_dtoa_r+0x2c8>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f87e 	bl	80004d8 <__aeabi_dmul>
 80053dc:	a36a      	add	r3, pc, #424	; (adr r3, 8005588 <_dtoa_r+0x2d0>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fa fec3 	bl	800016c <__adddf3>
 80053e6:	4606      	mov	r6, r0
 80053e8:	4620      	mov	r0, r4
 80053ea:	460f      	mov	r7, r1
 80053ec:	f7fb f80a 	bl	8000404 <__aeabi_i2d>
 80053f0:	a367      	add	r3, pc, #412	; (adr r3, 8005590 <_dtoa_r+0x2d8>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fb f86f 	bl	80004d8 <__aeabi_dmul>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4630      	mov	r0, r6
 8005400:	4639      	mov	r1, r7
 8005402:	f7fa feb3 	bl	800016c <__adddf3>
 8005406:	4606      	mov	r6, r0
 8005408:	460f      	mov	r7, r1
 800540a:	f7fb fb15 	bl	8000a38 <__aeabi_d2iz>
 800540e:	2200      	movs	r2, #0
 8005410:	4681      	mov	r9, r0
 8005412:	2300      	movs	r3, #0
 8005414:	4630      	mov	r0, r6
 8005416:	4639      	mov	r1, r7
 8005418:	f7fb fad0 	bl	80009bc <__aeabi_dcmplt>
 800541c:	b148      	cbz	r0, 8005432 <_dtoa_r+0x17a>
 800541e:	4648      	mov	r0, r9
 8005420:	f7fa fff0 	bl	8000404 <__aeabi_i2d>
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	f7fb fabe 	bl	80009a8 <__aeabi_dcmpeq>
 800542c:	b908      	cbnz	r0, 8005432 <_dtoa_r+0x17a>
 800542e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005432:	f1b9 0f16 	cmp.w	r9, #22
 8005436:	d857      	bhi.n	80054e8 <_dtoa_r+0x230>
 8005438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800543c:	4b5d      	ldr	r3, [pc, #372]	; (80055b4 <_dtoa_r+0x2fc>)
 800543e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fb fab9 	bl	80009bc <__aeabi_dcmplt>
 800544a:	2800      	cmp	r0, #0
 800544c:	d04e      	beq.n	80054ec <_dtoa_r+0x234>
 800544e:	2300      	movs	r3, #0
 8005450:	f109 39ff 	add.w	r9, r9, #4294967295
 8005454:	930f      	str	r3, [sp, #60]	; 0x3c
 8005456:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005458:	1b1c      	subs	r4, r3, r4
 800545a:	1e63      	subs	r3, r4, #1
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	bf49      	itett	mi
 8005460:	f1c4 0301 	rsbmi	r3, r4, #1
 8005464:	2300      	movpl	r3, #0
 8005466:	9306      	strmi	r3, [sp, #24]
 8005468:	2300      	movmi	r3, #0
 800546a:	bf54      	ite	pl
 800546c:	9306      	strpl	r3, [sp, #24]
 800546e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005470:	f1b9 0f00 	cmp.w	r9, #0
 8005474:	db3c      	blt.n	80054f0 <_dtoa_r+0x238>
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800547c:	444b      	add	r3, r9
 800547e:	9309      	str	r3, [sp, #36]	; 0x24
 8005480:	2300      	movs	r3, #0
 8005482:	930a      	str	r3, [sp, #40]	; 0x28
 8005484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005486:	2b09      	cmp	r3, #9
 8005488:	d86c      	bhi.n	8005564 <_dtoa_r+0x2ac>
 800548a:	2b05      	cmp	r3, #5
 800548c:	bfc4      	itt	gt
 800548e:	3b04      	subgt	r3, #4
 8005490:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005494:	bfc8      	it	gt
 8005496:	2400      	movgt	r4, #0
 8005498:	f1a3 0302 	sub.w	r3, r3, #2
 800549c:	bfd8      	it	le
 800549e:	2401      	movle	r4, #1
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	f200 808b 	bhi.w	80055bc <_dtoa_r+0x304>
 80054a6:	e8df f003 	tbb	[pc, r3]
 80054aa:	4f2d      	.short	0x4f2d
 80054ac:	5b4d      	.short	0x5b4d
 80054ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80054b2:	441c      	add	r4, r3
 80054b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	bfc3      	ittte	gt
 80054bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80054c4:	fa09 f303 	lslgt.w	r3, r9, r3
 80054c8:	f1c3 0320 	rsble	r3, r3, #32
 80054cc:	bfc6      	itte	gt
 80054ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054d2:	4318      	orrgt	r0, r3
 80054d4:	fa06 f003 	lslle.w	r0, r6, r3
 80054d8:	f7fa ff84 	bl	80003e4 <__aeabi_ui2d>
 80054dc:	2301      	movs	r3, #1
 80054de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054e2:	3c01      	subs	r4, #1
 80054e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80054e6:	e770      	b.n	80053ca <_dtoa_r+0x112>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e7b3      	b.n	8005454 <_dtoa_r+0x19c>
 80054ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80054ee:	e7b2      	b.n	8005456 <_dtoa_r+0x19e>
 80054f0:	9b06      	ldr	r3, [sp, #24]
 80054f2:	eba3 0309 	sub.w	r3, r3, r9
 80054f6:	9306      	str	r3, [sp, #24]
 80054f8:	f1c9 0300 	rsb	r3, r9, #0
 80054fc:	930a      	str	r3, [sp, #40]	; 0x28
 80054fe:	2300      	movs	r3, #0
 8005500:	930e      	str	r3, [sp, #56]	; 0x38
 8005502:	e7bf      	b.n	8005484 <_dtoa_r+0x1cc>
 8005504:	2300      	movs	r3, #0
 8005506:	930b      	str	r3, [sp, #44]	; 0x2c
 8005508:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800550a:	2b00      	cmp	r3, #0
 800550c:	dc59      	bgt.n	80055c2 <_dtoa_r+0x30a>
 800550e:	f04f 0b01 	mov.w	fp, #1
 8005512:	465b      	mov	r3, fp
 8005514:	f8cd b008 	str.w	fp, [sp, #8]
 8005518:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800551c:	2200      	movs	r2, #0
 800551e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005520:	6042      	str	r2, [r0, #4]
 8005522:	2204      	movs	r2, #4
 8005524:	f102 0614 	add.w	r6, r2, #20
 8005528:	429e      	cmp	r6, r3
 800552a:	6841      	ldr	r1, [r0, #4]
 800552c:	d94f      	bls.n	80055ce <_dtoa_r+0x316>
 800552e:	4628      	mov	r0, r5
 8005530:	f000 fdd2 	bl	80060d8 <_Balloc>
 8005534:	9008      	str	r0, [sp, #32]
 8005536:	2800      	cmp	r0, #0
 8005538:	d14d      	bne.n	80055d6 <_dtoa_r+0x31e>
 800553a:	4602      	mov	r2, r0
 800553c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <_dtoa_r+0x300>)
 8005542:	e6cd      	b.n	80052e0 <_dtoa_r+0x28>
 8005544:	2301      	movs	r3, #1
 8005546:	e7de      	b.n	8005506 <_dtoa_r+0x24e>
 8005548:	2300      	movs	r3, #0
 800554a:	930b      	str	r3, [sp, #44]	; 0x2c
 800554c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800554e:	eb09 0b03 	add.w	fp, r9, r3
 8005552:	f10b 0301 	add.w	r3, fp, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	9302      	str	r3, [sp, #8]
 800555a:	bfb8      	it	lt
 800555c:	2301      	movlt	r3, #1
 800555e:	e7dd      	b.n	800551c <_dtoa_r+0x264>
 8005560:	2301      	movs	r3, #1
 8005562:	e7f2      	b.n	800554a <_dtoa_r+0x292>
 8005564:	2401      	movs	r4, #1
 8005566:	2300      	movs	r3, #0
 8005568:	940b      	str	r4, [sp, #44]	; 0x2c
 800556a:	9322      	str	r3, [sp, #136]	; 0x88
 800556c:	f04f 3bff 	mov.w	fp, #4294967295
 8005570:	2200      	movs	r2, #0
 8005572:	2312      	movs	r3, #18
 8005574:	f8cd b008 	str.w	fp, [sp, #8]
 8005578:	9223      	str	r2, [sp, #140]	; 0x8c
 800557a:	e7cf      	b.n	800551c <_dtoa_r+0x264>
 800557c:	f3af 8000 	nop.w
 8005580:	636f4361 	.word	0x636f4361
 8005584:	3fd287a7 	.word	0x3fd287a7
 8005588:	8b60c8b3 	.word	0x8b60c8b3
 800558c:	3fc68a28 	.word	0x3fc68a28
 8005590:	509f79fb 	.word	0x509f79fb
 8005594:	3fd34413 	.word	0x3fd34413
 8005598:	080078f9 	.word	0x080078f9
 800559c:	08007910 	.word	0x08007910
 80055a0:	7ff00000 	.word	0x7ff00000
 80055a4:	080078f5 	.word	0x080078f5
 80055a8:	080078ec 	.word	0x080078ec
 80055ac:	080078c9 	.word	0x080078c9
 80055b0:	3ff80000 	.word	0x3ff80000
 80055b4:	08007a68 	.word	0x08007a68
 80055b8:	0800796f 	.word	0x0800796f
 80055bc:	2301      	movs	r3, #1
 80055be:	930b      	str	r3, [sp, #44]	; 0x2c
 80055c0:	e7d4      	b.n	800556c <_dtoa_r+0x2b4>
 80055c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80055c6:	465b      	mov	r3, fp
 80055c8:	f8cd b008 	str.w	fp, [sp, #8]
 80055cc:	e7a6      	b.n	800551c <_dtoa_r+0x264>
 80055ce:	3101      	adds	r1, #1
 80055d0:	6041      	str	r1, [r0, #4]
 80055d2:	0052      	lsls	r2, r2, #1
 80055d4:	e7a6      	b.n	8005524 <_dtoa_r+0x26c>
 80055d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055d8:	9a08      	ldr	r2, [sp, #32]
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	9b02      	ldr	r3, [sp, #8]
 80055de:	2b0e      	cmp	r3, #14
 80055e0:	f200 80a8 	bhi.w	8005734 <_dtoa_r+0x47c>
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	f000 80a5 	beq.w	8005734 <_dtoa_r+0x47c>
 80055ea:	f1b9 0f00 	cmp.w	r9, #0
 80055ee:	dd34      	ble.n	800565a <_dtoa_r+0x3a2>
 80055f0:	4a9a      	ldr	r2, [pc, #616]	; (800585c <_dtoa_r+0x5a4>)
 80055f2:	f009 030f 	and.w	r3, r9, #15
 80055f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80055fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005602:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005606:	ea4f 1429 	mov.w	r4, r9, asr #4
 800560a:	d016      	beq.n	800563a <_dtoa_r+0x382>
 800560c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005610:	4b93      	ldr	r3, [pc, #588]	; (8005860 <_dtoa_r+0x5a8>)
 8005612:	2703      	movs	r7, #3
 8005614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005618:	f7fb f888 	bl	800072c <__aeabi_ddiv>
 800561c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005620:	f004 040f 	and.w	r4, r4, #15
 8005624:	4e8e      	ldr	r6, [pc, #568]	; (8005860 <_dtoa_r+0x5a8>)
 8005626:	b954      	cbnz	r4, 800563e <_dtoa_r+0x386>
 8005628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800562c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005630:	f7fb f87c 	bl	800072c <__aeabi_ddiv>
 8005634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005638:	e029      	b.n	800568e <_dtoa_r+0x3d6>
 800563a:	2702      	movs	r7, #2
 800563c:	e7f2      	b.n	8005624 <_dtoa_r+0x36c>
 800563e:	07e1      	lsls	r1, r4, #31
 8005640:	d508      	bpl.n	8005654 <_dtoa_r+0x39c>
 8005642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005646:	e9d6 2300 	ldrd	r2, r3, [r6]
 800564a:	f7fa ff45 	bl	80004d8 <__aeabi_dmul>
 800564e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005652:	3701      	adds	r7, #1
 8005654:	1064      	asrs	r4, r4, #1
 8005656:	3608      	adds	r6, #8
 8005658:	e7e5      	b.n	8005626 <_dtoa_r+0x36e>
 800565a:	f000 80a5 	beq.w	80057a8 <_dtoa_r+0x4f0>
 800565e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005662:	f1c9 0400 	rsb	r4, r9, #0
 8005666:	4b7d      	ldr	r3, [pc, #500]	; (800585c <_dtoa_r+0x5a4>)
 8005668:	f004 020f 	and.w	r2, r4, #15
 800566c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa ff30 	bl	80004d8 <__aeabi_dmul>
 8005678:	2702      	movs	r7, #2
 800567a:	2300      	movs	r3, #0
 800567c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005680:	4e77      	ldr	r6, [pc, #476]	; (8005860 <_dtoa_r+0x5a8>)
 8005682:	1124      	asrs	r4, r4, #4
 8005684:	2c00      	cmp	r4, #0
 8005686:	f040 8084 	bne.w	8005792 <_dtoa_r+0x4da>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1d2      	bne.n	8005634 <_dtoa_r+0x37c>
 800568e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 808b 	beq.w	80057ac <_dtoa_r+0x4f4>
 8005696:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800569a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800569e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056a2:	2200      	movs	r2, #0
 80056a4:	4b6f      	ldr	r3, [pc, #444]	; (8005864 <_dtoa_r+0x5ac>)
 80056a6:	f7fb f989 	bl	80009bc <__aeabi_dcmplt>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d07e      	beq.n	80057ac <_dtoa_r+0x4f4>
 80056ae:	9b02      	ldr	r3, [sp, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d07b      	beq.n	80057ac <_dtoa_r+0x4f4>
 80056b4:	f1bb 0f00 	cmp.w	fp, #0
 80056b8:	dd38      	ble.n	800572c <_dtoa_r+0x474>
 80056ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056be:	2200      	movs	r2, #0
 80056c0:	4b69      	ldr	r3, [pc, #420]	; (8005868 <_dtoa_r+0x5b0>)
 80056c2:	f7fa ff09 	bl	80004d8 <__aeabi_dmul>
 80056c6:	465c      	mov	r4, fp
 80056c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056cc:	f109 38ff 	add.w	r8, r9, #4294967295
 80056d0:	3701      	adds	r7, #1
 80056d2:	4638      	mov	r0, r7
 80056d4:	f7fa fe96 	bl	8000404 <__aeabi_i2d>
 80056d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056dc:	f7fa fefc 	bl	80004d8 <__aeabi_dmul>
 80056e0:	2200      	movs	r2, #0
 80056e2:	4b62      	ldr	r3, [pc, #392]	; (800586c <_dtoa_r+0x5b4>)
 80056e4:	f7fa fd42 	bl	800016c <__adddf3>
 80056e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056f0:	9611      	str	r6, [sp, #68]	; 0x44
 80056f2:	2c00      	cmp	r4, #0
 80056f4:	d15d      	bne.n	80057b2 <_dtoa_r+0x4fa>
 80056f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056fa:	2200      	movs	r2, #0
 80056fc:	4b5c      	ldr	r3, [pc, #368]	; (8005870 <_dtoa_r+0x5b8>)
 80056fe:	f7fa fd33 	bl	8000168 <__aeabi_dsub>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800570a:	4633      	mov	r3, r6
 800570c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800570e:	f7fb f973 	bl	80009f8 <__aeabi_dcmpgt>
 8005712:	2800      	cmp	r0, #0
 8005714:	f040 829e 	bne.w	8005c54 <_dtoa_r+0x99c>
 8005718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800571c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800571e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005722:	f7fb f94b 	bl	80009bc <__aeabi_dcmplt>
 8005726:	2800      	cmp	r0, #0
 8005728:	f040 8292 	bne.w	8005c50 <_dtoa_r+0x998>
 800572c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005730:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005736:	2b00      	cmp	r3, #0
 8005738:	f2c0 8153 	blt.w	80059e2 <_dtoa_r+0x72a>
 800573c:	f1b9 0f0e 	cmp.w	r9, #14
 8005740:	f300 814f 	bgt.w	80059e2 <_dtoa_r+0x72a>
 8005744:	4b45      	ldr	r3, [pc, #276]	; (800585c <_dtoa_r+0x5a4>)
 8005746:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800574a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800574e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005754:	2b00      	cmp	r3, #0
 8005756:	f280 80db 	bge.w	8005910 <_dtoa_r+0x658>
 800575a:	9b02      	ldr	r3, [sp, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f300 80d7 	bgt.w	8005910 <_dtoa_r+0x658>
 8005762:	f040 8274 	bne.w	8005c4e <_dtoa_r+0x996>
 8005766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800576a:	2200      	movs	r2, #0
 800576c:	4b40      	ldr	r3, [pc, #256]	; (8005870 <_dtoa_r+0x5b8>)
 800576e:	f7fa feb3 	bl	80004d8 <__aeabi_dmul>
 8005772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005776:	f7fb f935 	bl	80009e4 <__aeabi_dcmpge>
 800577a:	9c02      	ldr	r4, [sp, #8]
 800577c:	4626      	mov	r6, r4
 800577e:	2800      	cmp	r0, #0
 8005780:	f040 824a 	bne.w	8005c18 <_dtoa_r+0x960>
 8005784:	2331      	movs	r3, #49	; 0x31
 8005786:	9f08      	ldr	r7, [sp, #32]
 8005788:	f109 0901 	add.w	r9, r9, #1
 800578c:	f807 3b01 	strb.w	r3, [r7], #1
 8005790:	e246      	b.n	8005c20 <_dtoa_r+0x968>
 8005792:	07e2      	lsls	r2, r4, #31
 8005794:	d505      	bpl.n	80057a2 <_dtoa_r+0x4ea>
 8005796:	e9d6 2300 	ldrd	r2, r3, [r6]
 800579a:	f7fa fe9d 	bl	80004d8 <__aeabi_dmul>
 800579e:	2301      	movs	r3, #1
 80057a0:	3701      	adds	r7, #1
 80057a2:	1064      	asrs	r4, r4, #1
 80057a4:	3608      	adds	r6, #8
 80057a6:	e76d      	b.n	8005684 <_dtoa_r+0x3cc>
 80057a8:	2702      	movs	r7, #2
 80057aa:	e770      	b.n	800568e <_dtoa_r+0x3d6>
 80057ac:	46c8      	mov	r8, r9
 80057ae:	9c02      	ldr	r4, [sp, #8]
 80057b0:	e78f      	b.n	80056d2 <_dtoa_r+0x41a>
 80057b2:	9908      	ldr	r1, [sp, #32]
 80057b4:	4b29      	ldr	r3, [pc, #164]	; (800585c <_dtoa_r+0x5a4>)
 80057b6:	4421      	add	r1, r4
 80057b8:	9112      	str	r1, [sp, #72]	; 0x48
 80057ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d055      	beq.n	8005878 <_dtoa_r+0x5c0>
 80057cc:	2000      	movs	r0, #0
 80057ce:	4929      	ldr	r1, [pc, #164]	; (8005874 <_dtoa_r+0x5bc>)
 80057d0:	f7fa ffac 	bl	800072c <__aeabi_ddiv>
 80057d4:	463b      	mov	r3, r7
 80057d6:	4632      	mov	r2, r6
 80057d8:	f7fa fcc6 	bl	8000168 <__aeabi_dsub>
 80057dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057e0:	9f08      	ldr	r7, [sp, #32]
 80057e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057e6:	f7fb f927 	bl	8000a38 <__aeabi_d2iz>
 80057ea:	4604      	mov	r4, r0
 80057ec:	f7fa fe0a 	bl	8000404 <__aeabi_i2d>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f8:	f7fa fcb6 	bl	8000168 <__aeabi_dsub>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	3430      	adds	r4, #48	; 0x30
 8005802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800580a:	f807 4b01 	strb.w	r4, [r7], #1
 800580e:	f7fb f8d5 	bl	80009bc <__aeabi_dcmplt>
 8005812:	2800      	cmp	r0, #0
 8005814:	d174      	bne.n	8005900 <_dtoa_r+0x648>
 8005816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800581a:	2000      	movs	r0, #0
 800581c:	4911      	ldr	r1, [pc, #68]	; (8005864 <_dtoa_r+0x5ac>)
 800581e:	f7fa fca3 	bl	8000168 <__aeabi_dsub>
 8005822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005826:	f7fb f8c9 	bl	80009bc <__aeabi_dcmplt>
 800582a:	2800      	cmp	r0, #0
 800582c:	f040 80b6 	bne.w	800599c <_dtoa_r+0x6e4>
 8005830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005832:	429f      	cmp	r7, r3
 8005834:	f43f af7a 	beq.w	800572c <_dtoa_r+0x474>
 8005838:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800583c:	2200      	movs	r2, #0
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <_dtoa_r+0x5b0>)
 8005840:	f7fa fe4a 	bl	80004d8 <__aeabi_dmul>
 8005844:	2200      	movs	r2, #0
 8005846:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800584a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <_dtoa_r+0x5b0>)
 8005850:	f7fa fe42 	bl	80004d8 <__aeabi_dmul>
 8005854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005858:	e7c3      	b.n	80057e2 <_dtoa_r+0x52a>
 800585a:	bf00      	nop
 800585c:	08007a68 	.word	0x08007a68
 8005860:	08007a40 	.word	0x08007a40
 8005864:	3ff00000 	.word	0x3ff00000
 8005868:	40240000 	.word	0x40240000
 800586c:	401c0000 	.word	0x401c0000
 8005870:	40140000 	.word	0x40140000
 8005874:	3fe00000 	.word	0x3fe00000
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fa fe2c 	bl	80004d8 <__aeabi_dmul>
 8005880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005882:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005886:	9c08      	ldr	r4, [sp, #32]
 8005888:	9314      	str	r3, [sp, #80]	; 0x50
 800588a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800588e:	f7fb f8d3 	bl	8000a38 <__aeabi_d2iz>
 8005892:	9015      	str	r0, [sp, #84]	; 0x54
 8005894:	f7fa fdb6 	bl	8000404 <__aeabi_i2d>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058a0:	f7fa fc62 	bl	8000168 <__aeabi_dsub>
 80058a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058a6:	4606      	mov	r6, r0
 80058a8:	3330      	adds	r3, #48	; 0x30
 80058aa:	f804 3b01 	strb.w	r3, [r4], #1
 80058ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058b0:	460f      	mov	r7, r1
 80058b2:	429c      	cmp	r4, r3
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	d124      	bne.n	8005904 <_dtoa_r+0x64c>
 80058ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058be:	4bb3      	ldr	r3, [pc, #716]	; (8005b8c <_dtoa_r+0x8d4>)
 80058c0:	f7fa fc54 	bl	800016c <__adddf3>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4630      	mov	r0, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	f7fb f894 	bl	80009f8 <__aeabi_dcmpgt>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d162      	bne.n	800599a <_dtoa_r+0x6e2>
 80058d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058d8:	2000      	movs	r0, #0
 80058da:	49ac      	ldr	r1, [pc, #688]	; (8005b8c <_dtoa_r+0x8d4>)
 80058dc:	f7fa fc44 	bl	8000168 <__aeabi_dsub>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4630      	mov	r0, r6
 80058e6:	4639      	mov	r1, r7
 80058e8:	f7fb f868 	bl	80009bc <__aeabi_dcmplt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f43f af1d 	beq.w	800572c <_dtoa_r+0x474>
 80058f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058f4:	1e7b      	subs	r3, r7, #1
 80058f6:	9314      	str	r3, [sp, #80]	; 0x50
 80058f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	d0f8      	beq.n	80058f2 <_dtoa_r+0x63a>
 8005900:	46c1      	mov	r9, r8
 8005902:	e03a      	b.n	800597a <_dtoa_r+0x6c2>
 8005904:	4ba2      	ldr	r3, [pc, #648]	; (8005b90 <_dtoa_r+0x8d8>)
 8005906:	f7fa fde7 	bl	80004d8 <__aeabi_dmul>
 800590a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800590e:	e7bc      	b.n	800588a <_dtoa_r+0x5d2>
 8005910:	9f08      	ldr	r7, [sp, #32]
 8005912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591a:	f7fa ff07 	bl	800072c <__aeabi_ddiv>
 800591e:	f7fb f88b 	bl	8000a38 <__aeabi_d2iz>
 8005922:	4604      	mov	r4, r0
 8005924:	f7fa fd6e 	bl	8000404 <__aeabi_i2d>
 8005928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800592c:	f7fa fdd4 	bl	80004d8 <__aeabi_dmul>
 8005930:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005934:	460b      	mov	r3, r1
 8005936:	4602      	mov	r2, r0
 8005938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800593c:	f7fa fc14 	bl	8000168 <__aeabi_dsub>
 8005940:	f807 6b01 	strb.w	r6, [r7], #1
 8005944:	9e08      	ldr	r6, [sp, #32]
 8005946:	9b02      	ldr	r3, [sp, #8]
 8005948:	1bbe      	subs	r6, r7, r6
 800594a:	42b3      	cmp	r3, r6
 800594c:	d13a      	bne.n	80059c4 <_dtoa_r+0x70c>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	f7fa fc0b 	bl	800016c <__adddf3>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800595e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005962:	f7fb f849 	bl	80009f8 <__aeabi_dcmpgt>
 8005966:	bb58      	cbnz	r0, 80059c0 <_dtoa_r+0x708>
 8005968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800596c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005970:	f7fb f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8005974:	b108      	cbz	r0, 800597a <_dtoa_r+0x6c2>
 8005976:	07e1      	lsls	r1, r4, #31
 8005978:	d422      	bmi.n	80059c0 <_dtoa_r+0x708>
 800597a:	4628      	mov	r0, r5
 800597c:	4651      	mov	r1, sl
 800597e:	f000 fbeb 	bl	8006158 <_Bfree>
 8005982:	2300      	movs	r3, #0
 8005984:	703b      	strb	r3, [r7, #0]
 8005986:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005988:	f109 0001 	add.w	r0, r9, #1
 800598c:	6018      	str	r0, [r3, #0]
 800598e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005990:	2b00      	cmp	r3, #0
 8005992:	f43f acdf 	beq.w	8005354 <_dtoa_r+0x9c>
 8005996:	601f      	str	r7, [r3, #0]
 8005998:	e4dc      	b.n	8005354 <_dtoa_r+0x9c>
 800599a:	4627      	mov	r7, r4
 800599c:	463b      	mov	r3, r7
 800599e:	461f      	mov	r7, r3
 80059a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059a4:	2a39      	cmp	r2, #57	; 0x39
 80059a6:	d107      	bne.n	80059b8 <_dtoa_r+0x700>
 80059a8:	9a08      	ldr	r2, [sp, #32]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d1f7      	bne.n	800599e <_dtoa_r+0x6e6>
 80059ae:	2230      	movs	r2, #48	; 0x30
 80059b0:	9908      	ldr	r1, [sp, #32]
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	700a      	strb	r2, [r1, #0]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	3201      	adds	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e79f      	b.n	8005900 <_dtoa_r+0x648>
 80059c0:	46c8      	mov	r8, r9
 80059c2:	e7eb      	b.n	800599c <_dtoa_r+0x6e4>
 80059c4:	2200      	movs	r2, #0
 80059c6:	4b72      	ldr	r3, [pc, #456]	; (8005b90 <_dtoa_r+0x8d8>)
 80059c8:	f7fa fd86 	bl	80004d8 <__aeabi_dmul>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2300      	movs	r3, #0
 80059d8:	f7fa ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80059dc:	2800      	cmp	r0, #0
 80059de:	d098      	beq.n	8005912 <_dtoa_r+0x65a>
 80059e0:	e7cb      	b.n	800597a <_dtoa_r+0x6c2>
 80059e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	f000 80cd 	beq.w	8005b84 <_dtoa_r+0x8cc>
 80059ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059ec:	2a01      	cmp	r2, #1
 80059ee:	f300 80af 	bgt.w	8005b50 <_dtoa_r+0x898>
 80059f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	f000 80a7 	beq.w	8005b48 <_dtoa_r+0x890>
 80059fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a00:	9f06      	ldr	r7, [sp, #24]
 8005a02:	9a06      	ldr	r2, [sp, #24]
 8005a04:	2101      	movs	r1, #1
 8005a06:	441a      	add	r2, r3
 8005a08:	9206      	str	r2, [sp, #24]
 8005a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	441a      	add	r2, r3
 8005a10:	9209      	str	r2, [sp, #36]	; 0x24
 8005a12:	f000 fc5b 	bl	80062cc <__i2b>
 8005a16:	4606      	mov	r6, r0
 8005a18:	2f00      	cmp	r7, #0
 8005a1a:	dd0c      	ble.n	8005a36 <_dtoa_r+0x77e>
 8005a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dd09      	ble.n	8005a36 <_dtoa_r+0x77e>
 8005a22:	42bb      	cmp	r3, r7
 8005a24:	bfa8      	it	ge
 8005a26:	463b      	movge	r3, r7
 8005a28:	9a06      	ldr	r2, [sp, #24]
 8005a2a:	1aff      	subs	r7, r7, r3
 8005a2c:	1ad2      	subs	r2, r2, r3
 8005a2e:	9206      	str	r2, [sp, #24]
 8005a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	9309      	str	r3, [sp, #36]	; 0x24
 8005a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a38:	b1f3      	cbz	r3, 8005a78 <_dtoa_r+0x7c0>
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80a9 	beq.w	8005b94 <_dtoa_r+0x8dc>
 8005a42:	2c00      	cmp	r4, #0
 8005a44:	dd10      	ble.n	8005a68 <_dtoa_r+0x7b0>
 8005a46:	4631      	mov	r1, r6
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 fcf8 	bl	8006440 <__pow5mult>
 8005a50:	4652      	mov	r2, sl
 8005a52:	4601      	mov	r1, r0
 8005a54:	4606      	mov	r6, r0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fc4e 	bl	80062f8 <__multiply>
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	4651      	mov	r1, sl
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 fb79 	bl	8006158 <_Bfree>
 8005a66:	46c2      	mov	sl, r8
 8005a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6a:	1b1a      	subs	r2, r3, r4
 8005a6c:	d004      	beq.n	8005a78 <_dtoa_r+0x7c0>
 8005a6e:	4651      	mov	r1, sl
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 fce5 	bl	8006440 <__pow5mult>
 8005a76:	4682      	mov	sl, r0
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 fc26 	bl	80062cc <__i2b>
 8005a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a82:	4604      	mov	r4, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f340 8087 	ble.w	8005b98 <_dtoa_r+0x8e0>
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fcd6 	bl	8006440 <__pow5mult>
 8005a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a96:	4604      	mov	r4, r0
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	f340 8080 	ble.w	8005b9e <_dtoa_r+0x8e6>
 8005a9e:	f04f 0800 	mov.w	r8, #0
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005aa8:	6918      	ldr	r0, [r3, #16]
 8005aaa:	f000 fbc1 	bl	8006230 <__hi0bits>
 8005aae:	f1c0 0020 	rsb	r0, r0, #32
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	4418      	add	r0, r3
 8005ab6:	f010 001f 	ands.w	r0, r0, #31
 8005aba:	f000 8092 	beq.w	8005be2 <_dtoa_r+0x92a>
 8005abe:	f1c0 0320 	rsb	r3, r0, #32
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	f340 808a 	ble.w	8005bdc <_dtoa_r+0x924>
 8005ac8:	f1c0 001c 	rsb	r0, r0, #28
 8005acc:	9b06      	ldr	r3, [sp, #24]
 8005ace:	4407      	add	r7, r0
 8005ad0:	4403      	add	r3, r0
 8005ad2:	9306      	str	r3, [sp, #24]
 8005ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad6:	4403      	add	r3, r0
 8005ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd05      	ble.n	8005aec <_dtoa_r+0x834>
 8005ae0:	4651      	mov	r1, sl
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 fd05 	bl	80064f4 <__lshift>
 8005aea:	4682      	mov	sl, r0
 8005aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd05      	ble.n	8005afe <_dtoa_r+0x846>
 8005af2:	4621      	mov	r1, r4
 8005af4:	461a      	mov	r2, r3
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 fcfc 	bl	80064f4 <__lshift>
 8005afc:	4604      	mov	r4, r0
 8005afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d070      	beq.n	8005be6 <_dtoa_r+0x92e>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4650      	mov	r0, sl
 8005b08:	f000 fd60 	bl	80065cc <__mcmp>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	da6a      	bge.n	8005be6 <_dtoa_r+0x92e>
 8005b10:	2300      	movs	r3, #0
 8005b12:	4651      	mov	r1, sl
 8005b14:	220a      	movs	r2, #10
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 fb40 	bl	800619c <__multadd>
 8005b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1e:	4682      	mov	sl, r0
 8005b20:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8193 	beq.w	8005e50 <_dtoa_r+0xb98>
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	220a      	movs	r2, #10
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 fb33 	bl	800619c <__multadd>
 8005b36:	f1bb 0f00 	cmp.w	fp, #0
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	f300 8093 	bgt.w	8005c66 <_dtoa_r+0x9ae>
 8005b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	dc57      	bgt.n	8005bf6 <_dtoa_r+0x93e>
 8005b46:	e08e      	b.n	8005c66 <_dtoa_r+0x9ae>
 8005b48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b4e:	e756      	b.n	80059fe <_dtoa_r+0x746>
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	1e5c      	subs	r4, r3, #1
 8005b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b56:	42a3      	cmp	r3, r4
 8005b58:	bfb7      	itett	lt
 8005b5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b5c:	1b1c      	subge	r4, r3, r4
 8005b5e:	1ae2      	sublt	r2, r4, r3
 8005b60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b62:	bfbe      	ittt	lt
 8005b64:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b66:	189b      	addlt	r3, r3, r2
 8005b68:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b6a:	9b02      	ldr	r3, [sp, #8]
 8005b6c:	bfb8      	it	lt
 8005b6e:	2400      	movlt	r4, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfbb      	ittet	lt
 8005b74:	9b06      	ldrlt	r3, [sp, #24]
 8005b76:	9a02      	ldrlt	r2, [sp, #8]
 8005b78:	9f06      	ldrge	r7, [sp, #24]
 8005b7a:	1a9f      	sublt	r7, r3, r2
 8005b7c:	bfac      	ite	ge
 8005b7e:	9b02      	ldrge	r3, [sp, #8]
 8005b80:	2300      	movlt	r3, #0
 8005b82:	e73e      	b.n	8005a02 <_dtoa_r+0x74a>
 8005b84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b86:	9f06      	ldr	r7, [sp, #24]
 8005b88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b8a:	e745      	b.n	8005a18 <_dtoa_r+0x760>
 8005b8c:	3fe00000 	.word	0x3fe00000
 8005b90:	40240000 	.word	0x40240000
 8005b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b96:	e76a      	b.n	8005a6e <_dtoa_r+0x7b6>
 8005b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	dc19      	bgt.n	8005bd2 <_dtoa_r+0x91a>
 8005b9e:	9b04      	ldr	r3, [sp, #16]
 8005ba0:	b9bb      	cbnz	r3, 8005bd2 <_dtoa_r+0x91a>
 8005ba2:	9b05      	ldr	r3, [sp, #20]
 8005ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba8:	b99b      	cbnz	r3, 8005bd2 <_dtoa_r+0x91a>
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	0d1b      	lsrs	r3, r3, #20
 8005bb2:	051b      	lsls	r3, r3, #20
 8005bb4:	b183      	cbz	r3, 8005bd8 <_dtoa_r+0x920>
 8005bb6:	f04f 0801 	mov.w	r8, #1
 8005bba:	9b06      	ldr	r3, [sp, #24]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	9306      	str	r3, [sp, #24]
 8005bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f47f af6a 	bne.w	8005aa2 <_dtoa_r+0x7ea>
 8005bce:	2001      	movs	r0, #1
 8005bd0:	e76f      	b.n	8005ab2 <_dtoa_r+0x7fa>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	e7f6      	b.n	8005bc6 <_dtoa_r+0x90e>
 8005bd8:	4698      	mov	r8, r3
 8005bda:	e7f4      	b.n	8005bc6 <_dtoa_r+0x90e>
 8005bdc:	f43f af7d 	beq.w	8005ada <_dtoa_r+0x822>
 8005be0:	4618      	mov	r0, r3
 8005be2:	301c      	adds	r0, #28
 8005be4:	e772      	b.n	8005acc <_dtoa_r+0x814>
 8005be6:	9b02      	ldr	r3, [sp, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dc36      	bgt.n	8005c5a <_dtoa_r+0x9a2>
 8005bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dd33      	ble.n	8005c5a <_dtoa_r+0x9a2>
 8005bf2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005bf6:	f1bb 0f00 	cmp.w	fp, #0
 8005bfa:	d10d      	bne.n	8005c18 <_dtoa_r+0x960>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	465b      	mov	r3, fp
 8005c00:	2205      	movs	r2, #5
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 faca 	bl	800619c <__multadd>
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4650      	mov	r0, sl
 8005c0e:	f000 fcdd 	bl	80065cc <__mcmp>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f73f adb6 	bgt.w	8005784 <_dtoa_r+0x4cc>
 8005c18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c1a:	9f08      	ldr	r7, [sp, #32]
 8005c1c:	ea6f 0903 	mvn.w	r9, r3
 8005c20:	f04f 0800 	mov.w	r8, #0
 8005c24:	4621      	mov	r1, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 fa96 	bl	8006158 <_Bfree>
 8005c2c:	2e00      	cmp	r6, #0
 8005c2e:	f43f aea4 	beq.w	800597a <_dtoa_r+0x6c2>
 8005c32:	f1b8 0f00 	cmp.w	r8, #0
 8005c36:	d005      	beq.n	8005c44 <_dtoa_r+0x98c>
 8005c38:	45b0      	cmp	r8, r6
 8005c3a:	d003      	beq.n	8005c44 <_dtoa_r+0x98c>
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 fa8a 	bl	8006158 <_Bfree>
 8005c44:	4631      	mov	r1, r6
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fa86 	bl	8006158 <_Bfree>
 8005c4c:	e695      	b.n	800597a <_dtoa_r+0x6c2>
 8005c4e:	2400      	movs	r4, #0
 8005c50:	4626      	mov	r6, r4
 8005c52:	e7e1      	b.n	8005c18 <_dtoa_r+0x960>
 8005c54:	46c1      	mov	r9, r8
 8005c56:	4626      	mov	r6, r4
 8005c58:	e594      	b.n	8005784 <_dtoa_r+0x4cc>
 8005c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80fc 	beq.w	8005e5e <_dtoa_r+0xba6>
 8005c66:	2f00      	cmp	r7, #0
 8005c68:	dd05      	ble.n	8005c76 <_dtoa_r+0x9be>
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	463a      	mov	r2, r7
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 fc40 	bl	80064f4 <__lshift>
 8005c74:	4606      	mov	r6, r0
 8005c76:	f1b8 0f00 	cmp.w	r8, #0
 8005c7a:	d05c      	beq.n	8005d36 <_dtoa_r+0xa7e>
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	6871      	ldr	r1, [r6, #4]
 8005c80:	f000 fa2a 	bl	80060d8 <_Balloc>
 8005c84:	4607      	mov	r7, r0
 8005c86:	b928      	cbnz	r0, 8005c94 <_dtoa_r+0x9dc>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c8e:	4b7e      	ldr	r3, [pc, #504]	; (8005e88 <_dtoa_r+0xbd0>)
 8005c90:	f7ff bb26 	b.w	80052e0 <_dtoa_r+0x28>
 8005c94:	6932      	ldr	r2, [r6, #16]
 8005c96:	f106 010c 	add.w	r1, r6, #12
 8005c9a:	3202      	adds	r2, #2
 8005c9c:	0092      	lsls	r2, r2, #2
 8005c9e:	300c      	adds	r0, #12
 8005ca0:	f000 fa0c 	bl	80060bc <memcpy>
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 fc23 	bl	80064f4 <__lshift>
 8005cae:	46b0      	mov	r8, r6
 8005cb0:	4606      	mov	r6, r0
 8005cb2:	9b08      	ldr	r3, [sp, #32]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	9302      	str	r3, [sp, #8]
 8005cb8:	9b08      	ldr	r3, [sp, #32]
 8005cba:	445b      	add	r3, fp
 8005cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc6:	9b02      	ldr	r3, [sp, #8]
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4650      	mov	r0, sl
 8005ccc:	f103 3bff 	add.w	fp, r3, #4294967295
 8005cd0:	f7ff fa62 	bl	8005198 <quorem>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4641      	mov	r1, r8
 8005cd8:	3330      	adds	r3, #48	; 0x30
 8005cda:	9004      	str	r0, [sp, #16]
 8005cdc:	4650      	mov	r0, sl
 8005cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce0:	f000 fc74 	bl	80065cc <__mcmp>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	9006      	str	r0, [sp, #24]
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 fc8a 	bl	8006604 <__mdiff>
 8005cf0:	68c2      	ldr	r2, [r0, #12]
 8005cf2:	4607      	mov	r7, r0
 8005cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf6:	bb02      	cbnz	r2, 8005d3a <_dtoa_r+0xa82>
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	4650      	mov	r0, sl
 8005cfc:	f000 fc66 	bl	80065cc <__mcmp>
 8005d00:	4602      	mov	r2, r0
 8005d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d04:	4639      	mov	r1, r7
 8005d06:	4628      	mov	r0, r5
 8005d08:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005d0c:	f000 fa24 	bl	8006158 <_Bfree>
 8005d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d14:	9f02      	ldr	r7, [sp, #8]
 8005d16:	ea43 0102 	orr.w	r1, r3, r2
 8005d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d20:	d10d      	bne.n	8005d3e <_dtoa_r+0xa86>
 8005d22:	2b39      	cmp	r3, #57	; 0x39
 8005d24:	d027      	beq.n	8005d76 <_dtoa_r+0xabe>
 8005d26:	9a06      	ldr	r2, [sp, #24]
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	dd01      	ble.n	8005d30 <_dtoa_r+0xa78>
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	3331      	adds	r3, #49	; 0x31
 8005d30:	f88b 3000 	strb.w	r3, [fp]
 8005d34:	e776      	b.n	8005c24 <_dtoa_r+0x96c>
 8005d36:	4630      	mov	r0, r6
 8005d38:	e7b9      	b.n	8005cae <_dtoa_r+0x9f6>
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	e7e2      	b.n	8005d04 <_dtoa_r+0xa4c>
 8005d3e:	9906      	ldr	r1, [sp, #24]
 8005d40:	2900      	cmp	r1, #0
 8005d42:	db04      	blt.n	8005d4e <_dtoa_r+0xa96>
 8005d44:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d46:	4301      	orrs	r1, r0
 8005d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4a:	4301      	orrs	r1, r0
 8005d4c:	d120      	bne.n	8005d90 <_dtoa_r+0xad8>
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	ddee      	ble.n	8005d30 <_dtoa_r+0xa78>
 8005d52:	4651      	mov	r1, sl
 8005d54:	2201      	movs	r2, #1
 8005d56:	4628      	mov	r0, r5
 8005d58:	9302      	str	r3, [sp, #8]
 8005d5a:	f000 fbcb 	bl	80064f4 <__lshift>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4682      	mov	sl, r0
 8005d62:	f000 fc33 	bl	80065cc <__mcmp>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	9b02      	ldr	r3, [sp, #8]
 8005d6a:	dc02      	bgt.n	8005d72 <_dtoa_r+0xaba>
 8005d6c:	d1e0      	bne.n	8005d30 <_dtoa_r+0xa78>
 8005d6e:	07da      	lsls	r2, r3, #31
 8005d70:	d5de      	bpl.n	8005d30 <_dtoa_r+0xa78>
 8005d72:	2b39      	cmp	r3, #57	; 0x39
 8005d74:	d1da      	bne.n	8005d2c <_dtoa_r+0xa74>
 8005d76:	2339      	movs	r3, #57	; 0x39
 8005d78:	f88b 3000 	strb.w	r3, [fp]
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	461f      	mov	r7, r3
 8005d80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	2a39      	cmp	r2, #57	; 0x39
 8005d88:	d050      	beq.n	8005e2c <_dtoa_r+0xb74>
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e749      	b.n	8005c24 <_dtoa_r+0x96c>
 8005d90:	2a00      	cmp	r2, #0
 8005d92:	dd03      	ble.n	8005d9c <_dtoa_r+0xae4>
 8005d94:	2b39      	cmp	r3, #57	; 0x39
 8005d96:	d0ee      	beq.n	8005d76 <_dtoa_r+0xabe>
 8005d98:	3301      	adds	r3, #1
 8005d9a:	e7c9      	b.n	8005d30 <_dtoa_r+0xa78>
 8005d9c:	9a02      	ldr	r2, [sp, #8]
 8005d9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005da0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005da4:	428a      	cmp	r2, r1
 8005da6:	d02a      	beq.n	8005dfe <_dtoa_r+0xb46>
 8005da8:	4651      	mov	r1, sl
 8005daa:	2300      	movs	r3, #0
 8005dac:	220a      	movs	r2, #10
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f9f4 	bl	800619c <__multadd>
 8005db4:	45b0      	cmp	r8, r6
 8005db6:	4682      	mov	sl, r0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	f04f 020a 	mov.w	r2, #10
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	d107      	bne.n	8005dd6 <_dtoa_r+0xb1e>
 8005dc6:	f000 f9e9 	bl	800619c <__multadd>
 8005dca:	4680      	mov	r8, r0
 8005dcc:	4606      	mov	r6, r0
 8005dce:	9b02      	ldr	r3, [sp, #8]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	9302      	str	r3, [sp, #8]
 8005dd4:	e777      	b.n	8005cc6 <_dtoa_r+0xa0e>
 8005dd6:	f000 f9e1 	bl	800619c <__multadd>
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4680      	mov	r8, r0
 8005dde:	2300      	movs	r3, #0
 8005de0:	220a      	movs	r2, #10
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f9da 	bl	800619c <__multadd>
 8005de8:	4606      	mov	r6, r0
 8005dea:	e7f0      	b.n	8005dce <_dtoa_r+0xb16>
 8005dec:	f1bb 0f00 	cmp.w	fp, #0
 8005df0:	bfcc      	ite	gt
 8005df2:	465f      	movgt	r7, fp
 8005df4:	2701      	movle	r7, #1
 8005df6:	f04f 0800 	mov.w	r8, #0
 8005dfa:	9a08      	ldr	r2, [sp, #32]
 8005dfc:	4417      	add	r7, r2
 8005dfe:	4651      	mov	r1, sl
 8005e00:	2201      	movs	r2, #1
 8005e02:	4628      	mov	r0, r5
 8005e04:	9302      	str	r3, [sp, #8]
 8005e06:	f000 fb75 	bl	80064f4 <__lshift>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	f000 fbdd 	bl	80065cc <__mcmp>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	dcb2      	bgt.n	8005d7c <_dtoa_r+0xac4>
 8005e16:	d102      	bne.n	8005e1e <_dtoa_r+0xb66>
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	07db      	lsls	r3, r3, #31
 8005e1c:	d4ae      	bmi.n	8005d7c <_dtoa_r+0xac4>
 8005e1e:	463b      	mov	r3, r7
 8005e20:	461f      	mov	r7, r3
 8005e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e26:	2a30      	cmp	r2, #48	; 0x30
 8005e28:	d0fa      	beq.n	8005e20 <_dtoa_r+0xb68>
 8005e2a:	e6fb      	b.n	8005c24 <_dtoa_r+0x96c>
 8005e2c:	9a08      	ldr	r2, [sp, #32]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d1a5      	bne.n	8005d7e <_dtoa_r+0xac6>
 8005e32:	2331      	movs	r3, #49	; 0x31
 8005e34:	f109 0901 	add.w	r9, r9, #1
 8005e38:	7013      	strb	r3, [r2, #0]
 8005e3a:	e6f3      	b.n	8005c24 <_dtoa_r+0x96c>
 8005e3c:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <_dtoa_r+0xbd4>)
 8005e3e:	f7ff baa7 	b.w	8005390 <_dtoa_r+0xd8>
 8005e42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f47f aa80 	bne.w	800534a <_dtoa_r+0x92>
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <_dtoa_r+0xbd8>)
 8005e4c:	f7ff baa0 	b.w	8005390 <_dtoa_r+0xd8>
 8005e50:	f1bb 0f00 	cmp.w	fp, #0
 8005e54:	dc03      	bgt.n	8005e5e <_dtoa_r+0xba6>
 8005e56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f73f aecc 	bgt.w	8005bf6 <_dtoa_r+0x93e>
 8005e5e:	9f08      	ldr	r7, [sp, #32]
 8005e60:	4621      	mov	r1, r4
 8005e62:	4650      	mov	r0, sl
 8005e64:	f7ff f998 	bl	8005198 <quorem>
 8005e68:	9a08      	ldr	r2, [sp, #32]
 8005e6a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e6e:	f807 3b01 	strb.w	r3, [r7], #1
 8005e72:	1aba      	subs	r2, r7, r2
 8005e74:	4593      	cmp	fp, r2
 8005e76:	ddb9      	ble.n	8005dec <_dtoa_r+0xb34>
 8005e78:	4651      	mov	r1, sl
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	220a      	movs	r2, #10
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 f98c 	bl	800619c <__multadd>
 8005e84:	4682      	mov	sl, r0
 8005e86:	e7eb      	b.n	8005e60 <_dtoa_r+0xba8>
 8005e88:	0800796f 	.word	0x0800796f
 8005e8c:	080078c8 	.word	0x080078c8
 8005e90:	080078ec 	.word	0x080078ec

08005e94 <std>:
 8005e94:	2300      	movs	r3, #0
 8005e96:	b510      	push	{r4, lr}
 8005e98:	4604      	mov	r4, r0
 8005e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea2:	6083      	str	r3, [r0, #8]
 8005ea4:	8181      	strh	r1, [r0, #12]
 8005ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ea8:	81c2      	strh	r2, [r0, #14]
 8005eaa:	6183      	str	r3, [r0, #24]
 8005eac:	4619      	mov	r1, r3
 8005eae:	2208      	movs	r2, #8
 8005eb0:	305c      	adds	r0, #92	; 0x5c
 8005eb2:	f7fe fcf1 	bl	8004898 <memset>
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <std+0x38>)
 8005eb8:	6224      	str	r4, [r4, #32]
 8005eba:	6263      	str	r3, [r4, #36]	; 0x24
 8005ebc:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <std+0x3c>)
 8005ebe:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <std+0x40>)
 8005ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <std+0x44>)
 8005ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	bf00      	nop
 8005ecc:	08006c15 	.word	0x08006c15
 8005ed0:	08006c37 	.word	0x08006c37
 8005ed4:	08006c6f 	.word	0x08006c6f
 8005ed8:	08006c93 	.word	0x08006c93

08005edc <_cleanup_r>:
 8005edc:	4901      	ldr	r1, [pc, #4]	; (8005ee4 <_cleanup_r+0x8>)
 8005ede:	f000 b8af 	b.w	8006040 <_fwalk_reent>
 8005ee2:	bf00      	nop
 8005ee4:	08006fa9 	.word	0x08006fa9

08005ee8 <__sfmoreglue>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	2568      	movs	r5, #104	; 0x68
 8005eec:	1e4a      	subs	r2, r1, #1
 8005eee:	4355      	muls	r5, r2
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ef6:	f000 fccb 	bl	8006890 <_malloc_r>
 8005efa:	4604      	mov	r4, r0
 8005efc:	b140      	cbz	r0, 8005f10 <__sfmoreglue+0x28>
 8005efe:	2100      	movs	r1, #0
 8005f00:	e9c0 1600 	strd	r1, r6, [r0]
 8005f04:	300c      	adds	r0, #12
 8005f06:	60a0      	str	r0, [r4, #8]
 8005f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f0c:	f7fe fcc4 	bl	8004898 <memset>
 8005f10:	4620      	mov	r0, r4
 8005f12:	bd70      	pop	{r4, r5, r6, pc}

08005f14 <__sfp_lock_acquire>:
 8005f14:	4801      	ldr	r0, [pc, #4]	; (8005f1c <__sfp_lock_acquire+0x8>)
 8005f16:	f000 b8b8 	b.w	800608a <__retarget_lock_acquire_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	20003ff4 	.word	0x20003ff4

08005f20 <__sfp_lock_release>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__sfp_lock_release+0x8>)
 8005f22:	f000 b8b3 	b.w	800608c <__retarget_lock_release_recursive>
 8005f26:	bf00      	nop
 8005f28:	20003ff4 	.word	0x20003ff4

08005f2c <__sinit_lock_acquire>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__sinit_lock_acquire+0x8>)
 8005f2e:	f000 b8ac 	b.w	800608a <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	20003fef 	.word	0x20003fef

08005f38 <__sinit_lock_release>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sinit_lock_release+0x8>)
 8005f3a:	f000 b8a7 	b.w	800608c <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20003fef 	.word	0x20003fef

08005f44 <__sinit>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	f7ff fff0 	bl	8005f2c <__sinit_lock_acquire>
 8005f4c:	69a3      	ldr	r3, [r4, #24]
 8005f4e:	b11b      	cbz	r3, 8005f58 <__sinit+0x14>
 8005f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f54:	f7ff bff0 	b.w	8005f38 <__sinit_lock_release>
 8005f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <__sinit+0x68>)
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <__sinit+0x6c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	bf08      	it	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bf08      	it	eq
 8005f70:	61a3      	streq	r3, [r4, #24]
 8005f72:	f000 f81f 	bl	8005fb4 <__sfp>
 8005f76:	6060      	str	r0, [r4, #4]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 f81b 	bl	8005fb4 <__sfp>
 8005f7e:	60a0      	str	r0, [r4, #8]
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 f817 	bl	8005fb4 <__sfp>
 8005f86:	2200      	movs	r2, #0
 8005f88:	2104      	movs	r1, #4
 8005f8a:	60e0      	str	r0, [r4, #12]
 8005f8c:	6860      	ldr	r0, [r4, #4]
 8005f8e:	f7ff ff81 	bl	8005e94 <std>
 8005f92:	2201      	movs	r2, #1
 8005f94:	2109      	movs	r1, #9
 8005f96:	68a0      	ldr	r0, [r4, #8]
 8005f98:	f7ff ff7c 	bl	8005e94 <std>
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	2112      	movs	r1, #18
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	f7ff ff77 	bl	8005e94 <std>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61a3      	str	r3, [r4, #24]
 8005faa:	e7d1      	b.n	8005f50 <__sinit+0xc>
 8005fac:	080078b4 	.word	0x080078b4
 8005fb0:	08005edd 	.word	0x08005edd

08005fb4 <__sfp>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	f7ff ffac 	bl	8005f14 <__sfp_lock_acquire>
 8005fbc:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <__sfp+0x84>)
 8005fbe:	681e      	ldr	r6, [r3, #0]
 8005fc0:	69b3      	ldr	r3, [r6, #24]
 8005fc2:	b913      	cbnz	r3, 8005fca <__sfp+0x16>
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f7ff ffbd 	bl	8005f44 <__sinit>
 8005fca:	3648      	adds	r6, #72	; 0x48
 8005fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	d503      	bpl.n	8005fdc <__sfp+0x28>
 8005fd4:	6833      	ldr	r3, [r6, #0]
 8005fd6:	b30b      	cbz	r3, 800601c <__sfp+0x68>
 8005fd8:	6836      	ldr	r6, [r6, #0]
 8005fda:	e7f7      	b.n	8005fcc <__sfp+0x18>
 8005fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fe0:	b9d5      	cbnz	r5, 8006018 <__sfp+0x64>
 8005fe2:	4b16      	ldr	r3, [pc, #88]	; (800603c <__sfp+0x88>)
 8005fe4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fe8:	60e3      	str	r3, [r4, #12]
 8005fea:	6665      	str	r5, [r4, #100]	; 0x64
 8005fec:	f000 f84c 	bl	8006088 <__retarget_lock_init_recursive>
 8005ff0:	f7ff ff96 	bl	8005f20 <__sfp_lock_release>
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006000:	6025      	str	r5, [r4, #0]
 8006002:	61a5      	str	r5, [r4, #24]
 8006004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006008:	f7fe fc46 	bl	8004898 <memset>
 800600c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006014:	4620      	mov	r0, r4
 8006016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006018:	3468      	adds	r4, #104	; 0x68
 800601a:	e7d9      	b.n	8005fd0 <__sfp+0x1c>
 800601c:	2104      	movs	r1, #4
 800601e:	4638      	mov	r0, r7
 8006020:	f7ff ff62 	bl	8005ee8 <__sfmoreglue>
 8006024:	4604      	mov	r4, r0
 8006026:	6030      	str	r0, [r6, #0]
 8006028:	2800      	cmp	r0, #0
 800602a:	d1d5      	bne.n	8005fd8 <__sfp+0x24>
 800602c:	f7ff ff78 	bl	8005f20 <__sfp_lock_release>
 8006030:	230c      	movs	r3, #12
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	e7ee      	b.n	8006014 <__sfp+0x60>
 8006036:	bf00      	nop
 8006038:	080078b4 	.word	0x080078b4
 800603c:	ffff0001 	.word	0xffff0001

08006040 <_fwalk_reent>:
 8006040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006044:	4606      	mov	r6, r0
 8006046:	4688      	mov	r8, r1
 8006048:	2700      	movs	r7, #0
 800604a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800604e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006052:	f1b9 0901 	subs.w	r9, r9, #1
 8006056:	d505      	bpl.n	8006064 <_fwalk_reent+0x24>
 8006058:	6824      	ldr	r4, [r4, #0]
 800605a:	2c00      	cmp	r4, #0
 800605c:	d1f7      	bne.n	800604e <_fwalk_reent+0xe>
 800605e:	4638      	mov	r0, r7
 8006060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006064:	89ab      	ldrh	r3, [r5, #12]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d907      	bls.n	800607a <_fwalk_reent+0x3a>
 800606a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800606e:	3301      	adds	r3, #1
 8006070:	d003      	beq.n	800607a <_fwalk_reent+0x3a>
 8006072:	4629      	mov	r1, r5
 8006074:	4630      	mov	r0, r6
 8006076:	47c0      	blx	r8
 8006078:	4307      	orrs	r7, r0
 800607a:	3568      	adds	r5, #104	; 0x68
 800607c:	e7e9      	b.n	8006052 <_fwalk_reent+0x12>
	...

08006080 <_localeconv_r>:
 8006080:	4800      	ldr	r0, [pc, #0]	; (8006084 <_localeconv_r+0x4>)
 8006082:	4770      	bx	lr
 8006084:	20000160 	.word	0x20000160

08006088 <__retarget_lock_init_recursive>:
 8006088:	4770      	bx	lr

0800608a <__retarget_lock_acquire_recursive>:
 800608a:	4770      	bx	lr

0800608c <__retarget_lock_release_recursive>:
 800608c:	4770      	bx	lr
	...

08006090 <malloc>:
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <malloc+0xc>)
 8006092:	4601      	mov	r1, r0
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f000 bbfb 	b.w	8006890 <_malloc_r>
 800609a:	bf00      	nop
 800609c:	2000000c 	.word	0x2000000c

080060a0 <memchr>:
 80060a0:	4603      	mov	r3, r0
 80060a2:	b510      	push	{r4, lr}
 80060a4:	b2c9      	uxtb	r1, r1
 80060a6:	4402      	add	r2, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	d101      	bne.n	80060b2 <memchr+0x12>
 80060ae:	2000      	movs	r0, #0
 80060b0:	e003      	b.n	80060ba <memchr+0x1a>
 80060b2:	7804      	ldrb	r4, [r0, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	428c      	cmp	r4, r1
 80060b8:	d1f6      	bne.n	80060a8 <memchr+0x8>
 80060ba:	bd10      	pop	{r4, pc}

080060bc <memcpy>:
 80060bc:	440a      	add	r2, r1
 80060be:	4291      	cmp	r1, r2
 80060c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060c4:	d100      	bne.n	80060c8 <memcpy+0xc>
 80060c6:	4770      	bx	lr
 80060c8:	b510      	push	{r4, lr}
 80060ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ce:	4291      	cmp	r1, r2
 80060d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d4:	d1f9      	bne.n	80060ca <memcpy+0xe>
 80060d6:	bd10      	pop	{r4, pc}

080060d8 <_Balloc>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060dc:	4604      	mov	r4, r0
 80060de:	460d      	mov	r5, r1
 80060e0:	b976      	cbnz	r6, 8006100 <_Balloc+0x28>
 80060e2:	2010      	movs	r0, #16
 80060e4:	f7ff ffd4 	bl	8006090 <malloc>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6260      	str	r0, [r4, #36]	; 0x24
 80060ec:	b920      	cbnz	r0, 80060f8 <_Balloc+0x20>
 80060ee:	2166      	movs	r1, #102	; 0x66
 80060f0:	4b17      	ldr	r3, [pc, #92]	; (8006150 <_Balloc+0x78>)
 80060f2:	4818      	ldr	r0, [pc, #96]	; (8006154 <_Balloc+0x7c>)
 80060f4:	f000 fea4 	bl	8006e40 <__assert_func>
 80060f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060fc:	6006      	str	r6, [r0, #0]
 80060fe:	60c6      	str	r6, [r0, #12]
 8006100:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006102:	68f3      	ldr	r3, [r6, #12]
 8006104:	b183      	cbz	r3, 8006128 <_Balloc+0x50>
 8006106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800610e:	b9b8      	cbnz	r0, 8006140 <_Balloc+0x68>
 8006110:	2101      	movs	r1, #1
 8006112:	fa01 f605 	lsl.w	r6, r1, r5
 8006116:	1d72      	adds	r2, r6, #5
 8006118:	4620      	mov	r0, r4
 800611a:	0092      	lsls	r2, r2, #2
 800611c:	f000 fb5e 	bl	80067dc <_calloc_r>
 8006120:	b160      	cbz	r0, 800613c <_Balloc+0x64>
 8006122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006126:	e00e      	b.n	8006146 <_Balloc+0x6e>
 8006128:	2221      	movs	r2, #33	; 0x21
 800612a:	2104      	movs	r1, #4
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fb55 	bl	80067dc <_calloc_r>
 8006132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006134:	60f0      	str	r0, [r6, #12]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e4      	bne.n	8006106 <_Balloc+0x2e>
 800613c:	2000      	movs	r0, #0
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	6802      	ldr	r2, [r0, #0]
 8006142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006146:	2300      	movs	r3, #0
 8006148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800614c:	e7f7      	b.n	800613e <_Balloc+0x66>
 800614e:	bf00      	nop
 8006150:	080078f9 	.word	0x080078f9
 8006154:	080079e0 	.word	0x080079e0

08006158 <_Bfree>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800615c:	4605      	mov	r5, r0
 800615e:	460c      	mov	r4, r1
 8006160:	b976      	cbnz	r6, 8006180 <_Bfree+0x28>
 8006162:	2010      	movs	r0, #16
 8006164:	f7ff ff94 	bl	8006090 <malloc>
 8006168:	4602      	mov	r2, r0
 800616a:	6268      	str	r0, [r5, #36]	; 0x24
 800616c:	b920      	cbnz	r0, 8006178 <_Bfree+0x20>
 800616e:	218a      	movs	r1, #138	; 0x8a
 8006170:	4b08      	ldr	r3, [pc, #32]	; (8006194 <_Bfree+0x3c>)
 8006172:	4809      	ldr	r0, [pc, #36]	; (8006198 <_Bfree+0x40>)
 8006174:	f000 fe64 	bl	8006e40 <__assert_func>
 8006178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800617c:	6006      	str	r6, [r0, #0]
 800617e:	60c6      	str	r6, [r0, #12]
 8006180:	b13c      	cbz	r4, 8006192 <_Bfree+0x3a>
 8006182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006184:	6862      	ldr	r2, [r4, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800618c:	6021      	str	r1, [r4, #0]
 800618e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	080078f9 	.word	0x080078f9
 8006198:	080079e0 	.word	0x080079e0

0800619c <__multadd>:
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	4698      	mov	r8, r3
 80061a2:	460c      	mov	r4, r1
 80061a4:	2300      	movs	r3, #0
 80061a6:	690e      	ldr	r6, [r1, #16]
 80061a8:	4607      	mov	r7, r0
 80061aa:	f101 0014 	add.w	r0, r1, #20
 80061ae:	6805      	ldr	r5, [r0, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	b2a9      	uxth	r1, r5
 80061b4:	fb02 8101 	mla	r1, r2, r1, r8
 80061b8:	0c2d      	lsrs	r5, r5, #16
 80061ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80061be:	fb02 c505 	mla	r5, r2, r5, ip
 80061c2:	b289      	uxth	r1, r1
 80061c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80061c8:	429e      	cmp	r6, r3
 80061ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80061ce:	f840 1b04 	str.w	r1, [r0], #4
 80061d2:	dcec      	bgt.n	80061ae <__multadd+0x12>
 80061d4:	f1b8 0f00 	cmp.w	r8, #0
 80061d8:	d022      	beq.n	8006220 <__multadd+0x84>
 80061da:	68a3      	ldr	r3, [r4, #8]
 80061dc:	42b3      	cmp	r3, r6
 80061de:	dc19      	bgt.n	8006214 <__multadd+0x78>
 80061e0:	6861      	ldr	r1, [r4, #4]
 80061e2:	4638      	mov	r0, r7
 80061e4:	3101      	adds	r1, #1
 80061e6:	f7ff ff77 	bl	80060d8 <_Balloc>
 80061ea:	4605      	mov	r5, r0
 80061ec:	b928      	cbnz	r0, 80061fa <__multadd+0x5e>
 80061ee:	4602      	mov	r2, r0
 80061f0:	21b5      	movs	r1, #181	; 0xb5
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <__multadd+0x8c>)
 80061f4:	480d      	ldr	r0, [pc, #52]	; (800622c <__multadd+0x90>)
 80061f6:	f000 fe23 	bl	8006e40 <__assert_func>
 80061fa:	6922      	ldr	r2, [r4, #16]
 80061fc:	f104 010c 	add.w	r1, r4, #12
 8006200:	3202      	adds	r2, #2
 8006202:	0092      	lsls	r2, r2, #2
 8006204:	300c      	adds	r0, #12
 8006206:	f7ff ff59 	bl	80060bc <memcpy>
 800620a:	4621      	mov	r1, r4
 800620c:	4638      	mov	r0, r7
 800620e:	f7ff ffa3 	bl	8006158 <_Bfree>
 8006212:	462c      	mov	r4, r5
 8006214:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006218:	3601      	adds	r6, #1
 800621a:	f8c3 8014 	str.w	r8, [r3, #20]
 800621e:	6126      	str	r6, [r4, #16]
 8006220:	4620      	mov	r0, r4
 8006222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006226:	bf00      	nop
 8006228:	0800796f 	.word	0x0800796f
 800622c:	080079e0 	.word	0x080079e0

08006230 <__hi0bits>:
 8006230:	0c02      	lsrs	r2, r0, #16
 8006232:	0412      	lsls	r2, r2, #16
 8006234:	4603      	mov	r3, r0
 8006236:	b9ca      	cbnz	r2, 800626c <__hi0bits+0x3c>
 8006238:	0403      	lsls	r3, r0, #16
 800623a:	2010      	movs	r0, #16
 800623c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006240:	bf04      	itt	eq
 8006242:	021b      	lsleq	r3, r3, #8
 8006244:	3008      	addeq	r0, #8
 8006246:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800624a:	bf04      	itt	eq
 800624c:	011b      	lsleq	r3, r3, #4
 800624e:	3004      	addeq	r0, #4
 8006250:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006254:	bf04      	itt	eq
 8006256:	009b      	lsleq	r3, r3, #2
 8006258:	3002      	addeq	r0, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	db05      	blt.n	800626a <__hi0bits+0x3a>
 800625e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006262:	f100 0001 	add.w	r0, r0, #1
 8006266:	bf08      	it	eq
 8006268:	2020      	moveq	r0, #32
 800626a:	4770      	bx	lr
 800626c:	2000      	movs	r0, #0
 800626e:	e7e5      	b.n	800623c <__hi0bits+0xc>

08006270 <__lo0bits>:
 8006270:	6803      	ldr	r3, [r0, #0]
 8006272:	4602      	mov	r2, r0
 8006274:	f013 0007 	ands.w	r0, r3, #7
 8006278:	d00b      	beq.n	8006292 <__lo0bits+0x22>
 800627a:	07d9      	lsls	r1, r3, #31
 800627c:	d422      	bmi.n	80062c4 <__lo0bits+0x54>
 800627e:	0798      	lsls	r0, r3, #30
 8006280:	bf49      	itett	mi
 8006282:	085b      	lsrmi	r3, r3, #1
 8006284:	089b      	lsrpl	r3, r3, #2
 8006286:	2001      	movmi	r0, #1
 8006288:	6013      	strmi	r3, [r2, #0]
 800628a:	bf5c      	itt	pl
 800628c:	2002      	movpl	r0, #2
 800628e:	6013      	strpl	r3, [r2, #0]
 8006290:	4770      	bx	lr
 8006292:	b299      	uxth	r1, r3
 8006294:	b909      	cbnz	r1, 800629a <__lo0bits+0x2a>
 8006296:	2010      	movs	r0, #16
 8006298:	0c1b      	lsrs	r3, r3, #16
 800629a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800629e:	bf04      	itt	eq
 80062a0:	0a1b      	lsreq	r3, r3, #8
 80062a2:	3008      	addeq	r0, #8
 80062a4:	0719      	lsls	r1, r3, #28
 80062a6:	bf04      	itt	eq
 80062a8:	091b      	lsreq	r3, r3, #4
 80062aa:	3004      	addeq	r0, #4
 80062ac:	0799      	lsls	r1, r3, #30
 80062ae:	bf04      	itt	eq
 80062b0:	089b      	lsreq	r3, r3, #2
 80062b2:	3002      	addeq	r0, #2
 80062b4:	07d9      	lsls	r1, r3, #31
 80062b6:	d403      	bmi.n	80062c0 <__lo0bits+0x50>
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	f100 0001 	add.w	r0, r0, #1
 80062be:	d003      	beq.n	80062c8 <__lo0bits+0x58>
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	4770      	bx	lr
 80062c4:	2000      	movs	r0, #0
 80062c6:	4770      	bx	lr
 80062c8:	2020      	movs	r0, #32
 80062ca:	4770      	bx	lr

080062cc <__i2b>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	460c      	mov	r4, r1
 80062d0:	2101      	movs	r1, #1
 80062d2:	f7ff ff01 	bl	80060d8 <_Balloc>
 80062d6:	4602      	mov	r2, r0
 80062d8:	b928      	cbnz	r0, 80062e6 <__i2b+0x1a>
 80062da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062de:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <__i2b+0x24>)
 80062e0:	4804      	ldr	r0, [pc, #16]	; (80062f4 <__i2b+0x28>)
 80062e2:	f000 fdad 	bl	8006e40 <__assert_func>
 80062e6:	2301      	movs	r3, #1
 80062e8:	6144      	str	r4, [r0, #20]
 80062ea:	6103      	str	r3, [r0, #16]
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	0800796f 	.word	0x0800796f
 80062f4:	080079e0 	.word	0x080079e0

080062f8 <__multiply>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	4614      	mov	r4, r2
 80062fe:	690a      	ldr	r2, [r1, #16]
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	460d      	mov	r5, r1
 8006304:	429a      	cmp	r2, r3
 8006306:	bfbe      	ittt	lt
 8006308:	460b      	movlt	r3, r1
 800630a:	4625      	movlt	r5, r4
 800630c:	461c      	movlt	r4, r3
 800630e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006312:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006316:	68ab      	ldr	r3, [r5, #8]
 8006318:	6869      	ldr	r1, [r5, #4]
 800631a:	eb0a 0709 	add.w	r7, sl, r9
 800631e:	42bb      	cmp	r3, r7
 8006320:	b085      	sub	sp, #20
 8006322:	bfb8      	it	lt
 8006324:	3101      	addlt	r1, #1
 8006326:	f7ff fed7 	bl	80060d8 <_Balloc>
 800632a:	b930      	cbnz	r0, 800633a <__multiply+0x42>
 800632c:	4602      	mov	r2, r0
 800632e:	f240 115d 	movw	r1, #349	; 0x15d
 8006332:	4b41      	ldr	r3, [pc, #260]	; (8006438 <__multiply+0x140>)
 8006334:	4841      	ldr	r0, [pc, #260]	; (800643c <__multiply+0x144>)
 8006336:	f000 fd83 	bl	8006e40 <__assert_func>
 800633a:	f100 0614 	add.w	r6, r0, #20
 800633e:	4633      	mov	r3, r6
 8006340:	2200      	movs	r2, #0
 8006342:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006346:	4543      	cmp	r3, r8
 8006348:	d31e      	bcc.n	8006388 <__multiply+0x90>
 800634a:	f105 0c14 	add.w	ip, r5, #20
 800634e:	f104 0314 	add.w	r3, r4, #20
 8006352:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006356:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800635a:	9202      	str	r2, [sp, #8]
 800635c:	ebac 0205 	sub.w	r2, ip, r5
 8006360:	3a15      	subs	r2, #21
 8006362:	f022 0203 	bic.w	r2, r2, #3
 8006366:	3204      	adds	r2, #4
 8006368:	f105 0115 	add.w	r1, r5, #21
 800636c:	458c      	cmp	ip, r1
 800636e:	bf38      	it	cc
 8006370:	2204      	movcc	r2, #4
 8006372:	9201      	str	r2, [sp, #4]
 8006374:	9a02      	ldr	r2, [sp, #8]
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d808      	bhi.n	800638e <__multiply+0x96>
 800637c:	2f00      	cmp	r7, #0
 800637e:	dc55      	bgt.n	800642c <__multiply+0x134>
 8006380:	6107      	str	r7, [r0, #16]
 8006382:	b005      	add	sp, #20
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	f843 2b04 	str.w	r2, [r3], #4
 800638c:	e7db      	b.n	8006346 <__multiply+0x4e>
 800638e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006392:	f1ba 0f00 	cmp.w	sl, #0
 8006396:	d020      	beq.n	80063da <__multiply+0xe2>
 8006398:	46b1      	mov	r9, r6
 800639a:	2200      	movs	r2, #0
 800639c:	f105 0e14 	add.w	lr, r5, #20
 80063a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80063a4:	f8d9 b000 	ldr.w	fp, [r9]
 80063a8:	b2a1      	uxth	r1, r4
 80063aa:	fa1f fb8b 	uxth.w	fp, fp
 80063ae:	fb0a b101 	mla	r1, sl, r1, fp
 80063b2:	4411      	add	r1, r2
 80063b4:	f8d9 2000 	ldr.w	r2, [r9]
 80063b8:	0c24      	lsrs	r4, r4, #16
 80063ba:	0c12      	lsrs	r2, r2, #16
 80063bc:	fb0a 2404 	mla	r4, sl, r4, r2
 80063c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80063c4:	b289      	uxth	r1, r1
 80063c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80063ca:	45f4      	cmp	ip, lr
 80063cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80063d0:	f849 1b04 	str.w	r1, [r9], #4
 80063d4:	d8e4      	bhi.n	80063a0 <__multiply+0xa8>
 80063d6:	9901      	ldr	r1, [sp, #4]
 80063d8:	5072      	str	r2, [r6, r1]
 80063da:	9a03      	ldr	r2, [sp, #12]
 80063dc:	3304      	adds	r3, #4
 80063de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063e2:	f1b9 0f00 	cmp.w	r9, #0
 80063e6:	d01f      	beq.n	8006428 <__multiply+0x130>
 80063e8:	46b6      	mov	lr, r6
 80063ea:	f04f 0a00 	mov.w	sl, #0
 80063ee:	6834      	ldr	r4, [r6, #0]
 80063f0:	f105 0114 	add.w	r1, r5, #20
 80063f4:	880a      	ldrh	r2, [r1, #0]
 80063f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80063fa:	b2a4      	uxth	r4, r4
 80063fc:	fb09 b202 	mla	r2, r9, r2, fp
 8006400:	4492      	add	sl, r2
 8006402:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006406:	f84e 4b04 	str.w	r4, [lr], #4
 800640a:	f851 4b04 	ldr.w	r4, [r1], #4
 800640e:	f8be 2000 	ldrh.w	r2, [lr]
 8006412:	0c24      	lsrs	r4, r4, #16
 8006414:	fb09 2404 	mla	r4, r9, r4, r2
 8006418:	458c      	cmp	ip, r1
 800641a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800641e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006422:	d8e7      	bhi.n	80063f4 <__multiply+0xfc>
 8006424:	9a01      	ldr	r2, [sp, #4]
 8006426:	50b4      	str	r4, [r6, r2]
 8006428:	3604      	adds	r6, #4
 800642a:	e7a3      	b.n	8006374 <__multiply+0x7c>
 800642c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1a5      	bne.n	8006380 <__multiply+0x88>
 8006434:	3f01      	subs	r7, #1
 8006436:	e7a1      	b.n	800637c <__multiply+0x84>
 8006438:	0800796f 	.word	0x0800796f
 800643c:	080079e0 	.word	0x080079e0

08006440 <__pow5mult>:
 8006440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006444:	4615      	mov	r5, r2
 8006446:	f012 0203 	ands.w	r2, r2, #3
 800644a:	4606      	mov	r6, r0
 800644c:	460f      	mov	r7, r1
 800644e:	d007      	beq.n	8006460 <__pow5mult+0x20>
 8006450:	4c25      	ldr	r4, [pc, #148]	; (80064e8 <__pow5mult+0xa8>)
 8006452:	3a01      	subs	r2, #1
 8006454:	2300      	movs	r3, #0
 8006456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800645a:	f7ff fe9f 	bl	800619c <__multadd>
 800645e:	4607      	mov	r7, r0
 8006460:	10ad      	asrs	r5, r5, #2
 8006462:	d03d      	beq.n	80064e0 <__pow5mult+0xa0>
 8006464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006466:	b97c      	cbnz	r4, 8006488 <__pow5mult+0x48>
 8006468:	2010      	movs	r0, #16
 800646a:	f7ff fe11 	bl	8006090 <malloc>
 800646e:	4602      	mov	r2, r0
 8006470:	6270      	str	r0, [r6, #36]	; 0x24
 8006472:	b928      	cbnz	r0, 8006480 <__pow5mult+0x40>
 8006474:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006478:	4b1c      	ldr	r3, [pc, #112]	; (80064ec <__pow5mult+0xac>)
 800647a:	481d      	ldr	r0, [pc, #116]	; (80064f0 <__pow5mult+0xb0>)
 800647c:	f000 fce0 	bl	8006e40 <__assert_func>
 8006480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006484:	6004      	str	r4, [r0, #0]
 8006486:	60c4      	str	r4, [r0, #12]
 8006488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800648c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006490:	b94c      	cbnz	r4, 80064a6 <__pow5mult+0x66>
 8006492:	f240 2171 	movw	r1, #625	; 0x271
 8006496:	4630      	mov	r0, r6
 8006498:	f7ff ff18 	bl	80062cc <__i2b>
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80064a4:	6003      	str	r3, [r0, #0]
 80064a6:	f04f 0900 	mov.w	r9, #0
 80064aa:	07eb      	lsls	r3, r5, #31
 80064ac:	d50a      	bpl.n	80064c4 <__pow5mult+0x84>
 80064ae:	4639      	mov	r1, r7
 80064b0:	4622      	mov	r2, r4
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff ff20 	bl	80062f8 <__multiply>
 80064b8:	4680      	mov	r8, r0
 80064ba:	4639      	mov	r1, r7
 80064bc:	4630      	mov	r0, r6
 80064be:	f7ff fe4b 	bl	8006158 <_Bfree>
 80064c2:	4647      	mov	r7, r8
 80064c4:	106d      	asrs	r5, r5, #1
 80064c6:	d00b      	beq.n	80064e0 <__pow5mult+0xa0>
 80064c8:	6820      	ldr	r0, [r4, #0]
 80064ca:	b938      	cbnz	r0, 80064dc <__pow5mult+0x9c>
 80064cc:	4622      	mov	r2, r4
 80064ce:	4621      	mov	r1, r4
 80064d0:	4630      	mov	r0, r6
 80064d2:	f7ff ff11 	bl	80062f8 <__multiply>
 80064d6:	6020      	str	r0, [r4, #0]
 80064d8:	f8c0 9000 	str.w	r9, [r0]
 80064dc:	4604      	mov	r4, r0
 80064de:	e7e4      	b.n	80064aa <__pow5mult+0x6a>
 80064e0:	4638      	mov	r0, r7
 80064e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e6:	bf00      	nop
 80064e8:	08007b30 	.word	0x08007b30
 80064ec:	080078f9 	.word	0x080078f9
 80064f0:	080079e0 	.word	0x080079e0

080064f4 <__lshift>:
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	460c      	mov	r4, r1
 80064fa:	4607      	mov	r7, r0
 80064fc:	4691      	mov	r9, r2
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	6849      	ldr	r1, [r1, #4]
 8006502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006506:	68a3      	ldr	r3, [r4, #8]
 8006508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800650c:	f108 0601 	add.w	r6, r8, #1
 8006510:	42b3      	cmp	r3, r6
 8006512:	db0b      	blt.n	800652c <__lshift+0x38>
 8006514:	4638      	mov	r0, r7
 8006516:	f7ff fddf 	bl	80060d8 <_Balloc>
 800651a:	4605      	mov	r5, r0
 800651c:	b948      	cbnz	r0, 8006532 <__lshift+0x3e>
 800651e:	4602      	mov	r2, r0
 8006520:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006524:	4b27      	ldr	r3, [pc, #156]	; (80065c4 <__lshift+0xd0>)
 8006526:	4828      	ldr	r0, [pc, #160]	; (80065c8 <__lshift+0xd4>)
 8006528:	f000 fc8a 	bl	8006e40 <__assert_func>
 800652c:	3101      	adds	r1, #1
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	e7ee      	b.n	8006510 <__lshift+0x1c>
 8006532:	2300      	movs	r3, #0
 8006534:	f100 0114 	add.w	r1, r0, #20
 8006538:	f100 0210 	add.w	r2, r0, #16
 800653c:	4618      	mov	r0, r3
 800653e:	4553      	cmp	r3, sl
 8006540:	db33      	blt.n	80065aa <__lshift+0xb6>
 8006542:	6920      	ldr	r0, [r4, #16]
 8006544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006548:	f104 0314 	add.w	r3, r4, #20
 800654c:	f019 091f 	ands.w	r9, r9, #31
 8006550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006558:	d02b      	beq.n	80065b2 <__lshift+0xbe>
 800655a:	468a      	mov	sl, r1
 800655c:	2200      	movs	r2, #0
 800655e:	f1c9 0e20 	rsb	lr, r9, #32
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	fa00 f009 	lsl.w	r0, r0, r9
 8006568:	4302      	orrs	r2, r0
 800656a:	f84a 2b04 	str.w	r2, [sl], #4
 800656e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006572:	459c      	cmp	ip, r3
 8006574:	fa22 f20e 	lsr.w	r2, r2, lr
 8006578:	d8f3      	bhi.n	8006562 <__lshift+0x6e>
 800657a:	ebac 0304 	sub.w	r3, ip, r4
 800657e:	3b15      	subs	r3, #21
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	3304      	adds	r3, #4
 8006586:	f104 0015 	add.w	r0, r4, #21
 800658a:	4584      	cmp	ip, r0
 800658c:	bf38      	it	cc
 800658e:	2304      	movcc	r3, #4
 8006590:	50ca      	str	r2, [r1, r3]
 8006592:	b10a      	cbz	r2, 8006598 <__lshift+0xa4>
 8006594:	f108 0602 	add.w	r6, r8, #2
 8006598:	3e01      	subs	r6, #1
 800659a:	4638      	mov	r0, r7
 800659c:	4621      	mov	r1, r4
 800659e:	612e      	str	r6, [r5, #16]
 80065a0:	f7ff fdda 	bl	8006158 <_Bfree>
 80065a4:	4628      	mov	r0, r5
 80065a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80065ae:	3301      	adds	r3, #1
 80065b0:	e7c5      	b.n	800653e <__lshift+0x4a>
 80065b2:	3904      	subs	r1, #4
 80065b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b8:	459c      	cmp	ip, r3
 80065ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80065be:	d8f9      	bhi.n	80065b4 <__lshift+0xc0>
 80065c0:	e7ea      	b.n	8006598 <__lshift+0xa4>
 80065c2:	bf00      	nop
 80065c4:	0800796f 	.word	0x0800796f
 80065c8:	080079e0 	.word	0x080079e0

080065cc <__mcmp>:
 80065cc:	4603      	mov	r3, r0
 80065ce:	690a      	ldr	r2, [r1, #16]
 80065d0:	6900      	ldr	r0, [r0, #16]
 80065d2:	b530      	push	{r4, r5, lr}
 80065d4:	1a80      	subs	r0, r0, r2
 80065d6:	d10d      	bne.n	80065f4 <__mcmp+0x28>
 80065d8:	3314      	adds	r3, #20
 80065da:	3114      	adds	r1, #20
 80065dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065ec:	4295      	cmp	r5, r2
 80065ee:	d002      	beq.n	80065f6 <__mcmp+0x2a>
 80065f0:	d304      	bcc.n	80065fc <__mcmp+0x30>
 80065f2:	2001      	movs	r0, #1
 80065f4:	bd30      	pop	{r4, r5, pc}
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	d3f4      	bcc.n	80065e4 <__mcmp+0x18>
 80065fa:	e7fb      	b.n	80065f4 <__mcmp+0x28>
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	e7f8      	b.n	80065f4 <__mcmp+0x28>
	...

08006604 <__mdiff>:
 8006604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	460c      	mov	r4, r1
 800660a:	4606      	mov	r6, r0
 800660c:	4611      	mov	r1, r2
 800660e:	4620      	mov	r0, r4
 8006610:	4692      	mov	sl, r2
 8006612:	f7ff ffdb 	bl	80065cc <__mcmp>
 8006616:	1e05      	subs	r5, r0, #0
 8006618:	d111      	bne.n	800663e <__mdiff+0x3a>
 800661a:	4629      	mov	r1, r5
 800661c:	4630      	mov	r0, r6
 800661e:	f7ff fd5b 	bl	80060d8 <_Balloc>
 8006622:	4602      	mov	r2, r0
 8006624:	b928      	cbnz	r0, 8006632 <__mdiff+0x2e>
 8006626:	f240 2132 	movw	r1, #562	; 0x232
 800662a:	4b3c      	ldr	r3, [pc, #240]	; (800671c <__mdiff+0x118>)
 800662c:	483c      	ldr	r0, [pc, #240]	; (8006720 <__mdiff+0x11c>)
 800662e:	f000 fc07 	bl	8006e40 <__assert_func>
 8006632:	2301      	movs	r3, #1
 8006634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006638:	4610      	mov	r0, r2
 800663a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663e:	bfa4      	itt	ge
 8006640:	4653      	movge	r3, sl
 8006642:	46a2      	movge	sl, r4
 8006644:	4630      	mov	r0, r6
 8006646:	f8da 1004 	ldr.w	r1, [sl, #4]
 800664a:	bfa6      	itte	ge
 800664c:	461c      	movge	r4, r3
 800664e:	2500      	movge	r5, #0
 8006650:	2501      	movlt	r5, #1
 8006652:	f7ff fd41 	bl	80060d8 <_Balloc>
 8006656:	4602      	mov	r2, r0
 8006658:	b918      	cbnz	r0, 8006662 <__mdiff+0x5e>
 800665a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <__mdiff+0x118>)
 8006660:	e7e4      	b.n	800662c <__mdiff+0x28>
 8006662:	f100 0814 	add.w	r8, r0, #20
 8006666:	f8da 7010 	ldr.w	r7, [sl, #16]
 800666a:	60c5      	str	r5, [r0, #12]
 800666c:	f04f 0c00 	mov.w	ip, #0
 8006670:	f10a 0514 	add.w	r5, sl, #20
 8006674:	f10a 0010 	add.w	r0, sl, #16
 8006678:	46c2      	mov	sl, r8
 800667a:	6926      	ldr	r6, [r4, #16]
 800667c:	f104 0914 	add.w	r9, r4, #20
 8006680:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006684:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006688:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800668c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006690:	fa1f f18b 	uxth.w	r1, fp
 8006694:	4461      	add	r1, ip
 8006696:	fa1f fc83 	uxth.w	ip, r3
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	eba1 010c 	sub.w	r1, r1, ip
 80066a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80066a8:	b289      	uxth	r1, r1
 80066aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066ae:	454e      	cmp	r6, r9
 80066b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80066b4:	f84a 3b04 	str.w	r3, [sl], #4
 80066b8:	d8e6      	bhi.n	8006688 <__mdiff+0x84>
 80066ba:	1b33      	subs	r3, r6, r4
 80066bc:	3b15      	subs	r3, #21
 80066be:	f023 0303 	bic.w	r3, r3, #3
 80066c2:	3415      	adds	r4, #21
 80066c4:	3304      	adds	r3, #4
 80066c6:	42a6      	cmp	r6, r4
 80066c8:	bf38      	it	cc
 80066ca:	2304      	movcc	r3, #4
 80066cc:	441d      	add	r5, r3
 80066ce:	4443      	add	r3, r8
 80066d0:	461e      	mov	r6, r3
 80066d2:	462c      	mov	r4, r5
 80066d4:	4574      	cmp	r4, lr
 80066d6:	d30e      	bcc.n	80066f6 <__mdiff+0xf2>
 80066d8:	f10e 0103 	add.w	r1, lr, #3
 80066dc:	1b49      	subs	r1, r1, r5
 80066de:	f021 0103 	bic.w	r1, r1, #3
 80066e2:	3d03      	subs	r5, #3
 80066e4:	45ae      	cmp	lr, r5
 80066e6:	bf38      	it	cc
 80066e8:	2100      	movcc	r1, #0
 80066ea:	4419      	add	r1, r3
 80066ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066f0:	b18b      	cbz	r3, 8006716 <__mdiff+0x112>
 80066f2:	6117      	str	r7, [r2, #16]
 80066f4:	e7a0      	b.n	8006638 <__mdiff+0x34>
 80066f6:	f854 8b04 	ldr.w	r8, [r4], #4
 80066fa:	fa1f f188 	uxth.w	r1, r8
 80066fe:	4461      	add	r1, ip
 8006700:	1408      	asrs	r0, r1, #16
 8006702:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006706:	b289      	uxth	r1, r1
 8006708:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800670c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006710:	f846 1b04 	str.w	r1, [r6], #4
 8006714:	e7de      	b.n	80066d4 <__mdiff+0xd0>
 8006716:	3f01      	subs	r7, #1
 8006718:	e7e8      	b.n	80066ec <__mdiff+0xe8>
 800671a:	bf00      	nop
 800671c:	0800796f 	.word	0x0800796f
 8006720:	080079e0 	.word	0x080079e0

08006724 <__d2b>:
 8006724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006728:	2101      	movs	r1, #1
 800672a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800672e:	4690      	mov	r8, r2
 8006730:	461d      	mov	r5, r3
 8006732:	f7ff fcd1 	bl	80060d8 <_Balloc>
 8006736:	4604      	mov	r4, r0
 8006738:	b930      	cbnz	r0, 8006748 <__d2b+0x24>
 800673a:	4602      	mov	r2, r0
 800673c:	f240 310a 	movw	r1, #778	; 0x30a
 8006740:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <__d2b+0xb0>)
 8006742:	4825      	ldr	r0, [pc, #148]	; (80067d8 <__d2b+0xb4>)
 8006744:	f000 fb7c 	bl	8006e40 <__assert_func>
 8006748:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800674c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006750:	bb2d      	cbnz	r5, 800679e <__d2b+0x7a>
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	f1b8 0300 	subs.w	r3, r8, #0
 8006758:	d026      	beq.n	80067a8 <__d2b+0x84>
 800675a:	4668      	mov	r0, sp
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	f7ff fd87 	bl	8006270 <__lo0bits>
 8006762:	9900      	ldr	r1, [sp, #0]
 8006764:	b1f0      	cbz	r0, 80067a4 <__d2b+0x80>
 8006766:	9a01      	ldr	r2, [sp, #4]
 8006768:	f1c0 0320 	rsb	r3, r0, #32
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	430b      	orrs	r3, r1
 8006772:	40c2      	lsrs	r2, r0
 8006774:	6163      	str	r3, [r4, #20]
 8006776:	9201      	str	r2, [sp, #4]
 8006778:	9b01      	ldr	r3, [sp, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	bf14      	ite	ne
 800677e:	2102      	movne	r1, #2
 8006780:	2101      	moveq	r1, #1
 8006782:	61a3      	str	r3, [r4, #24]
 8006784:	6121      	str	r1, [r4, #16]
 8006786:	b1c5      	cbz	r5, 80067ba <__d2b+0x96>
 8006788:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800678c:	4405      	add	r5, r0
 800678e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006792:	603d      	str	r5, [r7, #0]
 8006794:	6030      	str	r0, [r6, #0]
 8006796:	4620      	mov	r0, r4
 8006798:	b002      	add	sp, #8
 800679a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800679e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067a2:	e7d6      	b.n	8006752 <__d2b+0x2e>
 80067a4:	6161      	str	r1, [r4, #20]
 80067a6:	e7e7      	b.n	8006778 <__d2b+0x54>
 80067a8:	a801      	add	r0, sp, #4
 80067aa:	f7ff fd61 	bl	8006270 <__lo0bits>
 80067ae:	2101      	movs	r1, #1
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	6121      	str	r1, [r4, #16]
 80067b4:	6163      	str	r3, [r4, #20]
 80067b6:	3020      	adds	r0, #32
 80067b8:	e7e5      	b.n	8006786 <__d2b+0x62>
 80067ba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80067be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067c2:	6038      	str	r0, [r7, #0]
 80067c4:	6918      	ldr	r0, [r3, #16]
 80067c6:	f7ff fd33 	bl	8006230 <__hi0bits>
 80067ca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80067ce:	6031      	str	r1, [r6, #0]
 80067d0:	e7e1      	b.n	8006796 <__d2b+0x72>
 80067d2:	bf00      	nop
 80067d4:	0800796f 	.word	0x0800796f
 80067d8:	080079e0 	.word	0x080079e0

080067dc <_calloc_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	fb02 f501 	mul.w	r5, r2, r1
 80067e2:	4629      	mov	r1, r5
 80067e4:	f000 f854 	bl	8006890 <_malloc_r>
 80067e8:	4604      	mov	r4, r0
 80067ea:	b118      	cbz	r0, 80067f4 <_calloc_r+0x18>
 80067ec:	462a      	mov	r2, r5
 80067ee:	2100      	movs	r1, #0
 80067f0:	f7fe f852 	bl	8004898 <memset>
 80067f4:	4620      	mov	r0, r4
 80067f6:	bd38      	pop	{r3, r4, r5, pc}

080067f8 <_free_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4605      	mov	r5, r0
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d043      	beq.n	8006888 <_free_r+0x90>
 8006800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006804:	1f0c      	subs	r4, r1, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	bfb8      	it	lt
 800680a:	18e4      	addlt	r4, r4, r3
 800680c:	f000 fca2 	bl	8007154 <__malloc_lock>
 8006810:	4a1e      	ldr	r2, [pc, #120]	; (800688c <_free_r+0x94>)
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	4610      	mov	r0, r2
 8006816:	b933      	cbnz	r3, 8006826 <_free_r+0x2e>
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	6014      	str	r4, [r2, #0]
 800681c:	4628      	mov	r0, r5
 800681e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006822:	f000 bc9d 	b.w	8007160 <__malloc_unlock>
 8006826:	42a3      	cmp	r3, r4
 8006828:	d90a      	bls.n	8006840 <_free_r+0x48>
 800682a:	6821      	ldr	r1, [r4, #0]
 800682c:	1862      	adds	r2, r4, r1
 800682e:	4293      	cmp	r3, r2
 8006830:	bf01      	itttt	eq
 8006832:	681a      	ldreq	r2, [r3, #0]
 8006834:	685b      	ldreq	r3, [r3, #4]
 8006836:	1852      	addeq	r2, r2, r1
 8006838:	6022      	streq	r2, [r4, #0]
 800683a:	6063      	str	r3, [r4, #4]
 800683c:	6004      	str	r4, [r0, #0]
 800683e:	e7ed      	b.n	800681c <_free_r+0x24>
 8006840:	461a      	mov	r2, r3
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	b10b      	cbz	r3, 800684a <_free_r+0x52>
 8006846:	42a3      	cmp	r3, r4
 8006848:	d9fa      	bls.n	8006840 <_free_r+0x48>
 800684a:	6811      	ldr	r1, [r2, #0]
 800684c:	1850      	adds	r0, r2, r1
 800684e:	42a0      	cmp	r0, r4
 8006850:	d10b      	bne.n	800686a <_free_r+0x72>
 8006852:	6820      	ldr	r0, [r4, #0]
 8006854:	4401      	add	r1, r0
 8006856:	1850      	adds	r0, r2, r1
 8006858:	4283      	cmp	r3, r0
 800685a:	6011      	str	r1, [r2, #0]
 800685c:	d1de      	bne.n	800681c <_free_r+0x24>
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4401      	add	r1, r0
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	6053      	str	r3, [r2, #4]
 8006868:	e7d8      	b.n	800681c <_free_r+0x24>
 800686a:	d902      	bls.n	8006872 <_free_r+0x7a>
 800686c:	230c      	movs	r3, #12
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	e7d4      	b.n	800681c <_free_r+0x24>
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	1821      	adds	r1, r4, r0
 8006876:	428b      	cmp	r3, r1
 8006878:	bf01      	itttt	eq
 800687a:	6819      	ldreq	r1, [r3, #0]
 800687c:	685b      	ldreq	r3, [r3, #4]
 800687e:	1809      	addeq	r1, r1, r0
 8006880:	6021      	streq	r1, [r4, #0]
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	6054      	str	r4, [r2, #4]
 8006886:	e7c9      	b.n	800681c <_free_r+0x24>
 8006888:	bd38      	pop	{r3, r4, r5, pc}
 800688a:	bf00      	nop
 800688c:	20000220 	.word	0x20000220

08006890 <_malloc_r>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	1ccd      	adds	r5, r1, #3
 8006894:	f025 0503 	bic.w	r5, r5, #3
 8006898:	3508      	adds	r5, #8
 800689a:	2d0c      	cmp	r5, #12
 800689c:	bf38      	it	cc
 800689e:	250c      	movcc	r5, #12
 80068a0:	2d00      	cmp	r5, #0
 80068a2:	4606      	mov	r6, r0
 80068a4:	db01      	blt.n	80068aa <_malloc_r+0x1a>
 80068a6:	42a9      	cmp	r1, r5
 80068a8:	d903      	bls.n	80068b2 <_malloc_r+0x22>
 80068aa:	230c      	movs	r3, #12
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	2000      	movs	r0, #0
 80068b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b2:	f000 fc4f 	bl	8007154 <__malloc_lock>
 80068b6:	4921      	ldr	r1, [pc, #132]	; (800693c <_malloc_r+0xac>)
 80068b8:	680a      	ldr	r2, [r1, #0]
 80068ba:	4614      	mov	r4, r2
 80068bc:	b99c      	cbnz	r4, 80068e6 <_malloc_r+0x56>
 80068be:	4f20      	ldr	r7, [pc, #128]	; (8006940 <_malloc_r+0xb0>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	b923      	cbnz	r3, 80068ce <_malloc_r+0x3e>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4630      	mov	r0, r6
 80068c8:	f000 f994 	bl	8006bf4 <_sbrk_r>
 80068cc:	6038      	str	r0, [r7, #0]
 80068ce:	4629      	mov	r1, r5
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f98f 	bl	8006bf4 <_sbrk_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d123      	bne.n	8006922 <_malloc_r+0x92>
 80068da:	230c      	movs	r3, #12
 80068dc:	4630      	mov	r0, r6
 80068de:	6033      	str	r3, [r6, #0]
 80068e0:	f000 fc3e 	bl	8007160 <__malloc_unlock>
 80068e4:	e7e3      	b.n	80068ae <_malloc_r+0x1e>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	1b5b      	subs	r3, r3, r5
 80068ea:	d417      	bmi.n	800691c <_malloc_r+0x8c>
 80068ec:	2b0b      	cmp	r3, #11
 80068ee:	d903      	bls.n	80068f8 <_malloc_r+0x68>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	441c      	add	r4, r3
 80068f4:	6025      	str	r5, [r4, #0]
 80068f6:	e004      	b.n	8006902 <_malloc_r+0x72>
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	42a2      	cmp	r2, r4
 80068fc:	bf0c      	ite	eq
 80068fe:	600b      	streq	r3, [r1, #0]
 8006900:	6053      	strne	r3, [r2, #4]
 8006902:	4630      	mov	r0, r6
 8006904:	f000 fc2c 	bl	8007160 <__malloc_unlock>
 8006908:	f104 000b 	add.w	r0, r4, #11
 800690c:	1d23      	adds	r3, r4, #4
 800690e:	f020 0007 	bic.w	r0, r0, #7
 8006912:	1ac2      	subs	r2, r0, r3
 8006914:	d0cc      	beq.n	80068b0 <_malloc_r+0x20>
 8006916:	1a1b      	subs	r3, r3, r0
 8006918:	50a3      	str	r3, [r4, r2]
 800691a:	e7c9      	b.n	80068b0 <_malloc_r+0x20>
 800691c:	4622      	mov	r2, r4
 800691e:	6864      	ldr	r4, [r4, #4]
 8006920:	e7cc      	b.n	80068bc <_malloc_r+0x2c>
 8006922:	1cc4      	adds	r4, r0, #3
 8006924:	f024 0403 	bic.w	r4, r4, #3
 8006928:	42a0      	cmp	r0, r4
 800692a:	d0e3      	beq.n	80068f4 <_malloc_r+0x64>
 800692c:	1a21      	subs	r1, r4, r0
 800692e:	4630      	mov	r0, r6
 8006930:	f000 f960 	bl	8006bf4 <_sbrk_r>
 8006934:	3001      	adds	r0, #1
 8006936:	d1dd      	bne.n	80068f4 <_malloc_r+0x64>
 8006938:	e7cf      	b.n	80068da <_malloc_r+0x4a>
 800693a:	bf00      	nop
 800693c:	20000220 	.word	0x20000220
 8006940:	20000224 	.word	0x20000224

08006944 <__sfputc_r>:
 8006944:	6893      	ldr	r3, [r2, #8]
 8006946:	b410      	push	{r4}
 8006948:	3b01      	subs	r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	6093      	str	r3, [r2, #8]
 800694e:	da07      	bge.n	8006960 <__sfputc_r+0x1c>
 8006950:	6994      	ldr	r4, [r2, #24]
 8006952:	42a3      	cmp	r3, r4
 8006954:	db01      	blt.n	800695a <__sfputc_r+0x16>
 8006956:	290a      	cmp	r1, #10
 8006958:	d102      	bne.n	8006960 <__sfputc_r+0x1c>
 800695a:	bc10      	pop	{r4}
 800695c:	f000 b99e 	b.w	8006c9c <__swbuf_r>
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	1c58      	adds	r0, r3, #1
 8006964:	6010      	str	r0, [r2, #0]
 8006966:	7019      	strb	r1, [r3, #0]
 8006968:	4608      	mov	r0, r1
 800696a:	bc10      	pop	{r4}
 800696c:	4770      	bx	lr

0800696e <__sfputs_r>:
 800696e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006970:	4606      	mov	r6, r0
 8006972:	460f      	mov	r7, r1
 8006974:	4614      	mov	r4, r2
 8006976:	18d5      	adds	r5, r2, r3
 8006978:	42ac      	cmp	r4, r5
 800697a:	d101      	bne.n	8006980 <__sfputs_r+0x12>
 800697c:	2000      	movs	r0, #0
 800697e:	e007      	b.n	8006990 <__sfputs_r+0x22>
 8006980:	463a      	mov	r2, r7
 8006982:	4630      	mov	r0, r6
 8006984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006988:	f7ff ffdc 	bl	8006944 <__sfputc_r>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d1f3      	bne.n	8006978 <__sfputs_r+0xa>
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006994 <_vfiprintf_r>:
 8006994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006998:	460d      	mov	r5, r1
 800699a:	4614      	mov	r4, r2
 800699c:	4698      	mov	r8, r3
 800699e:	4606      	mov	r6, r0
 80069a0:	b09d      	sub	sp, #116	; 0x74
 80069a2:	b118      	cbz	r0, 80069ac <_vfiprintf_r+0x18>
 80069a4:	6983      	ldr	r3, [r0, #24]
 80069a6:	b90b      	cbnz	r3, 80069ac <_vfiprintf_r+0x18>
 80069a8:	f7ff facc 	bl	8005f44 <__sinit>
 80069ac:	4b89      	ldr	r3, [pc, #548]	; (8006bd4 <_vfiprintf_r+0x240>)
 80069ae:	429d      	cmp	r5, r3
 80069b0:	d11b      	bne.n	80069ea <_vfiprintf_r+0x56>
 80069b2:	6875      	ldr	r5, [r6, #4]
 80069b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b6:	07d9      	lsls	r1, r3, #31
 80069b8:	d405      	bmi.n	80069c6 <_vfiprintf_r+0x32>
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	059a      	lsls	r2, r3, #22
 80069be:	d402      	bmi.n	80069c6 <_vfiprintf_r+0x32>
 80069c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069c2:	f7ff fb62 	bl	800608a <__retarget_lock_acquire_recursive>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	071b      	lsls	r3, r3, #28
 80069ca:	d501      	bpl.n	80069d0 <_vfiprintf_r+0x3c>
 80069cc:	692b      	ldr	r3, [r5, #16]
 80069ce:	b9eb      	cbnz	r3, 8006a0c <_vfiprintf_r+0x78>
 80069d0:	4629      	mov	r1, r5
 80069d2:	4630      	mov	r0, r6
 80069d4:	f000 f9c6 	bl	8006d64 <__swsetup_r>
 80069d8:	b1c0      	cbz	r0, 8006a0c <_vfiprintf_r+0x78>
 80069da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069dc:	07dc      	lsls	r4, r3, #31
 80069de:	d50e      	bpl.n	80069fe <_vfiprintf_r+0x6a>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	b01d      	add	sp, #116	; 0x74
 80069e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ea:	4b7b      	ldr	r3, [pc, #492]	; (8006bd8 <_vfiprintf_r+0x244>)
 80069ec:	429d      	cmp	r5, r3
 80069ee:	d101      	bne.n	80069f4 <_vfiprintf_r+0x60>
 80069f0:	68b5      	ldr	r5, [r6, #8]
 80069f2:	e7df      	b.n	80069b4 <_vfiprintf_r+0x20>
 80069f4:	4b79      	ldr	r3, [pc, #484]	; (8006bdc <_vfiprintf_r+0x248>)
 80069f6:	429d      	cmp	r5, r3
 80069f8:	bf08      	it	eq
 80069fa:	68f5      	ldreq	r5, [r6, #12]
 80069fc:	e7da      	b.n	80069b4 <_vfiprintf_r+0x20>
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	0598      	lsls	r0, r3, #22
 8006a02:	d4ed      	bmi.n	80069e0 <_vfiprintf_r+0x4c>
 8006a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a06:	f7ff fb41 	bl	800608c <__retarget_lock_release_recursive>
 8006a0a:	e7e9      	b.n	80069e0 <_vfiprintf_r+0x4c>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a10:	2320      	movs	r3, #32
 8006a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a16:	2330      	movs	r3, #48	; 0x30
 8006a18:	f04f 0901 	mov.w	r9, #1
 8006a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a20:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006be0 <_vfiprintf_r+0x24c>
 8006a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a28:	4623      	mov	r3, r4
 8006a2a:	469a      	mov	sl, r3
 8006a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a30:	b10a      	cbz	r2, 8006a36 <_vfiprintf_r+0xa2>
 8006a32:	2a25      	cmp	r2, #37	; 0x25
 8006a34:	d1f9      	bne.n	8006a2a <_vfiprintf_r+0x96>
 8006a36:	ebba 0b04 	subs.w	fp, sl, r4
 8006a3a:	d00b      	beq.n	8006a54 <_vfiprintf_r+0xc0>
 8006a3c:	465b      	mov	r3, fp
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4629      	mov	r1, r5
 8006a42:	4630      	mov	r0, r6
 8006a44:	f7ff ff93 	bl	800696e <__sfputs_r>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f000 80aa 	beq.w	8006ba2 <_vfiprintf_r+0x20e>
 8006a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a50:	445a      	add	r2, fp
 8006a52:	9209      	str	r2, [sp, #36]	; 0x24
 8006a54:	f89a 3000 	ldrb.w	r3, [sl]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80a2 	beq.w	8006ba2 <_vfiprintf_r+0x20e>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a68:	f10a 0a01 	add.w	sl, sl, #1
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	9307      	str	r3, [sp, #28]
 8006a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a74:	931a      	str	r3, [sp, #104]	; 0x68
 8006a76:	4654      	mov	r4, sl
 8006a78:	2205      	movs	r2, #5
 8006a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7e:	4858      	ldr	r0, [pc, #352]	; (8006be0 <_vfiprintf_r+0x24c>)
 8006a80:	f7ff fb0e 	bl	80060a0 <memchr>
 8006a84:	9a04      	ldr	r2, [sp, #16]
 8006a86:	b9d8      	cbnz	r0, 8006ac0 <_vfiprintf_r+0x12c>
 8006a88:	06d1      	lsls	r1, r2, #27
 8006a8a:	bf44      	itt	mi
 8006a8c:	2320      	movmi	r3, #32
 8006a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a92:	0713      	lsls	r3, r2, #28
 8006a94:	bf44      	itt	mi
 8006a96:	232b      	movmi	r3, #43	; 0x2b
 8006a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa2:	d015      	beq.n	8006ad0 <_vfiprintf_r+0x13c>
 8006aa4:	4654      	mov	r4, sl
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f04f 0c0a 	mov.w	ip, #10
 8006aac:	9a07      	ldr	r2, [sp, #28]
 8006aae:	4621      	mov	r1, r4
 8006ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ab4:	3b30      	subs	r3, #48	; 0x30
 8006ab6:	2b09      	cmp	r3, #9
 8006ab8:	d94e      	bls.n	8006b58 <_vfiprintf_r+0x1c4>
 8006aba:	b1b0      	cbz	r0, 8006aea <_vfiprintf_r+0x156>
 8006abc:	9207      	str	r2, [sp, #28]
 8006abe:	e014      	b.n	8006aea <_vfiprintf_r+0x156>
 8006ac0:	eba0 0308 	sub.w	r3, r0, r8
 8006ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	46a2      	mov	sl, r4
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	e7d2      	b.n	8006a76 <_vfiprintf_r+0xe2>
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	1d19      	adds	r1, r3, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	9103      	str	r1, [sp, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	bfbb      	ittet	lt
 8006adc:	425b      	neglt	r3, r3
 8006ade:	f042 0202 	orrlt.w	r2, r2, #2
 8006ae2:	9307      	strge	r3, [sp, #28]
 8006ae4:	9307      	strlt	r3, [sp, #28]
 8006ae6:	bfb8      	it	lt
 8006ae8:	9204      	strlt	r2, [sp, #16]
 8006aea:	7823      	ldrb	r3, [r4, #0]
 8006aec:	2b2e      	cmp	r3, #46	; 0x2e
 8006aee:	d10c      	bne.n	8006b0a <_vfiprintf_r+0x176>
 8006af0:	7863      	ldrb	r3, [r4, #1]
 8006af2:	2b2a      	cmp	r3, #42	; 0x2a
 8006af4:	d135      	bne.n	8006b62 <_vfiprintf_r+0x1ce>
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	3402      	adds	r4, #2
 8006afa:	1d1a      	adds	r2, r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	9203      	str	r2, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bfb8      	it	lt
 8006b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b08:	9305      	str	r3, [sp, #20]
 8006b0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bf0 <_vfiprintf_r+0x25c>
 8006b0e:	2203      	movs	r2, #3
 8006b10:	4650      	mov	r0, sl
 8006b12:	7821      	ldrb	r1, [r4, #0]
 8006b14:	f7ff fac4 	bl	80060a0 <memchr>
 8006b18:	b140      	cbz	r0, 8006b2c <_vfiprintf_r+0x198>
 8006b1a:	2340      	movs	r3, #64	; 0x40
 8006b1c:	eba0 000a 	sub.w	r0, r0, sl
 8006b20:	fa03 f000 	lsl.w	r0, r3, r0
 8006b24:	9b04      	ldr	r3, [sp, #16]
 8006b26:	3401      	adds	r4, #1
 8006b28:	4303      	orrs	r3, r0
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b30:	2206      	movs	r2, #6
 8006b32:	482c      	ldr	r0, [pc, #176]	; (8006be4 <_vfiprintf_r+0x250>)
 8006b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b38:	f7ff fab2 	bl	80060a0 <memchr>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d03f      	beq.n	8006bc0 <_vfiprintf_r+0x22c>
 8006b40:	4b29      	ldr	r3, [pc, #164]	; (8006be8 <_vfiprintf_r+0x254>)
 8006b42:	bb1b      	cbnz	r3, 8006b8c <_vfiprintf_r+0x1f8>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	3307      	adds	r3, #7
 8006b48:	f023 0307 	bic.w	r3, r3, #7
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	9303      	str	r3, [sp, #12]
 8006b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b52:	443b      	add	r3, r7
 8006b54:	9309      	str	r3, [sp, #36]	; 0x24
 8006b56:	e767      	b.n	8006a28 <_vfiprintf_r+0x94>
 8006b58:	460c      	mov	r4, r1
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b60:	e7a5      	b.n	8006aae <_vfiprintf_r+0x11a>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f04f 0c0a 	mov.w	ip, #10
 8006b68:	4619      	mov	r1, r3
 8006b6a:	3401      	adds	r4, #1
 8006b6c:	9305      	str	r3, [sp, #20]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b74:	3a30      	subs	r2, #48	; 0x30
 8006b76:	2a09      	cmp	r2, #9
 8006b78:	d903      	bls.n	8006b82 <_vfiprintf_r+0x1ee>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0c5      	beq.n	8006b0a <_vfiprintf_r+0x176>
 8006b7e:	9105      	str	r1, [sp, #20]
 8006b80:	e7c3      	b.n	8006b0a <_vfiprintf_r+0x176>
 8006b82:	4604      	mov	r4, r0
 8006b84:	2301      	movs	r3, #1
 8006b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b8a:	e7f0      	b.n	8006b6e <_vfiprintf_r+0x1da>
 8006b8c:	ab03      	add	r3, sp, #12
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	462a      	mov	r2, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	4b15      	ldr	r3, [pc, #84]	; (8006bec <_vfiprintf_r+0x258>)
 8006b96:	a904      	add	r1, sp, #16
 8006b98:	f7fd ff24 	bl	80049e4 <_printf_float>
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	1c78      	adds	r0, r7, #1
 8006ba0:	d1d6      	bne.n	8006b50 <_vfiprintf_r+0x1bc>
 8006ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ba4:	07d9      	lsls	r1, r3, #31
 8006ba6:	d405      	bmi.n	8006bb4 <_vfiprintf_r+0x220>
 8006ba8:	89ab      	ldrh	r3, [r5, #12]
 8006baa:	059a      	lsls	r2, r3, #22
 8006bac:	d402      	bmi.n	8006bb4 <_vfiprintf_r+0x220>
 8006bae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bb0:	f7ff fa6c 	bl	800608c <__retarget_lock_release_recursive>
 8006bb4:	89ab      	ldrh	r3, [r5, #12]
 8006bb6:	065b      	lsls	r3, r3, #25
 8006bb8:	f53f af12 	bmi.w	80069e0 <_vfiprintf_r+0x4c>
 8006bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bbe:	e711      	b.n	80069e4 <_vfiprintf_r+0x50>
 8006bc0:	ab03      	add	r3, sp, #12
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4b08      	ldr	r3, [pc, #32]	; (8006bec <_vfiprintf_r+0x258>)
 8006bca:	a904      	add	r1, sp, #16
 8006bcc:	f7fe f9a6 	bl	8004f1c <_printf_i>
 8006bd0:	e7e4      	b.n	8006b9c <_vfiprintf_r+0x208>
 8006bd2:	bf00      	nop
 8006bd4:	080079a0 	.word	0x080079a0
 8006bd8:	080079c0 	.word	0x080079c0
 8006bdc:	08007980 	.word	0x08007980
 8006be0:	08007b3c 	.word	0x08007b3c
 8006be4:	08007b46 	.word	0x08007b46
 8006be8:	080049e5 	.word	0x080049e5
 8006bec:	0800696f 	.word	0x0800696f
 8006bf0:	08007b42 	.word	0x08007b42

08006bf4 <_sbrk_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	4d05      	ldr	r5, [pc, #20]	; (8006c10 <_sbrk_r+0x1c>)
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f7fa ff1e 	bl	8001a40 <_sbrk>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_sbrk_r+0x1a>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_sbrk_r+0x1a>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	20003ff8 	.word	0x20003ff8

08006c14 <__sread>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	460c      	mov	r4, r1
 8006c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1c:	f000 faa6 	bl	800716c <_read_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	bfab      	itete	ge
 8006c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c26:	89a3      	ldrhlt	r3, [r4, #12]
 8006c28:	181b      	addge	r3, r3, r0
 8006c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c2e:	bfac      	ite	ge
 8006c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c32:	81a3      	strhlt	r3, [r4, #12]
 8006c34:	bd10      	pop	{r4, pc}

08006c36 <__swrite>:
 8006c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3a:	461f      	mov	r7, r3
 8006c3c:	898b      	ldrh	r3, [r1, #12]
 8006c3e:	4605      	mov	r5, r0
 8006c40:	05db      	lsls	r3, r3, #23
 8006c42:	460c      	mov	r4, r1
 8006c44:	4616      	mov	r6, r2
 8006c46:	d505      	bpl.n	8006c54 <__swrite+0x1e>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c50:	f000 f9f8 	bl	8007044 <_lseek_r>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	4632      	mov	r2, r6
 8006c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	4628      	mov	r0, r5
 8006c60:	463b      	mov	r3, r7
 8006c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6a:	f000 b869 	b.w	8006d40 <_write_r>

08006c6e <__sseek>:
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	460c      	mov	r4, r1
 8006c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c76:	f000 f9e5 	bl	8007044 <_lseek_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	bf15      	itete	ne
 8006c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c8a:	81a3      	strheq	r3, [r4, #12]
 8006c8c:	bf18      	it	ne
 8006c8e:	81a3      	strhne	r3, [r4, #12]
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <__sclose>:
 8006c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c96:	f000 b8f1 	b.w	8006e7c <_close_r>
	...

08006c9c <__swbuf_r>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	b118      	cbz	r0, 8006cae <__swbuf_r+0x12>
 8006ca6:	6983      	ldr	r3, [r0, #24]
 8006ca8:	b90b      	cbnz	r3, 8006cae <__swbuf_r+0x12>
 8006caa:	f7ff f94b 	bl	8005f44 <__sinit>
 8006cae:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <__swbuf_r+0x98>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d12b      	bne.n	8006d0c <__swbuf_r+0x70>
 8006cb4:	686c      	ldr	r4, [r5, #4]
 8006cb6:	69a3      	ldr	r3, [r4, #24]
 8006cb8:	60a3      	str	r3, [r4, #8]
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	071a      	lsls	r2, r3, #28
 8006cbe:	d52f      	bpl.n	8006d20 <__swbuf_r+0x84>
 8006cc0:	6923      	ldr	r3, [r4, #16]
 8006cc2:	b36b      	cbz	r3, 8006d20 <__swbuf_r+0x84>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	b2f6      	uxtb	r6, r6
 8006cca:	1ac0      	subs	r0, r0, r3
 8006ccc:	6963      	ldr	r3, [r4, #20]
 8006cce:	4637      	mov	r7, r6
 8006cd0:	4283      	cmp	r3, r0
 8006cd2:	dc04      	bgt.n	8006cde <__swbuf_r+0x42>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 f966 	bl	8006fa8 <_fflush_r>
 8006cdc:	bb30      	cbnz	r0, 8006d2c <__swbuf_r+0x90>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	60a3      	str	r3, [r4, #8]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	701e      	strb	r6, [r3, #0]
 8006cee:	6963      	ldr	r3, [r4, #20]
 8006cf0:	4283      	cmp	r3, r0
 8006cf2:	d004      	beq.n	8006cfe <__swbuf_r+0x62>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	07db      	lsls	r3, r3, #31
 8006cf8:	d506      	bpl.n	8006d08 <__swbuf_r+0x6c>
 8006cfa:	2e0a      	cmp	r6, #10
 8006cfc:	d104      	bne.n	8006d08 <__swbuf_r+0x6c>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 f951 	bl	8006fa8 <_fflush_r>
 8006d06:	b988      	cbnz	r0, 8006d2c <__swbuf_r+0x90>
 8006d08:	4638      	mov	r0, r7
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <__swbuf_r+0x9c>)
 8006d0e:	429c      	cmp	r4, r3
 8006d10:	d101      	bne.n	8006d16 <__swbuf_r+0x7a>
 8006d12:	68ac      	ldr	r4, [r5, #8]
 8006d14:	e7cf      	b.n	8006cb6 <__swbuf_r+0x1a>
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <__swbuf_r+0xa0>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	bf08      	it	eq
 8006d1c:	68ec      	ldreq	r4, [r5, #12]
 8006d1e:	e7ca      	b.n	8006cb6 <__swbuf_r+0x1a>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 f81e 	bl	8006d64 <__swsetup_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d0cb      	beq.n	8006cc4 <__swbuf_r+0x28>
 8006d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d30:	e7ea      	b.n	8006d08 <__swbuf_r+0x6c>
 8006d32:	bf00      	nop
 8006d34:	080079a0 	.word	0x080079a0
 8006d38:	080079c0 	.word	0x080079c0
 8006d3c:	08007980 	.word	0x08007980

08006d40 <_write_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4d05      	ldr	r5, [pc, #20]	; (8006d60 <_write_r+0x20>)
 8006d4c:	602a      	str	r2, [r5, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f000 fb48 	bl	80073e4 <_write>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_write_r+0x1e>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_write_r+0x1e>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	20003ff8 	.word	0x20003ff8

08006d64 <__swsetup_r>:
 8006d64:	4b32      	ldr	r3, [pc, #200]	; (8006e30 <__swsetup_r+0xcc>)
 8006d66:	b570      	push	{r4, r5, r6, lr}
 8006d68:	681d      	ldr	r5, [r3, #0]
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	b125      	cbz	r5, 8006d7a <__swsetup_r+0x16>
 8006d70:	69ab      	ldr	r3, [r5, #24]
 8006d72:	b913      	cbnz	r3, 8006d7a <__swsetup_r+0x16>
 8006d74:	4628      	mov	r0, r5
 8006d76:	f7ff f8e5 	bl	8005f44 <__sinit>
 8006d7a:	4b2e      	ldr	r3, [pc, #184]	; (8006e34 <__swsetup_r+0xd0>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d10f      	bne.n	8006da0 <__swsetup_r+0x3c>
 8006d80:	686c      	ldr	r4, [r5, #4]
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d88:	0719      	lsls	r1, r3, #28
 8006d8a:	d42c      	bmi.n	8006de6 <__swsetup_r+0x82>
 8006d8c:	06dd      	lsls	r5, r3, #27
 8006d8e:	d411      	bmi.n	8006db4 <__swsetup_r+0x50>
 8006d90:	2309      	movs	r3, #9
 8006d92:	6033      	str	r3, [r6, #0]
 8006d94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	e03e      	b.n	8006e1e <__swsetup_r+0xba>
 8006da0:	4b25      	ldr	r3, [pc, #148]	; (8006e38 <__swsetup_r+0xd4>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d101      	bne.n	8006daa <__swsetup_r+0x46>
 8006da6:	68ac      	ldr	r4, [r5, #8]
 8006da8:	e7eb      	b.n	8006d82 <__swsetup_r+0x1e>
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <__swsetup_r+0xd8>)
 8006dac:	429c      	cmp	r4, r3
 8006dae:	bf08      	it	eq
 8006db0:	68ec      	ldreq	r4, [r5, #12]
 8006db2:	e7e6      	b.n	8006d82 <__swsetup_r+0x1e>
 8006db4:	0758      	lsls	r0, r3, #29
 8006db6:	d512      	bpl.n	8006dde <__swsetup_r+0x7a>
 8006db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dba:	b141      	cbz	r1, 8006dce <__swsetup_r+0x6a>
 8006dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	d002      	beq.n	8006dca <__swsetup_r+0x66>
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff fd17 	bl	80067f8 <_free_r>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6363      	str	r3, [r4, #52]	; 0x34
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	f043 0308 	orr.w	r3, r3, #8
 8006de4:	81a3      	strh	r3, [r4, #12]
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	b94b      	cbnz	r3, 8006dfe <__swsetup_r+0x9a>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df4:	d003      	beq.n	8006dfe <__swsetup_r+0x9a>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f000 f959 	bl	80070b0 <__smakebuf_r>
 8006dfe:	89a0      	ldrh	r0, [r4, #12]
 8006e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e04:	f010 0301 	ands.w	r3, r0, #1
 8006e08:	d00a      	beq.n	8006e20 <__swsetup_r+0xbc>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	6963      	ldr	r3, [r4, #20]
 8006e10:	425b      	negs	r3, r3
 8006e12:	61a3      	str	r3, [r4, #24]
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	b943      	cbnz	r3, 8006e2a <__swsetup_r+0xc6>
 8006e18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e1c:	d1ba      	bne.n	8006d94 <__swsetup_r+0x30>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	0781      	lsls	r1, r0, #30
 8006e22:	bf58      	it	pl
 8006e24:	6963      	ldrpl	r3, [r4, #20]
 8006e26:	60a3      	str	r3, [r4, #8]
 8006e28:	e7f4      	b.n	8006e14 <__swsetup_r+0xb0>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	e7f7      	b.n	8006e1e <__swsetup_r+0xba>
 8006e2e:	bf00      	nop
 8006e30:	2000000c 	.word	0x2000000c
 8006e34:	080079a0 	.word	0x080079a0
 8006e38:	080079c0 	.word	0x080079c0
 8006e3c:	08007980 	.word	0x08007980

08006e40 <__assert_func>:
 8006e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e42:	4614      	mov	r4, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <__assert_func+0x2c>)
 8006e48:	4605      	mov	r5, r0
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68d8      	ldr	r0, [r3, #12]
 8006e4e:	b14c      	cbz	r4, 8006e64 <__assert_func+0x24>
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <__assert_func+0x30>)
 8006e52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e56:	9100      	str	r1, [sp, #0]
 8006e58:	462b      	mov	r3, r5
 8006e5a:	4906      	ldr	r1, [pc, #24]	; (8006e74 <__assert_func+0x34>)
 8006e5c:	f000 f8e0 	bl	8007020 <fiprintf>
 8006e60:	f000 f9a3 	bl	80071aa <abort>
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <__assert_func+0x38>)
 8006e66:	461c      	mov	r4, r3
 8006e68:	e7f3      	b.n	8006e52 <__assert_func+0x12>
 8006e6a:	bf00      	nop
 8006e6c:	2000000c 	.word	0x2000000c
 8006e70:	08007b4d 	.word	0x08007b4d
 8006e74:	08007b5a 	.word	0x08007b5a
 8006e78:	08007b88 	.word	0x08007b88

08006e7c <_close_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4d05      	ldr	r5, [pc, #20]	; (8006e98 <_close_r+0x1c>)
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	602b      	str	r3, [r5, #0]
 8006e88:	f000 fada 	bl	8007440 <_close>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_close_r+0x1a>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_close_r+0x1a>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	20003ff8 	.word	0x20003ff8

08006e9c <__sflush_r>:
 8006e9c:	898a      	ldrh	r2, [r1, #12]
 8006e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	0710      	lsls	r0, r2, #28
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	d458      	bmi.n	8006f5c <__sflush_r+0xc0>
 8006eaa:	684b      	ldr	r3, [r1, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dc05      	bgt.n	8006ebc <__sflush_r+0x20>
 8006eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	dc02      	bgt.n	8006ebc <__sflush_r+0x20>
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ebe:	2e00      	cmp	r6, #0
 8006ec0:	d0f9      	beq.n	8006eb6 <__sflush_r+0x1a>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ec8:	682f      	ldr	r7, [r5, #0]
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	d032      	beq.n	8006f34 <__sflush_r+0x98>
 8006ece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	075a      	lsls	r2, r3, #29
 8006ed4:	d505      	bpl.n	8006ee2 <__sflush_r+0x46>
 8006ed6:	6863      	ldr	r3, [r4, #4]
 8006ed8:	1ac0      	subs	r0, r0, r3
 8006eda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006edc:	b10b      	cbz	r3, 8006ee2 <__sflush_r+0x46>
 8006ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ee0:	1ac0      	subs	r0, r0, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ee8:	4628      	mov	r0, r5
 8006eea:	6a21      	ldr	r1, [r4, #32]
 8006eec:	47b0      	blx	r6
 8006eee:	1c43      	adds	r3, r0, #1
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	d106      	bne.n	8006f02 <__sflush_r+0x66>
 8006ef4:	6829      	ldr	r1, [r5, #0]
 8006ef6:	291d      	cmp	r1, #29
 8006ef8:	d82c      	bhi.n	8006f54 <__sflush_r+0xb8>
 8006efa:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <__sflush_r+0x108>)
 8006efc:	40ca      	lsrs	r2, r1
 8006efe:	07d6      	lsls	r6, r2, #31
 8006f00:	d528      	bpl.n	8006f54 <__sflush_r+0xb8>
 8006f02:	2200      	movs	r2, #0
 8006f04:	6062      	str	r2, [r4, #4]
 8006f06:	6922      	ldr	r2, [r4, #16]
 8006f08:	04d9      	lsls	r1, r3, #19
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	d504      	bpl.n	8006f18 <__sflush_r+0x7c>
 8006f0e:	1c42      	adds	r2, r0, #1
 8006f10:	d101      	bne.n	8006f16 <__sflush_r+0x7a>
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	b903      	cbnz	r3, 8006f18 <__sflush_r+0x7c>
 8006f16:	6560      	str	r0, [r4, #84]	; 0x54
 8006f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f1a:	602f      	str	r7, [r5, #0]
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	d0ca      	beq.n	8006eb6 <__sflush_r+0x1a>
 8006f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f24:	4299      	cmp	r1, r3
 8006f26:	d002      	beq.n	8006f2e <__sflush_r+0x92>
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f7ff fc65 	bl	80067f8 <_free_r>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	6360      	str	r0, [r4, #52]	; 0x34
 8006f32:	e7c1      	b.n	8006eb8 <__sflush_r+0x1c>
 8006f34:	6a21      	ldr	r1, [r4, #32]
 8006f36:	2301      	movs	r3, #1
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b0      	blx	r6
 8006f3c:	1c41      	adds	r1, r0, #1
 8006f3e:	d1c7      	bne.n	8006ed0 <__sflush_r+0x34>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0c4      	beq.n	8006ed0 <__sflush_r+0x34>
 8006f46:	2b1d      	cmp	r3, #29
 8006f48:	d001      	beq.n	8006f4e <__sflush_r+0xb2>
 8006f4a:	2b16      	cmp	r3, #22
 8006f4c:	d101      	bne.n	8006f52 <__sflush_r+0xb6>
 8006f4e:	602f      	str	r7, [r5, #0]
 8006f50:	e7b1      	b.n	8006eb6 <__sflush_r+0x1a>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	e7ad      	b.n	8006eb8 <__sflush_r+0x1c>
 8006f5c:	690f      	ldr	r7, [r1, #16]
 8006f5e:	2f00      	cmp	r7, #0
 8006f60:	d0a9      	beq.n	8006eb6 <__sflush_r+0x1a>
 8006f62:	0793      	lsls	r3, r2, #30
 8006f64:	bf18      	it	ne
 8006f66:	2300      	movne	r3, #0
 8006f68:	680e      	ldr	r6, [r1, #0]
 8006f6a:	bf08      	it	eq
 8006f6c:	694b      	ldreq	r3, [r1, #20]
 8006f6e:	eba6 0807 	sub.w	r8, r6, r7
 8006f72:	600f      	str	r7, [r1, #0]
 8006f74:	608b      	str	r3, [r1, #8]
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	dd9c      	ble.n	8006eb6 <__sflush_r+0x1a>
 8006f7c:	4643      	mov	r3, r8
 8006f7e:	463a      	mov	r2, r7
 8006f80:	4628      	mov	r0, r5
 8006f82:	6a21      	ldr	r1, [r4, #32]
 8006f84:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f86:	47b0      	blx	r6
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	dc06      	bgt.n	8006f9a <__sflush_r+0xfe>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	e78e      	b.n	8006eb8 <__sflush_r+0x1c>
 8006f9a:	4407      	add	r7, r0
 8006f9c:	eba8 0800 	sub.w	r8, r8, r0
 8006fa0:	e7e9      	b.n	8006f76 <__sflush_r+0xda>
 8006fa2:	bf00      	nop
 8006fa4:	20400001 	.word	0x20400001

08006fa8 <_fflush_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	690b      	ldr	r3, [r1, #16]
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	b913      	cbnz	r3, 8006fb8 <_fflush_r+0x10>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	b118      	cbz	r0, 8006fc2 <_fflush_r+0x1a>
 8006fba:	6983      	ldr	r3, [r0, #24]
 8006fbc:	b90b      	cbnz	r3, 8006fc2 <_fflush_r+0x1a>
 8006fbe:	f7fe ffc1 	bl	8005f44 <__sinit>
 8006fc2:	4b14      	ldr	r3, [pc, #80]	; (8007014 <_fflush_r+0x6c>)
 8006fc4:	429c      	cmp	r4, r3
 8006fc6:	d11b      	bne.n	8007000 <_fflush_r+0x58>
 8006fc8:	686c      	ldr	r4, [r5, #4]
 8006fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0ef      	beq.n	8006fb2 <_fflush_r+0xa>
 8006fd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fd4:	07d0      	lsls	r0, r2, #31
 8006fd6:	d404      	bmi.n	8006fe2 <_fflush_r+0x3a>
 8006fd8:	0599      	lsls	r1, r3, #22
 8006fda:	d402      	bmi.n	8006fe2 <_fflush_r+0x3a>
 8006fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fde:	f7ff f854 	bl	800608a <__retarget_lock_acquire_recursive>
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	f7ff ff59 	bl	8006e9c <__sflush_r>
 8006fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fec:	4605      	mov	r5, r0
 8006fee:	07da      	lsls	r2, r3, #31
 8006ff0:	d4e0      	bmi.n	8006fb4 <_fflush_r+0xc>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	059b      	lsls	r3, r3, #22
 8006ff6:	d4dd      	bmi.n	8006fb4 <_fflush_r+0xc>
 8006ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ffa:	f7ff f847 	bl	800608c <__retarget_lock_release_recursive>
 8006ffe:	e7d9      	b.n	8006fb4 <_fflush_r+0xc>
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <_fflush_r+0x70>)
 8007002:	429c      	cmp	r4, r3
 8007004:	d101      	bne.n	800700a <_fflush_r+0x62>
 8007006:	68ac      	ldr	r4, [r5, #8]
 8007008:	e7df      	b.n	8006fca <_fflush_r+0x22>
 800700a:	4b04      	ldr	r3, [pc, #16]	; (800701c <_fflush_r+0x74>)
 800700c:	429c      	cmp	r4, r3
 800700e:	bf08      	it	eq
 8007010:	68ec      	ldreq	r4, [r5, #12]
 8007012:	e7da      	b.n	8006fca <_fflush_r+0x22>
 8007014:	080079a0 	.word	0x080079a0
 8007018:	080079c0 	.word	0x080079c0
 800701c:	08007980 	.word	0x08007980

08007020 <fiprintf>:
 8007020:	b40e      	push	{r1, r2, r3}
 8007022:	b503      	push	{r0, r1, lr}
 8007024:	4601      	mov	r1, r0
 8007026:	ab03      	add	r3, sp, #12
 8007028:	4805      	ldr	r0, [pc, #20]	; (8007040 <fiprintf+0x20>)
 800702a:	f853 2b04 	ldr.w	r2, [r3], #4
 800702e:	6800      	ldr	r0, [r0, #0]
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	f7ff fcaf 	bl	8006994 <_vfiprintf_r>
 8007036:	b002      	add	sp, #8
 8007038:	f85d eb04 	ldr.w	lr, [sp], #4
 800703c:	b003      	add	sp, #12
 800703e:	4770      	bx	lr
 8007040:	2000000c 	.word	0x2000000c

08007044 <_lseek_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	2200      	movs	r2, #0
 800704e:	4d05      	ldr	r5, [pc, #20]	; (8007064 <_lseek_r+0x20>)
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f000 f9b4 	bl	80073c0 <_lseek>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_lseek_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_lseek_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20003ff8 	.word	0x20003ff8

08007068 <__swhatbuf_r>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	460e      	mov	r6, r1
 800706c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007070:	4614      	mov	r4, r2
 8007072:	2900      	cmp	r1, #0
 8007074:	461d      	mov	r5, r3
 8007076:	b096      	sub	sp, #88	; 0x58
 8007078:	da07      	bge.n	800708a <__swhatbuf_r+0x22>
 800707a:	2300      	movs	r3, #0
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	89b3      	ldrh	r3, [r6, #12]
 8007080:	061a      	lsls	r2, r3, #24
 8007082:	d410      	bmi.n	80070a6 <__swhatbuf_r+0x3e>
 8007084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007088:	e00e      	b.n	80070a8 <__swhatbuf_r+0x40>
 800708a:	466a      	mov	r2, sp
 800708c:	f000 f894 	bl	80071b8 <_fstat_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	dbf2      	blt.n	800707a <__swhatbuf_r+0x12>
 8007094:	9a01      	ldr	r2, [sp, #4]
 8007096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800709a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800709e:	425a      	negs	r2, r3
 80070a0:	415a      	adcs	r2, r3
 80070a2:	602a      	str	r2, [r5, #0]
 80070a4:	e7ee      	b.n	8007084 <__swhatbuf_r+0x1c>
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	2000      	movs	r0, #0
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	b016      	add	sp, #88	; 0x58
 80070ae:	bd70      	pop	{r4, r5, r6, pc}

080070b0 <__smakebuf_r>:
 80070b0:	898b      	ldrh	r3, [r1, #12]
 80070b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070b4:	079d      	lsls	r5, r3, #30
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	d507      	bpl.n	80070cc <__smakebuf_r+0x1c>
 80070bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	2301      	movs	r3, #1
 80070c6:	6163      	str	r3, [r4, #20]
 80070c8:	b002      	add	sp, #8
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	466a      	mov	r2, sp
 80070ce:	ab01      	add	r3, sp, #4
 80070d0:	f7ff ffca 	bl	8007068 <__swhatbuf_r>
 80070d4:	9900      	ldr	r1, [sp, #0]
 80070d6:	4605      	mov	r5, r0
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff fbd9 	bl	8006890 <_malloc_r>
 80070de:	b948      	cbnz	r0, 80070f4 <__smakebuf_r+0x44>
 80070e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e4:	059a      	lsls	r2, r3, #22
 80070e6:	d4ef      	bmi.n	80070c8 <__smakebuf_r+0x18>
 80070e8:	f023 0303 	bic.w	r3, r3, #3
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	81a3      	strh	r3, [r4, #12]
 80070f2:	e7e3      	b.n	80070bc <__smakebuf_r+0xc>
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <__smakebuf_r+0x7c>)
 80070f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	6120      	str	r0, [r4, #16]
 8007106:	6163      	str	r3, [r4, #20]
 8007108:	9b01      	ldr	r3, [sp, #4]
 800710a:	b15b      	cbz	r3, 8007124 <__smakebuf_r+0x74>
 800710c:	4630      	mov	r0, r6
 800710e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007112:	f000 f863 	bl	80071dc <_isatty_r>
 8007116:	b128      	cbz	r0, 8007124 <__smakebuf_r+0x74>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	81a3      	strh	r3, [r4, #12]
 8007124:	89a0      	ldrh	r0, [r4, #12]
 8007126:	4305      	orrs	r5, r0
 8007128:	81a5      	strh	r5, [r4, #12]
 800712a:	e7cd      	b.n	80070c8 <__smakebuf_r+0x18>
 800712c:	08005edd 	.word	0x08005edd

08007130 <__ascii_mbtowc>:
 8007130:	b082      	sub	sp, #8
 8007132:	b901      	cbnz	r1, 8007136 <__ascii_mbtowc+0x6>
 8007134:	a901      	add	r1, sp, #4
 8007136:	b142      	cbz	r2, 800714a <__ascii_mbtowc+0x1a>
 8007138:	b14b      	cbz	r3, 800714e <__ascii_mbtowc+0x1e>
 800713a:	7813      	ldrb	r3, [r2, #0]
 800713c:	600b      	str	r3, [r1, #0]
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	1e10      	subs	r0, r2, #0
 8007142:	bf18      	it	ne
 8007144:	2001      	movne	r0, #1
 8007146:	b002      	add	sp, #8
 8007148:	4770      	bx	lr
 800714a:	4610      	mov	r0, r2
 800714c:	e7fb      	b.n	8007146 <__ascii_mbtowc+0x16>
 800714e:	f06f 0001 	mvn.w	r0, #1
 8007152:	e7f8      	b.n	8007146 <__ascii_mbtowc+0x16>

08007154 <__malloc_lock>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__malloc_lock+0x8>)
 8007156:	f7fe bf98 	b.w	800608a <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	20003ff0 	.word	0x20003ff0

08007160 <__malloc_unlock>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__malloc_unlock+0x8>)
 8007162:	f7fe bf93 	b.w	800608c <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	20003ff0 	.word	0x20003ff0

0800716c <_read_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4604      	mov	r4, r0
 8007170:	4608      	mov	r0, r1
 8007172:	4611      	mov	r1, r2
 8007174:	2200      	movs	r2, #0
 8007176:	4d05      	ldr	r5, [pc, #20]	; (800718c <_read_r+0x20>)
 8007178:	602a      	str	r2, [r5, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f000 f8ca 	bl	8007314 <_read>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_read_r+0x1e>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_read_r+0x1e>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	20003ff8 	.word	0x20003ff8

08007190 <__ascii_wctomb>:
 8007190:	4603      	mov	r3, r0
 8007192:	4608      	mov	r0, r1
 8007194:	b141      	cbz	r1, 80071a8 <__ascii_wctomb+0x18>
 8007196:	2aff      	cmp	r2, #255	; 0xff
 8007198:	d904      	bls.n	80071a4 <__ascii_wctomb+0x14>
 800719a:	228a      	movs	r2, #138	; 0x8a
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	4770      	bx	lr
 80071a4:	2001      	movs	r0, #1
 80071a6:	700a      	strb	r2, [r1, #0]
 80071a8:	4770      	bx	lr

080071aa <abort>:
 80071aa:	2006      	movs	r0, #6
 80071ac:	b508      	push	{r3, lr}
 80071ae:	f000 f84d 	bl	800724c <raise>
 80071b2:	2001      	movs	r0, #1
 80071b4:	f000 fb1a 	bl	80077ec <_exit>

080071b8 <_fstat_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	2300      	movs	r3, #0
 80071bc:	4d06      	ldr	r5, [pc, #24]	; (80071d8 <_fstat_r+0x20>)
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	602b      	str	r3, [r5, #0]
 80071c6:	f000 f984 	bl	80074d2 <_fstat>
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	d102      	bne.n	80071d4 <_fstat_r+0x1c>
 80071ce:	682b      	ldr	r3, [r5, #0]
 80071d0:	b103      	cbz	r3, 80071d4 <_fstat_r+0x1c>
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	bd38      	pop	{r3, r4, r5, pc}
 80071d6:	bf00      	nop
 80071d8:	20003ff8 	.word	0x20003ff8

080071dc <_isatty_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	2300      	movs	r3, #0
 80071e0:	4d05      	ldr	r5, [pc, #20]	; (80071f8 <_isatty_r+0x1c>)
 80071e2:	4604      	mov	r4, r0
 80071e4:	4608      	mov	r0, r1
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	f000 fae4 	bl	80077b4 <_isatty>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_isatty_r+0x1a>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_isatty_r+0x1a>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	20003ff8 	.word	0x20003ff8

080071fc <_raise_r>:
 80071fc:	291f      	cmp	r1, #31
 80071fe:	b538      	push	{r3, r4, r5, lr}
 8007200:	4604      	mov	r4, r0
 8007202:	460d      	mov	r5, r1
 8007204:	d904      	bls.n	8007210 <_raise_r+0x14>
 8007206:	2316      	movs	r3, #22
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	f04f 30ff 	mov.w	r0, #4294967295
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007212:	b112      	cbz	r2, 800721a <_raise_r+0x1e>
 8007214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007218:	b94b      	cbnz	r3, 800722e <_raise_r+0x32>
 800721a:	4620      	mov	r0, r4
 800721c:	f000 f830 	bl	8007280 <_getpid_r>
 8007220:	462a      	mov	r2, r5
 8007222:	4601      	mov	r1, r0
 8007224:	4620      	mov	r0, r4
 8007226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800722a:	f000 b817 	b.w	800725c <_kill_r>
 800722e:	2b01      	cmp	r3, #1
 8007230:	d00a      	beq.n	8007248 <_raise_r+0x4c>
 8007232:	1c59      	adds	r1, r3, #1
 8007234:	d103      	bne.n	800723e <_raise_r+0x42>
 8007236:	2316      	movs	r3, #22
 8007238:	6003      	str	r3, [r0, #0]
 800723a:	2001      	movs	r0, #1
 800723c:	e7e7      	b.n	800720e <_raise_r+0x12>
 800723e:	2400      	movs	r4, #0
 8007240:	4628      	mov	r0, r5
 8007242:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007246:	4798      	blx	r3
 8007248:	2000      	movs	r0, #0
 800724a:	e7e0      	b.n	800720e <_raise_r+0x12>

0800724c <raise>:
 800724c:	4b02      	ldr	r3, [pc, #8]	; (8007258 <raise+0xc>)
 800724e:	4601      	mov	r1, r0
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	f7ff bfd3 	b.w	80071fc <_raise_r>
 8007256:	bf00      	nop
 8007258:	2000000c 	.word	0x2000000c

0800725c <_kill_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	2300      	movs	r3, #0
 8007260:	4d06      	ldr	r5, [pc, #24]	; (800727c <_kill_r+0x20>)
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	f000 fadd 	bl	8007828 <_kill>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	d102      	bne.n	8007278 <_kill_r+0x1c>
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	b103      	cbz	r3, 8007278 <_kill_r+0x1c>
 8007276:	6023      	str	r3, [r4, #0]
 8007278:	bd38      	pop	{r3, r4, r5, pc}
 800727a:	bf00      	nop
 800727c:	20003ff8 	.word	0x20003ff8

08007280 <_getpid_r>:
 8007280:	f000 b904 	b.w	800748c <_getpid>

08007284 <findslot>:
 8007284:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <findslot+0x2c>)
 8007286:	b510      	push	{r4, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	b118      	cbz	r0, 8007296 <findslot+0x12>
 800728e:	6983      	ldr	r3, [r0, #24]
 8007290:	b90b      	cbnz	r3, 8007296 <findslot+0x12>
 8007292:	f7fe fe57 	bl	8005f44 <__sinit>
 8007296:	2c13      	cmp	r4, #19
 8007298:	d807      	bhi.n	80072aa <findslot+0x26>
 800729a:	4806      	ldr	r0, [pc, #24]	; (80072b4 <findslot+0x30>)
 800729c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80072a0:	3201      	adds	r2, #1
 80072a2:	d002      	beq.n	80072aa <findslot+0x26>
 80072a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80072a8:	bd10      	pop	{r4, pc}
 80072aa:	2000      	movs	r0, #0
 80072ac:	e7fc      	b.n	80072a8 <findslot+0x24>
 80072ae:	bf00      	nop
 80072b0:	2000000c 	.word	0x2000000c
 80072b4:	20000234 	.word	0x20000234

080072b8 <checkerror>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	4604      	mov	r4, r0
 80072be:	d109      	bne.n	80072d4 <checkerror+0x1c>
 80072c0:	f7fd fac0 	bl	8004844 <__errno>
 80072c4:	2613      	movs	r6, #19
 80072c6:	4605      	mov	r5, r0
 80072c8:	2700      	movs	r7, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	beab      	bkpt	0x00ab
 80072d0:	4606      	mov	r6, r0
 80072d2:	602e      	str	r6, [r5, #0]
 80072d4:	4620      	mov	r0, r4
 80072d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072d8 <error>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	4604      	mov	r4, r0
 80072dc:	f7fd fab2 	bl	8004844 <__errno>
 80072e0:	2613      	movs	r6, #19
 80072e2:	4605      	mov	r5, r0
 80072e4:	2700      	movs	r7, #0
 80072e6:	4630      	mov	r0, r6
 80072e8:	4639      	mov	r1, r7
 80072ea:	beab      	bkpt	0x00ab
 80072ec:	4606      	mov	r6, r0
 80072ee:	4620      	mov	r0, r4
 80072f0:	602e      	str	r6, [r5, #0]
 80072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072f4 <_swiread>:
 80072f4:	b530      	push	{r4, r5, lr}
 80072f6:	b085      	sub	sp, #20
 80072f8:	2406      	movs	r4, #6
 80072fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80072fe:	9203      	str	r2, [sp, #12]
 8007300:	ad01      	add	r5, sp, #4
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	beab      	bkpt	0x00ab
 8007308:	4604      	mov	r4, r0
 800730a:	4620      	mov	r0, r4
 800730c:	f7ff ffd4 	bl	80072b8 <checkerror>
 8007310:	b005      	add	sp, #20
 8007312:	bd30      	pop	{r4, r5, pc}

08007314 <_read>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	460e      	mov	r6, r1
 8007318:	4615      	mov	r5, r2
 800731a:	f7ff ffb3 	bl	8007284 <findslot>
 800731e:	4604      	mov	r4, r0
 8007320:	b930      	cbnz	r0, 8007330 <_read+0x1c>
 8007322:	f7fd fa8f 	bl	8004844 <__errno>
 8007326:	2309      	movs	r3, #9
 8007328:	6003      	str	r3, [r0, #0]
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	462a      	mov	r2, r5
 8007332:	4631      	mov	r1, r6
 8007334:	6800      	ldr	r0, [r0, #0]
 8007336:	f7ff ffdd 	bl	80072f4 <_swiread>
 800733a:	1c43      	adds	r3, r0, #1
 800733c:	bf1f      	itttt	ne
 800733e:	6863      	ldrne	r3, [r4, #4]
 8007340:	1a28      	subne	r0, r5, r0
 8007342:	181b      	addne	r3, r3, r0
 8007344:	6063      	strne	r3, [r4, #4]
 8007346:	e7f2      	b.n	800732e <_read+0x1a>

08007348 <_swilseek>:
 8007348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800734a:	460c      	mov	r4, r1
 800734c:	4616      	mov	r6, r2
 800734e:	f7ff ff99 	bl	8007284 <findslot>
 8007352:	4605      	mov	r5, r0
 8007354:	b940      	cbnz	r0, 8007368 <_swilseek+0x20>
 8007356:	f7fd fa75 	bl	8004844 <__errno>
 800735a:	2309      	movs	r3, #9
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	f04f 34ff 	mov.w	r4, #4294967295
 8007362:	4620      	mov	r0, r4
 8007364:	b003      	add	sp, #12
 8007366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007368:	2e02      	cmp	r6, #2
 800736a:	d903      	bls.n	8007374 <_swilseek+0x2c>
 800736c:	f7fd fa6a 	bl	8004844 <__errno>
 8007370:	2316      	movs	r3, #22
 8007372:	e7f3      	b.n	800735c <_swilseek+0x14>
 8007374:	2e01      	cmp	r6, #1
 8007376:	d112      	bne.n	800739e <_swilseek+0x56>
 8007378:	6843      	ldr	r3, [r0, #4]
 800737a:	18e4      	adds	r4, r4, r3
 800737c:	d4f6      	bmi.n	800736c <_swilseek+0x24>
 800737e:	682b      	ldr	r3, [r5, #0]
 8007380:	260a      	movs	r6, #10
 8007382:	466f      	mov	r7, sp
 8007384:	e9cd 3400 	strd	r3, r4, [sp]
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	beab      	bkpt	0x00ab
 800738e:	4606      	mov	r6, r0
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff ff91 	bl	80072b8 <checkerror>
 8007396:	2800      	cmp	r0, #0
 8007398:	dbe1      	blt.n	800735e <_swilseek+0x16>
 800739a:	606c      	str	r4, [r5, #4]
 800739c:	e7e1      	b.n	8007362 <_swilseek+0x1a>
 800739e:	2e02      	cmp	r6, #2
 80073a0:	d1ed      	bne.n	800737e <_swilseek+0x36>
 80073a2:	6803      	ldr	r3, [r0, #0]
 80073a4:	260c      	movs	r6, #12
 80073a6:	466f      	mov	r7, sp
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	beab      	bkpt	0x00ab
 80073b0:	4606      	mov	r6, r0
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ff80 	bl	80072b8 <checkerror>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d0d0      	beq.n	800735e <_swilseek+0x16>
 80073bc:	4404      	add	r4, r0
 80073be:	e7de      	b.n	800737e <_swilseek+0x36>

080073c0 <_lseek>:
 80073c0:	f7ff bfc2 	b.w	8007348 <_swilseek>

080073c4 <_swiwrite>:
 80073c4:	b530      	push	{r4, r5, lr}
 80073c6:	b085      	sub	sp, #20
 80073c8:	2405      	movs	r4, #5
 80073ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80073ce:	9203      	str	r2, [sp, #12]
 80073d0:	ad01      	add	r5, sp, #4
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	beab      	bkpt	0x00ab
 80073d8:	4604      	mov	r4, r0
 80073da:	4620      	mov	r0, r4
 80073dc:	f7ff ff6c 	bl	80072b8 <checkerror>
 80073e0:	b005      	add	sp, #20
 80073e2:	bd30      	pop	{r4, r5, pc}

080073e4 <_write>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	460e      	mov	r6, r1
 80073e8:	4615      	mov	r5, r2
 80073ea:	f7ff ff4b 	bl	8007284 <findslot>
 80073ee:	4604      	mov	r4, r0
 80073f0:	b930      	cbnz	r0, 8007400 <_write+0x1c>
 80073f2:	f7fd fa27 	bl	8004844 <__errno>
 80073f6:	2309      	movs	r3, #9
 80073f8:	6003      	str	r3, [r0, #0]
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	462a      	mov	r2, r5
 8007402:	4631      	mov	r1, r6
 8007404:	6800      	ldr	r0, [r0, #0]
 8007406:	f7ff ffdd 	bl	80073c4 <_swiwrite>
 800740a:	1e03      	subs	r3, r0, #0
 800740c:	dbf5      	blt.n	80073fa <_write+0x16>
 800740e:	6862      	ldr	r2, [r4, #4]
 8007410:	1ae8      	subs	r0, r5, r3
 8007412:	4402      	add	r2, r0
 8007414:	42ab      	cmp	r3, r5
 8007416:	6062      	str	r2, [r4, #4]
 8007418:	d1f1      	bne.n	80073fe <_write+0x1a>
 800741a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800741e:	2000      	movs	r0, #0
 8007420:	f7ff bf5a 	b.w	80072d8 <error>

08007424 <_swiclose>:
 8007424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007426:	2402      	movs	r4, #2
 8007428:	9001      	str	r0, [sp, #4]
 800742a:	ad01      	add	r5, sp, #4
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	beab      	bkpt	0x00ab
 8007432:	4604      	mov	r4, r0
 8007434:	4620      	mov	r0, r4
 8007436:	f7ff ff3f 	bl	80072b8 <checkerror>
 800743a:	b003      	add	sp, #12
 800743c:	bd30      	pop	{r4, r5, pc}
	...

08007440 <_close>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4605      	mov	r5, r0
 8007444:	f7ff ff1e 	bl	8007284 <findslot>
 8007448:	4604      	mov	r4, r0
 800744a:	b930      	cbnz	r0, 800745a <_close+0x1a>
 800744c:	f7fd f9fa 	bl	8004844 <__errno>
 8007450:	2309      	movs	r3, #9
 8007452:	6003      	str	r3, [r0, #0]
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	bd38      	pop	{r3, r4, r5, pc}
 800745a:	3d01      	subs	r5, #1
 800745c:	2d01      	cmp	r5, #1
 800745e:	d809      	bhi.n	8007474 <_close+0x34>
 8007460:	4b09      	ldr	r3, [pc, #36]	; (8007488 <_close+0x48>)
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d104      	bne.n	8007474 <_close+0x34>
 800746a:	f04f 33ff 	mov.w	r3, #4294967295
 800746e:	6003      	str	r3, [r0, #0]
 8007470:	2000      	movs	r0, #0
 8007472:	e7f1      	b.n	8007458 <_close+0x18>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	f7ff ffd5 	bl	8007424 <_swiclose>
 800747a:	2800      	cmp	r0, #0
 800747c:	d1ec      	bne.n	8007458 <_close+0x18>
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	e7e8      	b.n	8007458 <_close+0x18>
 8007486:	bf00      	nop
 8007488:	20000234 	.word	0x20000234

0800748c <_getpid>:
 800748c:	2001      	movs	r0, #1
 800748e:	4770      	bx	lr

08007490 <_swistat>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	460c      	mov	r4, r1
 8007494:	f7ff fef6 	bl	8007284 <findslot>
 8007498:	4605      	mov	r5, r0
 800749a:	b930      	cbnz	r0, 80074aa <_swistat+0x1a>
 800749c:	f7fd f9d2 	bl	8004844 <__errno>
 80074a0:	2309      	movs	r3, #9
 80074a2:	6003      	str	r3, [r0, #0]
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
 80074aa:	6863      	ldr	r3, [r4, #4]
 80074ac:	260c      	movs	r6, #12
 80074ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80074ba:	4630      	mov	r0, r6
 80074bc:	4629      	mov	r1, r5
 80074be:	beab      	bkpt	0x00ab
 80074c0:	4605      	mov	r5, r0
 80074c2:	4628      	mov	r0, r5
 80074c4:	f7ff fef8 	bl	80072b8 <checkerror>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	bf1c      	itt	ne
 80074cc:	6120      	strne	r0, [r4, #16]
 80074ce:	2000      	movne	r0, #0
 80074d0:	e7ea      	b.n	80074a8 <_swistat+0x18>

080074d2 <_fstat>:
 80074d2:	460b      	mov	r3, r1
 80074d4:	b510      	push	{r4, lr}
 80074d6:	2100      	movs	r1, #0
 80074d8:	4604      	mov	r4, r0
 80074da:	2258      	movs	r2, #88	; 0x58
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fd f9db 	bl	8004898 <memset>
 80074e2:	4601      	mov	r1, r0
 80074e4:	4620      	mov	r0, r4
 80074e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ea:	f7ff bfd1 	b.w	8007490 <_swistat>

080074ee <_stat>:
 80074ee:	b538      	push	{r3, r4, r5, lr}
 80074f0:	460d      	mov	r5, r1
 80074f2:	4604      	mov	r4, r0
 80074f4:	2258      	movs	r2, #88	; 0x58
 80074f6:	2100      	movs	r1, #0
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7fd f9cd 	bl	8004898 <memset>
 80074fe:	4620      	mov	r0, r4
 8007500:	2100      	movs	r1, #0
 8007502:	f000 f811 	bl	8007528 <_swiopen>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	4604      	mov	r4, r0
 800750a:	d00b      	beq.n	8007524 <_stat+0x36>
 800750c:	686b      	ldr	r3, [r5, #4]
 800750e:	4629      	mov	r1, r5
 8007510:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007514:	606b      	str	r3, [r5, #4]
 8007516:	f7ff ffbb 	bl	8007490 <_swistat>
 800751a:	4605      	mov	r5, r0
 800751c:	4620      	mov	r0, r4
 800751e:	f7ff ff8f 	bl	8007440 <_close>
 8007522:	462c      	mov	r4, r5
 8007524:	4620      	mov	r0, r4
 8007526:	bd38      	pop	{r3, r4, r5, pc}

08007528 <_swiopen>:
 8007528:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <_swiopen+0xb0>)
 800752a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800752e:	4681      	mov	r9, r0
 8007530:	460f      	mov	r7, r1
 8007532:	2500      	movs	r5, #0
 8007534:	461e      	mov	r6, r3
 8007536:	b097      	sub	sp, #92	; 0x5c
 8007538:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800753c:	1c61      	adds	r1, r4, #1
 800753e:	d037      	beq.n	80075b0 <_swiopen+0x88>
 8007540:	3501      	adds	r5, #1
 8007542:	2d14      	cmp	r5, #20
 8007544:	d1f8      	bne.n	8007538 <_swiopen+0x10>
 8007546:	f7fd f97d 	bl	8004844 <__errno>
 800754a:	2318      	movs	r3, #24
 800754c:	f04f 34ff 	mov.w	r4, #4294967295
 8007550:	6003      	str	r3, [r0, #0]
 8007552:	e03d      	b.n	80075d0 <_swiopen+0xa8>
 8007554:	f240 6301 	movw	r3, #1537	; 0x601
 8007558:	f3c7 4400 	ubfx	r4, r7, #16, #1
 800755c:	07ba      	lsls	r2, r7, #30
 800755e:	bf48      	it	mi
 8007560:	f044 0402 	orrmi.w	r4, r4, #2
 8007564:	421f      	tst	r7, r3
 8007566:	bf18      	it	ne
 8007568:	f044 0404 	orrne.w	r4, r4, #4
 800756c:	073b      	lsls	r3, r7, #28
 800756e:	bf48      	it	mi
 8007570:	f024 0404 	bicmi.w	r4, r4, #4
 8007574:	4648      	mov	r0, r9
 8007576:	bf48      	it	mi
 8007578:	f044 0408 	orrmi.w	r4, r4, #8
 800757c:	f8cd 9000 	str.w	r9, [sp]
 8007580:	f7f8 fde6 	bl	8000150 <strlen>
 8007584:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007588:	2401      	movs	r4, #1
 800758a:	4620      	mov	r0, r4
 800758c:	4641      	mov	r1, r8
 800758e:	beab      	bkpt	0x00ab
 8007590:	4604      	mov	r4, r0
 8007592:	2c00      	cmp	r4, #0
 8007594:	db07      	blt.n	80075a6 <_swiopen+0x7e>
 8007596:	2300      	movs	r3, #0
 8007598:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 800759c:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80075a0:	462c      	mov	r4, r5
 80075a2:	6073      	str	r3, [r6, #4]
 80075a4:	e014      	b.n	80075d0 <_swiopen+0xa8>
 80075a6:	4620      	mov	r0, r4
 80075a8:	f7ff fe96 	bl	80072d8 <error>
 80075ac:	4604      	mov	r4, r0
 80075ae:	e00f      	b.n	80075d0 <_swiopen+0xa8>
 80075b0:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 80075b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80075b8:	46e8      	mov	r8, sp
 80075ba:	d1cb      	bne.n	8007554 <_swiopen+0x2c>
 80075bc:	4641      	mov	r1, r8
 80075be:	4648      	mov	r0, r9
 80075c0:	f7ff ff95 	bl	80074ee <_stat>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d0c5      	beq.n	8007554 <_swiopen+0x2c>
 80075c8:	f7fd f93c 	bl	8004844 <__errno>
 80075cc:	2311      	movs	r3, #17
 80075ce:	6003      	str	r3, [r0, #0]
 80075d0:	4620      	mov	r0, r4
 80075d2:	b017      	add	sp, #92	; 0x5c
 80075d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075d8:	20000234 	.word	0x20000234

080075dc <_get_semihosting_exts>:
 80075dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075e0:	4606      	mov	r6, r0
 80075e2:	460f      	mov	r7, r1
 80075e4:	482a      	ldr	r0, [pc, #168]	; (8007690 <_get_semihosting_exts+0xb4>)
 80075e6:	2100      	movs	r1, #0
 80075e8:	4615      	mov	r5, r2
 80075ea:	f7ff ff9d 	bl	8007528 <_swiopen>
 80075ee:	4604      	mov	r4, r0
 80075f0:	462a      	mov	r2, r5
 80075f2:	2100      	movs	r1, #0
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7fd f94f 	bl	8004898 <memset>
 80075fa:	1c63      	adds	r3, r4, #1
 80075fc:	d016      	beq.n	800762c <_get_semihosting_exts+0x50>
 80075fe:	4620      	mov	r0, r4
 8007600:	f7ff fe40 	bl	8007284 <findslot>
 8007604:	f04f 080c 	mov.w	r8, #12
 8007608:	4681      	mov	r9, r0
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	beab      	bkpt	0x00ab
 8007610:	4680      	mov	r8, r0
 8007612:	4640      	mov	r0, r8
 8007614:	f7ff fe50 	bl	80072b8 <checkerror>
 8007618:	2803      	cmp	r0, #3
 800761a:	dd02      	ble.n	8007622 <_get_semihosting_exts+0x46>
 800761c:	1ec3      	subs	r3, r0, #3
 800761e:	42ab      	cmp	r3, r5
 8007620:	dc08      	bgt.n	8007634 <_get_semihosting_exts+0x58>
 8007622:	4620      	mov	r0, r4
 8007624:	f7ff ff0c 	bl	8007440 <_close>
 8007628:	f04f 34ff 	mov.w	r4, #4294967295
 800762c:	4620      	mov	r0, r4
 800762e:	b003      	add	sp, #12
 8007630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007634:	2204      	movs	r2, #4
 8007636:	4620      	mov	r0, r4
 8007638:	eb0d 0102 	add.w	r1, sp, r2
 800763c:	f7ff fe6a 	bl	8007314 <_read>
 8007640:	2803      	cmp	r0, #3
 8007642:	ddee      	ble.n	8007622 <_get_semihosting_exts+0x46>
 8007644:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007648:	2b53      	cmp	r3, #83	; 0x53
 800764a:	d1ea      	bne.n	8007622 <_get_semihosting_exts+0x46>
 800764c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007650:	2b48      	cmp	r3, #72	; 0x48
 8007652:	d1e6      	bne.n	8007622 <_get_semihosting_exts+0x46>
 8007654:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007658:	2b46      	cmp	r3, #70	; 0x46
 800765a:	d1e2      	bne.n	8007622 <_get_semihosting_exts+0x46>
 800765c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007660:	2b42      	cmp	r3, #66	; 0x42
 8007662:	d1de      	bne.n	8007622 <_get_semihosting_exts+0x46>
 8007664:	2201      	movs	r2, #1
 8007666:	4639      	mov	r1, r7
 8007668:	4620      	mov	r0, r4
 800766a:	f7ff fe6d 	bl	8007348 <_swilseek>
 800766e:	2800      	cmp	r0, #0
 8007670:	dbd7      	blt.n	8007622 <_get_semihosting_exts+0x46>
 8007672:	462a      	mov	r2, r5
 8007674:	4631      	mov	r1, r6
 8007676:	4620      	mov	r0, r4
 8007678:	f7ff fe4c 	bl	8007314 <_read>
 800767c:	4605      	mov	r5, r0
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff fede 	bl	8007440 <_close>
 8007684:	4628      	mov	r0, r5
 8007686:	f7ff fe17 	bl	80072b8 <checkerror>
 800768a:	4604      	mov	r4, r0
 800768c:	e7ce      	b.n	800762c <_get_semihosting_exts+0x50>
 800768e:	bf00      	nop
 8007690:	08007c94 	.word	0x08007c94

08007694 <initialise_semihosting_exts>:
 8007694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007696:	2100      	movs	r1, #0
 8007698:	2201      	movs	r2, #1
 800769a:	4d09      	ldr	r5, [pc, #36]	; (80076c0 <initialise_semihosting_exts+0x2c>)
 800769c:	4c09      	ldr	r4, [pc, #36]	; (80076c4 <initialise_semihosting_exts+0x30>)
 800769e:	a801      	add	r0, sp, #4
 80076a0:	6029      	str	r1, [r5, #0]
 80076a2:	6022      	str	r2, [r4, #0]
 80076a4:	f7ff ff9a 	bl	80075dc <_get_semihosting_exts>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	dd07      	ble.n	80076bc <initialise_semihosting_exts+0x28>
 80076ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80076b0:	f003 0201 	and.w	r2, r3, #1
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	602a      	str	r2, [r5, #0]
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	b003      	add	sp, #12
 80076be:	bd30      	pop	{r4, r5, pc}
 80076c0:	200001dc 	.word	0x200001dc
 80076c4:	200001e0 	.word	0x200001e0

080076c8 <_has_ext_exit_extended>:
 80076c8:	b510      	push	{r4, lr}
 80076ca:	4c04      	ldr	r4, [pc, #16]	; (80076dc <_has_ext_exit_extended+0x14>)
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	da01      	bge.n	80076d6 <_has_ext_exit_extended+0xe>
 80076d2:	f7ff ffdf 	bl	8007694 <initialise_semihosting_exts>
 80076d6:	6820      	ldr	r0, [r4, #0]
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	200001dc 	.word	0x200001dc

080076e0 <_has_ext_stdout_stderr>:
 80076e0:	b510      	push	{r4, lr}
 80076e2:	4c04      	ldr	r4, [pc, #16]	; (80076f4 <_has_ext_stdout_stderr+0x14>)
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	da01      	bge.n	80076ee <_has_ext_stdout_stderr+0xe>
 80076ea:	f7ff ffd3 	bl	8007694 <initialise_semihosting_exts>
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	bf00      	nop
 80076f4:	200001e0 	.word	0x200001e0

080076f8 <initialise_monitor_handles>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	2303      	movs	r3, #3
 80076fe:	2400      	movs	r4, #0
 8007700:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80077b0 <initialise_monitor_handles+0xb8>
 8007704:	b085      	sub	sp, #20
 8007706:	f8cd 9004 	str.w	r9, [sp, #4]
 800770a:	f10d 0804 	add.w	r8, sp, #4
 800770e:	9303      	str	r3, [sp, #12]
 8007710:	2501      	movs	r5, #1
 8007712:	9402      	str	r4, [sp, #8]
 8007714:	4628      	mov	r0, r5
 8007716:	4641      	mov	r1, r8
 8007718:	beab      	bkpt	0x00ab
 800771a:	4605      	mov	r5, r0
 800771c:	4a20      	ldr	r2, [pc, #128]	; (80077a0 <initialise_monitor_handles+0xa8>)
 800771e:	4623      	mov	r3, r4
 8007720:	f04f 31ff 	mov.w	r1, #4294967295
 8007724:	4614      	mov	r4, r2
 8007726:	4e1f      	ldr	r6, [pc, #124]	; (80077a4 <initialise_monitor_handles+0xac>)
 8007728:	6035      	str	r5, [r6, #0]
 800772a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800772e:	3301      	adds	r3, #1
 8007730:	2b14      	cmp	r3, #20
 8007732:	d1fa      	bne.n	800772a <initialise_monitor_handles+0x32>
 8007734:	f7ff ffd4 	bl	80076e0 <_has_ext_stdout_stderr>
 8007738:	4d1b      	ldr	r5, [pc, #108]	; (80077a8 <initialise_monitor_handles+0xb0>)
 800773a:	b1d0      	cbz	r0, 8007772 <initialise_monitor_handles+0x7a>
 800773c:	f04f 0a03 	mov.w	sl, #3
 8007740:	2304      	movs	r3, #4
 8007742:	f8cd 9004 	str.w	r9, [sp, #4]
 8007746:	2701      	movs	r7, #1
 8007748:	f8cd a00c 	str.w	sl, [sp, #12]
 800774c:	9302      	str	r3, [sp, #8]
 800774e:	4638      	mov	r0, r7
 8007750:	4641      	mov	r1, r8
 8007752:	beab      	bkpt	0x00ab
 8007754:	4683      	mov	fp, r0
 8007756:	4b15      	ldr	r3, [pc, #84]	; (80077ac <initialise_monitor_handles+0xb4>)
 8007758:	f8cd 9004 	str.w	r9, [sp, #4]
 800775c:	f8c3 b000 	str.w	fp, [r3]
 8007760:	2308      	movs	r3, #8
 8007762:	f8cd a00c 	str.w	sl, [sp, #12]
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	4638      	mov	r0, r7
 800776a:	4641      	mov	r1, r8
 800776c:	beab      	bkpt	0x00ab
 800776e:	4607      	mov	r7, r0
 8007770:	602f      	str	r7, [r5, #0]
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	3301      	adds	r3, #1
 8007776:	bf02      	ittt	eq
 8007778:	4b0c      	ldreq	r3, [pc, #48]	; (80077ac <initialise_monitor_handles+0xb4>)
 800777a:	681b      	ldreq	r3, [r3, #0]
 800777c:	602b      	streq	r3, [r5, #0]
 800777e:	6833      	ldr	r3, [r6, #0]
 8007780:	2600      	movs	r6, #0
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	6066      	str	r6, [r4, #4]
 8007786:	f7ff ffab 	bl	80076e0 <_has_ext_stdout_stderr>
 800778a:	b130      	cbz	r0, 800779a <initialise_monitor_handles+0xa2>
 800778c:	4b07      	ldr	r3, [pc, #28]	; (80077ac <initialise_monitor_handles+0xb4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800779a:	b005      	add	sp, #20
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	20000234 	.word	0x20000234
 80077a4:	2000022c 	.word	0x2000022c
 80077a8:	20000228 	.word	0x20000228
 80077ac:	20000230 	.word	0x20000230
 80077b0:	08007caa 	.word	0x08007caa

080077b4 <_isatty>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	f7ff fd65 	bl	8007284 <findslot>
 80077ba:	2509      	movs	r5, #9
 80077bc:	4604      	mov	r4, r0
 80077be:	b920      	cbnz	r0, 80077ca <_isatty+0x16>
 80077c0:	f7fd f840 	bl	8004844 <__errno>
 80077c4:	6005      	str	r5, [r0, #0]
 80077c6:	4620      	mov	r0, r4
 80077c8:	bd70      	pop	{r4, r5, r6, pc}
 80077ca:	4628      	mov	r0, r5
 80077cc:	4621      	mov	r1, r4
 80077ce:	beab      	bkpt	0x00ab
 80077d0:	4604      	mov	r4, r0
 80077d2:	2c01      	cmp	r4, #1
 80077d4:	d0f7      	beq.n	80077c6 <_isatty+0x12>
 80077d6:	f7fd f835 	bl	8004844 <__errno>
 80077da:	2400      	movs	r4, #0
 80077dc:	4605      	mov	r5, r0
 80077de:	2613      	movs	r6, #19
 80077e0:	4630      	mov	r0, r6
 80077e2:	4621      	mov	r1, r4
 80077e4:	beab      	bkpt	0x00ab
 80077e6:	4606      	mov	r6, r0
 80077e8:	602e      	str	r6, [r5, #0]
 80077ea:	e7ec      	b.n	80077c6 <_isatty+0x12>

080077ec <_exit>:
 80077ec:	4601      	mov	r1, r0
 80077ee:	b508      	push	{r3, lr}
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	4a01      	ldr	r2, [pc, #4]	; (80077fc <_exit+0x10>)
 80077f6:	f000 f803 	bl	8007800 <_kill_shared>
 80077fa:	bf00      	nop
 80077fc:	00020026 	.word	0x00020026

08007800 <_kill_shared>:
 8007800:	b507      	push	{r0, r1, r2, lr}
 8007802:	e9cd 2100 	strd	r2, r1, [sp]
 8007806:	f7ff ff5f 	bl	80076c8 <_has_ext_exit_extended>
 800780a:	2800      	cmp	r0, #0
 800780c:	bf14      	ite	ne
 800780e:	2420      	movne	r4, #32
 8007810:	2418      	moveq	r4, #24
 8007812:	f7ff ff59 	bl	80076c8 <_has_ext_exit_extended>
 8007816:	b120      	cbz	r0, 8007822 <_kill_shared+0x22>
 8007818:	466d      	mov	r5, sp
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	beab      	bkpt	0x00ab
 8007820:	4604      	mov	r4, r0
 8007822:	9d00      	ldr	r5, [sp, #0]
 8007824:	e7f9      	b.n	800781a <_kill_shared+0x1a>
	...

08007828 <_kill>:
 8007828:	2906      	cmp	r1, #6
 800782a:	b508      	push	{r3, lr}
 800782c:	bf0c      	ite	eq
 800782e:	4a02      	ldreq	r2, [pc, #8]	; (8007838 <_kill+0x10>)
 8007830:	4a02      	ldrne	r2, [pc, #8]	; (800783c <_kill+0x14>)
 8007832:	f7ff ffe5 	bl	8007800 <_kill_shared>
 8007836:	bf00      	nop
 8007838:	00020023 	.word	0x00020023
 800783c:	00020026 	.word	0x00020026

08007840 <_init>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr

0800784c <_fini>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr
